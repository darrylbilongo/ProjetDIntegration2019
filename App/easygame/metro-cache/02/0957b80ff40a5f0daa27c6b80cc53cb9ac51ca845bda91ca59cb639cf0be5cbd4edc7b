{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function getTrace(node) {\n    function shouldPutToTrace(syntax) {\n      if (syntax === null) {\n        return false;\n      }\n\n      return syntax.type === 'Type' || syntax.type === 'Property' || syntax.type === 'Keyword';\n    }\n\n    function hasMatch(matchNode) {\n      if (Array.isArray(matchNode.match)) {\n        for (var i = 0; i < matchNode.match.length; i++) {\n          if (hasMatch(matchNode.match[i])) {\n            if (shouldPutToTrace(matchNode.syntax)) {\n              result.unshift(matchNode.syntax);\n            }\n\n            return true;\n          }\n        }\n      } else if (matchNode.node === node) {\n        result = shouldPutToTrace(matchNode.syntax) ? [matchNode.syntax] : [];\n        return true;\n      }\n\n      return false;\n    }\n\n    var result = null;\n\n    if (this.matched !== null) {\n      hasMatch(this.matched);\n    }\n\n    return result;\n  }\n\n  function testNode(match, node, fn) {\n    var trace = getTrace.call(match, node);\n\n    if (trace === null) {\n      return false;\n    }\n\n    return trace.some(fn);\n  }\n\n  function isType(node, type) {\n    return testNode(this, node, function (matchNode) {\n      return matchNode.type === 'Type' && matchNode.name === type;\n    });\n  }\n\n  function isProperty(node, property) {\n    return testNode(this, node, function (matchNode) {\n      return matchNode.type === 'Property' && matchNode.name === property;\n    });\n  }\n\n  function isKeyword(node) {\n    return testNode(this, node, function (matchNode) {\n      return matchNode.type === 'Keyword';\n    });\n  }\n\n  module.exports = {\n    getTrace: getTrace,\n    isType: isType,\n    isProperty: isProperty,\n    isKeyword: isKeyword\n  };\n});","map":[[2,0,1,0],[2,11,1,9,"getTrace"],[2,19,1,0],[2,20,1,18,"node"],[2,24,1,0],[2,26,1,24],[3,0,2,4],[3,13,2,13,"shouldPutToTrace"],[3,29,2,4],[3,30,2,30,"syntax"],[3,36,2,4],[3,38,2,38],[4,0,3,8],[4,10,3,12,"syntax"],[4,16,3,18],[4,21,3,23],[4,25,3,8],[4,27,3,29],[5,0,4,12],[5,15,4,19],[5,20,4,12],[6,0,5,9],[8,0,7,8],[8,13,8,12,"syntax"],[8,19,8,18],[8,20,8,19,"type"],[8,24,8,12],[8,29,8,28],[8,35,8,12],[8,39,9,12,"syntax"],[8,45,9,18],[8,46,9,19,"type"],[8,50,9,12],[8,55,9,28],[8,65,8,12],[8,69,10,12,"syntax"],[8,75,10,18],[8,76,10,19,"type"],[8,80,10,12],[8,85,10,28],[8,94,7,8],[9,0,12,5],[11,0,14,4],[11,13,14,13,"hasMatch"],[11,21,14,4],[11,22,14,22,"matchNode"],[11,31,14,4],[11,33,14,33],[12,0,15,8],[12,10,15,12,"Array"],[12,15,15,17],[12,16,15,18,"isArray"],[12,23,15,12],[12,24,15,26,"matchNode"],[12,33,15,35],[12,34,15,36,"match"],[12,39,15,12],[12,40,15,8],[12,42,15,44],[13,0,17,12],[13,13,17,17],[13,17,17,21,"i"],[13,18,17,22],[13,21,17,25],[13,22,17,12],[13,24,17,28,"i"],[13,25,17,29],[13,28,17,32,"matchNode"],[13,37,17,41],[13,38,17,42,"match"],[13,43,17,32],[13,44,17,48,"length"],[13,50,17,12],[13,52,17,56,"i"],[13,53,17,57],[13,55,17,12],[13,57,17,61],[14,0,18,16],[14,14,18,20,"hasMatch"],[14,22,18,28],[14,23,18,29,"matchNode"],[14,32,18,38],[14,33,18,39,"match"],[14,38,18,29],[14,39,18,45,"i"],[14,40,18,29],[14,41,18,28],[14,42,18,16],[14,44,18,50],[15,0,19,20],[15,16,19,24,"shouldPutToTrace"],[15,32,19,40],[15,33,19,41,"matchNode"],[15,42,19,50],[15,43,19,51,"syntax"],[15,49,19,40],[15,50,19,20],[15,52,19,60],[16,0,20,24,"result"],[16,14,20,24,"result"],[16,20,20,30],[16,21,20,31,"unshift"],[16,28,20,24],[16,29,20,39,"matchNode"],[16,38,20,48],[16,39,20,49,"syntax"],[16,45,20,24],[17,0,21,21],[19,0,23,20],[19,19,23,27],[19,23,23,20],[20,0,24,17],[21,0,25,13],[22,0,26,9],[22,7,15,8],[22,13,26,15],[22,17,26,19,"matchNode"],[22,26,26,28],[22,27,26,29,"node"],[22,31,26,19],[22,36,26,38,"node"],[22,40,26,15],[22,42,26,44],[23,0,27,12,"result"],[23,8,27,12,"result"],[23,14,27,18],[23,17,27,21,"shouldPutToTrace"],[23,33,27,37],[23,34,27,38,"matchNode"],[23,43,27,47],[23,44,27,48,"syntax"],[23,50,27,37],[23,51,27,21],[23,54,28,18],[23,55,28,19,"matchNode"],[23,64,28,28],[23,65,28,29,"syntax"],[23,71,28,18],[23,72,27,21],[23,75,29,18],[23,77,27,12],[24,0,31,12],[24,15,31,19],[24,19,31,12],[25,0,32,9],[27,0,34,8],[27,13,34,15],[27,18,34,8],[28,0,35,5],[30,0,37,4],[30,8,37,8,"result"],[30,14,37,14],[30,17,37,17],[30,21,37,4],[32,0,39,4],[32,8,39,8],[32,13,39,13,"matched"],[32,20,39,8],[32,25,39,25],[32,29,39,4],[32,31,39,31],[33,0,40,8,"hasMatch"],[33,6,40,8,"hasMatch"],[33,14,40,16],[33,15,40,17],[33,20,40,22,"matched"],[33,27,40,16],[33,28,40,8],[34,0,41,5],[36,0,43,4],[36,11,43,11,"result"],[36,17,43,4],[37,0,44,1],[39,0,46,0],[39,11,46,9,"testNode"],[39,19,46,0],[39,20,46,18,"match"],[39,25,46,0],[39,27,46,25,"node"],[39,31,46,0],[39,33,46,31,"fn"],[39,35,46,0],[39,37,46,35],[40,0,47,4],[40,8,47,8,"trace"],[40,13,47,13],[40,16,47,16,"getTrace"],[40,24,47,24],[40,25,47,25,"call"],[40,29,47,16],[40,30,47,30,"match"],[40,35,47,16],[40,37,47,37,"node"],[40,41,47,16],[40,42,47,4],[42,0,49,4],[42,8,49,8,"trace"],[42,13,49,13],[42,18,49,18],[42,22,49,4],[42,24,49,24],[43,0,50,8],[43,13,50,15],[43,18,50,8],[44,0,51,5],[46,0,53,4],[46,11,53,11,"trace"],[46,16,53,16],[46,17,53,17,"some"],[46,21,53,11],[46,22,53,22,"fn"],[46,24,53,11],[46,25,53,4],[47,0,54,1],[49,0,56,0],[49,11,56,9,"isType"],[49,17,56,0],[49,18,56,16,"node"],[49,22,56,0],[49,24,56,22,"type"],[49,28,56,0],[49,30,56,28],[50,0,57,4],[50,11,57,11,"testNode"],[50,19,57,19],[50,20,57,20],[50,24,57,19],[50,26,57,26,"node"],[50,30,57,19],[50,32,57,32],[50,42,57,41,"matchNode"],[50,51,57,32],[50,53,57,52],[51,0,58,8],[51,13,58,15,"matchNode"],[51,22,58,24],[51,23,58,25,"type"],[51,27,58,15],[51,32,58,34],[51,38,58,15],[51,42,58,44,"matchNode"],[51,51,58,53],[51,52,58,54,"name"],[51,56,58,44],[51,61,58,63,"type"],[51,65,58,8],[52,0,59,5],[52,5,57,19],[52,6,57,4],[53,0,60,1],[55,0,62,0],[55,11,62,9,"isProperty"],[55,21,62,0],[55,22,62,20,"node"],[55,26,62,0],[55,28,62,26,"property"],[55,36,62,0],[55,38,62,36],[56,0,63,4],[56,11,63,11,"testNode"],[56,19,63,19],[56,20,63,20],[56,24,63,19],[56,26,63,26,"node"],[56,30,63,19],[56,32,63,32],[56,42,63,41,"matchNode"],[56,51,63,32],[56,53,63,52],[57,0,64,8],[57,13,64,15,"matchNode"],[57,22,64,24],[57,23,64,25,"type"],[57,27,64,15],[57,32,64,34],[57,42,64,15],[57,46,64,48,"matchNode"],[57,55,64,57],[57,56,64,58,"name"],[57,60,64,48],[57,65,64,67,"property"],[57,73,64,8],[58,0,65,5],[58,5,63,19],[58,6,63,4],[59,0,66,1],[61,0,68,0],[61,11,68,9,"isKeyword"],[61,20,68,0],[61,21,68,19,"node"],[61,25,68,0],[61,27,68,25],[62,0,69,4],[62,11,69,11,"testNode"],[62,19,69,19],[62,20,69,20],[62,24,69,19],[62,26,69,26,"node"],[62,30,69,19],[62,32,69,32],[62,42,69,41,"matchNode"],[62,51,69,32],[62,53,69,52],[63,0,70,8],[63,13,70,15,"matchNode"],[63,22,70,24],[63,23,70,25,"type"],[63,27,70,15],[63,32,70,34],[63,41,70,8],[64,0,71,5],[64,5,69,19],[64,6,69,4],[65,0,72,1],[67,0,74,0,"module"],[67,2,74,0,"module"],[67,8,74,6],[67,9,74,7,"exports"],[67,16,74,0],[67,19,74,17],[68,0,75,4,"getTrace"],[68,4,75,4,"getTrace"],[68,12,75,12],[68,14,75,14,"getTrace"],[68,22,74,17],[69,0,76,4,"isType"],[69,4,76,4,"isType"],[69,10,76,10],[69,12,76,12,"isType"],[69,18,74,17],[70,0,77,4,"isProperty"],[70,4,77,4,"isProperty"],[70,14,77,14],[70,16,77,16,"isProperty"],[70,26,74,17],[71,0,78,4,"isKeyword"],[71,4,78,4,"isKeyword"],[71,13,78,13],[71,15,78,15,"isKeyword"],[72,0,74,17],[72,3,74,0]]},"type":"js/module"}]}