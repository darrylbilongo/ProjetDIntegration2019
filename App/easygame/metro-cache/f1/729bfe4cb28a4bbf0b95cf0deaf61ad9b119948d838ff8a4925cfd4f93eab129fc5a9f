{"dependencies":[{"name":"../common/List","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var List = _$$_REQUIRE(_dependencyMap[0], \"../common/List\");\n\n  function getFirstMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n\n    return getFirstMatchNode(matchNode.match[0]);\n  }\n\n  function getLastMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n\n    return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);\n  }\n\n  function matchFragments(lexer, ast, match, type, name) {\n    function findFragments(matchNode) {\n      if (matchNode.syntax !== null && matchNode.syntax.type === type && matchNode.syntax.name === name) {\n        var start = getFirstMatchNode(matchNode);\n        var end = getLastMatchNode(matchNode);\n        lexer.syntax.walk(ast, function (node, item, list) {\n          if (node === start) {\n            var nodes = new List();\n\n            do {\n              nodes.appendData(item.data);\n\n              if (item.data === end) {\n                break;\n              }\n\n              item = item.next;\n            } while (item !== null);\n\n            fragments.push({\n              parent: list,\n              nodes: nodes\n            });\n          }\n        });\n      }\n\n      if (Array.isArray(matchNode.match)) {\n        matchNode.match.forEach(findFragments);\n      }\n    }\n\n    var fragments = [];\n\n    if (match.matched !== null) {\n      findFragments(match.matched);\n    }\n\n    return fragments;\n  }\n\n  module.exports = {\n    matchFragments: matchFragments\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"List"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,61,1,0],[4,0,3,0],[4,11,3,9,"getFirstMatchNode"],[4,28,3,0],[4,29,3,27,"matchNode"],[4,38,3,0],[4,40,3,38],[5,0,4,4],[5,8,4,8],[5,18,4,18,"matchNode"],[5,27,4,4],[5,29,4,29],[6,0,5,8],[6,13,5,15,"matchNode"],[6,22,5,24],[6,23,5,25,"node"],[6,27,5,8],[7,0,6,5],[9,0,8,4],[9,11,8,11,"getFirstMatchNode"],[9,28,8,28],[9,29,8,29,"matchNode"],[9,38,8,38],[9,39,8,39,"match"],[9,44,8,29],[9,45,8,45],[9,46,8,29],[9,47,8,28],[9,48,8,4],[10,0,9,1],[12,0,11,0],[12,11,11,9,"getLastMatchNode"],[12,27,11,0],[12,28,11,26,"matchNode"],[12,37,11,0],[12,39,11,37],[13,0,12,4],[13,8,12,8],[13,18,12,18,"matchNode"],[13,27,12,4],[13,29,12,29],[14,0,13,8],[14,13,13,15,"matchNode"],[14,22,13,24],[14,23,13,25,"node"],[14,27,13,8],[15,0,14,5],[17,0,16,4],[17,11,16,11,"getLastMatchNode"],[17,27,16,27],[17,28,16,28,"matchNode"],[17,37,16,37],[17,38,16,38,"match"],[17,43,16,28],[17,44,16,44,"matchNode"],[17,53,16,53],[17,54,16,54,"match"],[17,59,16,44],[17,60,16,60,"length"],[17,66,16,44],[17,69,16,69],[17,70,16,28],[17,71,16,27],[17,72,16,4],[18,0,17,1],[20,0,19,0],[20,11,19,9,"matchFragments"],[20,25,19,0],[20,26,19,24,"lexer"],[20,31,19,0],[20,33,19,31,"ast"],[20,36,19,0],[20,38,19,36,"match"],[20,43,19,0],[20,45,19,43,"type"],[20,49,19,0],[20,51,19,49,"name"],[20,55,19,0],[20,57,19,55],[21,0,20,4],[21,13,20,13,"findFragments"],[21,26,20,4],[21,27,20,27,"matchNode"],[21,36,20,4],[21,38,20,38],[22,0,21,8],[22,10,21,12,"matchNode"],[22,19,21,21],[22,20,21,22,"syntax"],[22,26,21,12],[22,31,21,33],[22,35,21,12],[22,39,22,12,"matchNode"],[22,48,22,21],[22,49,22,22,"syntax"],[22,55,22,12],[22,56,22,29,"type"],[22,60,22,12],[22,65,22,38,"type"],[22,69,21,12],[22,73,23,12,"matchNode"],[22,82,23,21],[22,83,23,22,"syntax"],[22,89,23,12],[22,90,23,29,"name"],[22,94,23,12],[22,99,23,38,"name"],[22,103,21,8],[22,105,23,44],[23,0,24,12],[23,12,24,16,"start"],[23,17,24,21],[23,20,24,24,"getFirstMatchNode"],[23,37,24,41],[23,38,24,42,"matchNode"],[23,47,24,41],[23,48,24,12],[24,0,25,12],[24,12,25,16,"end"],[24,15,25,19],[24,18,25,22,"getLastMatchNode"],[24,34,25,38],[24,35,25,39,"matchNode"],[24,44,25,38],[24,45,25,12],[25,0,27,12,"lexer"],[25,8,27,12,"lexer"],[25,13,27,17],[25,14,27,18,"syntax"],[25,20,27,12],[25,21,27,25,"walk"],[25,25,27,12],[25,26,27,30,"ast"],[25,29,27,12],[25,31,27,35],[25,41,27,44,"node"],[25,45,27,35],[25,47,27,50,"item"],[25,51,27,35],[25,53,27,56,"list"],[25,57,27,35],[25,59,27,62],[26,0,28,16],[26,14,28,20,"node"],[26,18,28,24],[26,23,28,29,"start"],[26,28,28,16],[26,30,28,36],[27,0,29,20],[27,16,29,24,"nodes"],[27,21,29,29],[27,24,29,32],[27,28,29,36,"List"],[27,32,29,32],[27,34,29,20],[29,0,31,20],[29,15,31,23],[30,0,32,24,"nodes"],[30,14,32,24,"nodes"],[30,19,32,29],[30,20,32,30,"appendData"],[30,30,32,24],[30,31,32,41,"item"],[30,35,32,45],[30,36,32,46,"data"],[30,40,32,24],[32,0,34,24],[32,18,34,28,"item"],[32,22,34,32],[32,23,34,33,"data"],[32,27,34,28],[32,32,34,42,"end"],[32,35,34,24],[32,37,34,47],[33,0,35,28],[34,0,36,25],[36,0,38,24,"item"],[36,14,38,24,"item"],[36,18,38,28],[36,21,38,31,"item"],[36,25,38,35],[36,26,38,36,"next"],[36,30,38,24],[37,0,39,21],[37,13,31,20],[37,21,39,29,"item"],[37,25,39,33],[37,30,39,38],[37,34,31,20],[39,0,41,20,"fragments"],[39,12,41,20,"fragments"],[39,21,41,29],[39,22,41,30,"push"],[39,26,41,20],[39,27,41,35],[40,0,42,24,"parent"],[40,14,42,24,"parent"],[40,20,42,30],[40,22,42,32,"list"],[40,26,41,35],[41,0,43,24,"nodes"],[41,14,43,24,"nodes"],[41,19,43,29],[41,21,43,31,"nodes"],[42,0,41,35],[42,13,41,20],[43,0,45,17],[44,0,46,13],[44,9,27,12],[45,0,47,9],[47,0,49,8],[47,10,49,12,"Array"],[47,15,49,17],[47,16,49,18,"isArray"],[47,23,49,12],[47,24,49,26,"matchNode"],[47,33,49,35],[47,34,49,36,"match"],[47,39,49,12],[47,40,49,8],[47,42,49,44],[48,0,50,12,"matchNode"],[48,8,50,12,"matchNode"],[48,17,50,21],[48,18,50,22,"match"],[48,23,50,12],[48,24,50,28,"forEach"],[48,31,50,12],[48,32,50,36,"findFragments"],[48,45,50,12],[49,0,51,9],[50,0,52,5],[52,0,54,4],[52,8,54,8,"fragments"],[52,17,54,17],[52,20,54,20],[52,22,54,4],[54,0,56,4],[54,8,56,8,"match"],[54,13,56,13],[54,14,56,14,"matched"],[54,21,56,8],[54,26,56,26],[54,30,56,4],[54,32,56,32],[55,0,57,8,"findFragments"],[55,6,57,8,"findFragments"],[55,19,57,21],[55,20,57,22,"match"],[55,25,57,27],[55,26,57,28,"matched"],[55,33,57,21],[55,34,57,8],[56,0,58,5],[58,0,60,4],[58,11,60,11,"fragments"],[58,20,60,4],[59,0,61,1],[61,0,63,0,"module"],[61,2,63,0,"module"],[61,8,63,6],[61,9,63,7,"exports"],[61,16,63,0],[61,19,63,17],[62,0,64,4,"matchFragments"],[62,4,64,4,"matchFragments"],[62,18,64,18],[62,20,64,20,"matchFragments"],[63,0,63,17],[63,3,63,0]]},"type":"js/module"}]}