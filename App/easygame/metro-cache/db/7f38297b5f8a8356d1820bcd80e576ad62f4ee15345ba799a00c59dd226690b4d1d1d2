{"dependencies":[{"name":"./util","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var util = _$$_REQUIRE(_dependencyMap[0], \"./util\");\n\n  var has = Object.prototype.hasOwnProperty;\n  var hasNativeMap = typeof Map !== \"undefined\";\n\n  function ArraySet() {\n    this._array = [];\n    this._set = hasNativeMap ? new Map() : Object.create(null);\n  }\n\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n\n    return set;\n  };\n\n  ArraySet.prototype.size = function ArraySet_size() {\n    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n  };\n\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n    var idx = this._array.length;\n\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n\n    if (!isDuplicate) {\n      if (hasNativeMap) {\n        this._set.set(aStr, idx);\n      } else {\n        this._set[sStr] = idx;\n      }\n    }\n  };\n\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    if (hasNativeMap) {\n      return this._set.has(aStr);\n    } else {\n      var sStr = util.toSetString(aStr);\n      return has.call(this._set, sStr);\n    }\n  };\n\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (hasNativeMap) {\n      var idx = this._set.get(aStr);\n\n      if (idx >= 0) {\n        return idx;\n      }\n    } else {\n      var sStr = util.toSetString(aStr);\n\n      if (has.call(this._set, sStr)) {\n        return this._set[sStr];\n      }\n    }\n\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n\n  exports.ArraySet = ArraySet;\n});","map":[[2,0,8,0],[2,6,8,4,"util"],[2,10,8,8],[2,13,8,11,"require"],[2,24,8,18],[2,53,8,0],[4,0,9,0],[4,6,9,4,"has"],[4,9,9,7],[4,12,9,10,"Object"],[4,18,9,16],[4,19,9,17,"prototype"],[4,28,9,10],[4,29,9,27,"hasOwnProperty"],[4,43,9,0],[5,0,10,0],[5,6,10,4,"hasNativeMap"],[5,18,10,16],[5,21,10,19],[5,28,10,26,"Map"],[5,31,10,19],[5,36,10,34],[5,47,10,0],[7,0,18,0],[7,11,18,9,"ArraySet"],[7,19,18,0],[7,22,18,20],[8,0,19,2],[8,9,19,7,"_array"],[8,15,19,2],[8,18,19,16],[8,20,19,2],[9,0,20,2],[9,9,20,7,"_set"],[9,13,20,2],[9,16,20,14,"hasNativeMap"],[9,28,20,26],[9,31,20,29],[9,35,20,33,"Map"],[9,38,20,29],[9,40,20,26],[9,43,20,41,"Object"],[9,49,20,47],[9,50,20,48,"create"],[9,56,20,41],[9,57,20,55],[9,61,20,41],[9,62,20,2],[10,0,21,1],[12,0,26,0,"ArraySet"],[12,2,26,0,"ArraySet"],[12,10,26,8],[12,11,26,9,"fromArray"],[12,20,26,0],[12,23,26,21],[12,32,26,30,"ArraySet_fromArray"],[12,50,26,21],[12,51,26,49,"aArray"],[12,57,26,21],[12,59,26,57,"aAllowDuplicates"],[12,75,26,21],[12,77,26,75],[13,0,27,2],[13,8,27,6,"set"],[13,11,27,9],[13,14,27,12],[13,18,27,16,"ArraySet"],[13,26,27,12],[13,28,27,2],[15,0,28,2],[15,9,28,7],[15,13,28,11,"i"],[15,14,28,12],[15,17,28,15],[15,18,28,7],[15,20,28,18,"len"],[15,23,28,21],[15,26,28,24,"aArray"],[15,32,28,30],[15,33,28,31,"length"],[15,39,28,2],[15,41,28,39,"i"],[15,42,28,40],[15,45,28,43,"len"],[15,48,28,2],[15,50,28,48,"i"],[15,51,28,49],[15,53,28,2],[15,55,28,53],[16,0,29,4,"set"],[16,6,29,4,"set"],[16,9,29,7],[16,10,29,8,"add"],[16,13,29,4],[16,14,29,12,"aArray"],[16,20,29,18],[16,21,29,19,"i"],[16,22,29,18],[16,23,29,4],[16,25,29,23,"aAllowDuplicates"],[16,41,29,4],[17,0,30,3],[19,0,31,2],[19,11,31,9,"set"],[19,14,31,2],[20,0,32,1],[20,3,26,0],[22,0,40,0,"ArraySet"],[22,2,40,0,"ArraySet"],[22,10,40,8],[22,11,40,9,"prototype"],[22,20,40,0],[22,21,40,19,"size"],[22,25,40,0],[22,28,40,26],[22,37,40,35,"ArraySet_size"],[22,50,40,26],[22,53,40,51],[23,0,41,2],[23,11,41,9,"hasNativeMap"],[23,23,41,21],[23,26,41,24],[23,31,41,29,"_set"],[23,35,41,24],[23,36,41,34,"size"],[23,40,41,21],[23,43,41,41,"Object"],[23,49,41,47],[23,50,41,48,"getOwnPropertyNames"],[23,69,41,41],[23,70,41,68],[23,75,41,73,"_set"],[23,79,41,41],[23,81,41,79,"length"],[23,87,41,2],[24,0,42,1],[24,3,40,0],[26,0,49,0,"ArraySet"],[26,2,49,0,"ArraySet"],[26,10,49,8],[26,11,49,9,"prototype"],[26,20,49,0],[26,21,49,19,"add"],[26,24,49,0],[26,27,49,25],[26,36,49,34,"ArraySet_add"],[26,48,49,25],[26,49,49,47,"aStr"],[26,53,49,25],[26,55,49,53,"aAllowDuplicates"],[26,71,49,25],[26,73,49,71],[27,0,50,2],[27,8,50,6,"sStr"],[27,12,50,10],[27,15,50,13,"hasNativeMap"],[27,27,50,25],[27,30,50,28,"aStr"],[27,34,50,25],[27,37,50,35,"util"],[27,41,50,39],[27,42,50,40,"toSetString"],[27,53,50,35],[27,54,50,52,"aStr"],[27,58,50,35],[27,59,50,2],[28,0,51,2],[28,8,51,6,"isDuplicate"],[28,19,51,17],[28,22,51,20,"hasNativeMap"],[28,34,51,32],[28,37,51,35],[28,42,51,40,"has"],[28,45,51,35],[28,46,51,44,"aStr"],[28,50,51,35],[28,51,51,32],[28,54,51,52,"has"],[28,57,51,55],[28,58,51,56,"call"],[28,62,51,52],[28,63,51,61],[28,68,51,66,"_set"],[28,72,51,52],[28,74,51,72,"sStr"],[28,78,51,52],[28,79,51,2],[29,0,52,2],[29,8,52,6,"idx"],[29,11,52,9],[29,14,52,12],[29,19,52,17,"_array"],[29,25,52,12],[29,26,52,24,"length"],[29,32,52,2],[31,0,53,2],[31,8,53,6],[31,9,53,7,"isDuplicate"],[31,20,53,6],[31,24,53,22,"aAllowDuplicates"],[31,40,53,2],[31,42,53,40],[32,0,54,4],[32,11,54,9,"_array"],[32,17,54,4],[32,18,54,16,"push"],[32,22,54,4],[32,23,54,21,"aStr"],[32,27,54,4],[33,0,55,3],[35,0,56,2],[35,8,56,6],[35,9,56,7,"isDuplicate"],[35,20,56,2],[35,22,56,20],[36,0,57,4],[36,10,57,8,"hasNativeMap"],[36,22,57,4],[36,24,57,22],[37,0,58,6],[37,13,58,11,"_set"],[37,17,58,6],[37,18,58,16,"set"],[37,21,58,6],[37,22,58,20,"aStr"],[37,26,58,6],[37,28,58,26,"idx"],[37,31,58,6],[38,0,59,5],[38,7,57,4],[38,13,59,11],[39,0,60,6],[39,13,60,11,"_set"],[39,17,60,6],[39,18,60,16,"sStr"],[39,22,60,6],[39,26,60,24,"idx"],[39,29,60,6],[40,0,61,5],[41,0,62,3],[42,0,63,1],[42,3,49,0],[44,0,70,0,"ArraySet"],[44,2,70,0,"ArraySet"],[44,10,70,8],[44,11,70,9,"prototype"],[44,20,70,0],[44,21,70,19,"has"],[44,24,70,0],[44,27,70,25],[44,36,70,34,"ArraySet_has"],[44,48,70,25],[44,49,70,47,"aStr"],[44,53,70,25],[44,55,70,53],[45,0,71,2],[45,8,71,6,"hasNativeMap"],[45,20,71,2],[45,22,71,20],[46,0,72,4],[46,13,72,11],[46,18,72,16,"_set"],[46,22,72,11],[46,23,72,21,"has"],[46,26,72,11],[46,27,72,25,"aStr"],[46,31,72,11],[46,32,72,4],[47,0,73,3],[47,5,71,2],[47,11,73,9],[48,0,74,4],[48,10,74,8,"sStr"],[48,14,74,12],[48,17,74,15,"util"],[48,21,74,19],[48,22,74,20,"toSetString"],[48,33,74,15],[48,34,74,32,"aStr"],[48,38,74,15],[48,39,74,4],[49,0,75,4],[49,13,75,11,"has"],[49,16,75,14],[49,17,75,15,"call"],[49,21,75,11],[49,22,75,20],[49,27,75,25,"_set"],[49,31,75,11],[49,33,75,31,"sStr"],[49,37,75,11],[49,38,75,4],[50,0,76,3],[51,0,77,1],[51,3,70,0],[53,0,84,0,"ArraySet"],[53,2,84,0,"ArraySet"],[53,10,84,8],[53,11,84,9,"prototype"],[53,20,84,0],[53,21,84,19,"indexOf"],[53,28,84,0],[53,31,84,29],[53,40,84,38,"ArraySet_indexOf"],[53,56,84,29],[53,57,84,55,"aStr"],[53,61,84,29],[53,63,84,61],[54,0,85,2],[54,8,85,6,"hasNativeMap"],[54,20,85,2],[54,22,85,20],[55,0,86,4],[55,10,86,8,"idx"],[55,13,86,11],[55,16,86,14],[55,21,86,19,"_set"],[55,25,86,14],[55,26,86,24,"get"],[55,29,86,14],[55,30,86,28,"aStr"],[55,34,86,14],[55,35,86,4],[57,0,87,4],[57,10,87,8,"idx"],[57,13,87,11],[57,17,87,15],[57,18,87,4],[57,20,87,18],[58,0,88,8],[58,15,88,15,"idx"],[58,18,88,8],[59,0,89,5],[60,0,90,3],[60,5,85,2],[60,11,90,9],[61,0,91,4],[61,10,91,8,"sStr"],[61,14,91,12],[61,17,91,15,"util"],[61,21,91,19],[61,22,91,20,"toSetString"],[61,33,91,15],[61,34,91,32,"aStr"],[61,38,91,15],[61,39,91,4],[63,0,92,4],[63,10,92,8,"has"],[63,13,92,11],[63,14,92,12,"call"],[63,18,92,8],[63,19,92,17],[63,24,92,22,"_set"],[63,28,92,8],[63,30,92,28,"sStr"],[63,34,92,8],[63,35,92,4],[63,37,92,35],[64,0,93,6],[64,15,93,13],[64,20,93,18,"_set"],[64,24,93,13],[64,25,93,23,"sStr"],[64,29,93,13],[64,30,93,6],[65,0,94,5],[66,0,95,3],[68,0,97,2],[68,10,97,8],[68,14,97,12,"Error"],[68,19,97,8],[68,20,97,18],[68,26,97,24,"aStr"],[68,30,97,18],[68,33,97,31],[68,55,97,8],[68,56,97,2],[69,0,98,1],[69,3,84,0],[71,0,105,0,"ArraySet"],[71,2,105,0,"ArraySet"],[71,10,105,8],[71,11,105,9,"prototype"],[71,20,105,0],[71,21,105,19,"at"],[71,23,105,0],[71,26,105,24],[71,35,105,33,"ArraySet_at"],[71,46,105,24],[71,47,105,45,"aIdx"],[71,51,105,24],[71,53,105,51],[72,0,106,2],[72,8,106,6,"aIdx"],[72,12,106,10],[72,16,106,14],[72,17,106,6],[72,21,106,19,"aIdx"],[72,25,106,23],[72,28,106,26],[72,33,106,31,"_array"],[72,39,106,26],[72,40,106,38,"length"],[72,46,106,2],[72,48,106,46],[73,0,107,4],[73,13,107,11],[73,18,107,16,"_array"],[73,24,107,11],[73,25,107,23,"aIdx"],[73,29,107,11],[73,30,107,4],[74,0,108,3],[76,0,109,2],[76,10,109,8],[76,14,109,12,"Error"],[76,19,109,8],[76,20,109,18],[76,47,109,45,"aIdx"],[76,51,109,8],[76,52,109,2],[77,0,110,1],[77,3,105,0],[79,0,117,0,"ArraySet"],[79,2,117,0,"ArraySet"],[79,10,117,8],[79,11,117,9,"prototype"],[79,20,117,0],[79,21,117,19,"toArray"],[79,28,117,0],[79,31,117,29],[79,40,117,38,"ArraySet_toArray"],[79,56,117,29],[79,59,117,57],[80,0,118,2],[80,11,118,9],[80,16,118,14,"_array"],[80,22,118,9],[80,23,118,21,"slice"],[80,28,118,9],[80,30,118,2],[81,0,119,1],[81,3,117,0],[83,0,121,0,"exports"],[83,2,121,0,"exports"],[83,9,121,7],[83,10,121,8,"ArraySet"],[83,18,121,0],[83,21,121,19,"ArraySet"],[83,29,121,0]]},"type":"js/module"}]}