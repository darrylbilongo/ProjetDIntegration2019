{"dependencies":[{"name":"../../tokenizer","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var TYPE = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE;\n\n  var WHITESPACE = TYPE.WhiteSpace;\n  var COMMENT = TYPE.Comment;\n  var IDENT = TYPE.Ident;\n  var FUNCTION = TYPE.Function;\n  var COLON = TYPE.Colon;\n  var LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\n  function consumeRaw() {\n    return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, false));\n  }\n\n  function parentheses() {\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === IDENT && this.lookupNonWSType(1) === COLON) {\n      return this.createSingleNodeList(this.Declaration());\n    }\n\n    return readSequence.call(this);\n  }\n\n  function readSequence() {\n    var children = this.createList();\n    var space = null;\n    var child;\n    this.scanner.skipSC();\n\n    scan: while (!this.scanner.eof) {\n      switch (this.scanner.tokenType) {\n        case WHITESPACE:\n          space = this.WhiteSpace();\n          continue;\n\n        case COMMENT:\n          this.scanner.next();\n          continue;\n\n        case FUNCTION:\n          child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n          break;\n\n        case IDENT:\n          child = this.Identifier();\n          break;\n\n        case LEFTPARENTHESIS:\n          child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n          break;\n\n        default:\n          break scan;\n      }\n\n      if (space !== null) {\n        children.push(space);\n        space = null;\n      }\n\n      children.push(child);\n    }\n\n    return children;\n  }\n\n  module.exports = {\n    parse: {\n      prelude: function prelude() {\n        var children = readSequence.call(this);\n\n        if (this.getFirstListNode(children) === null) {\n          this.error('Condition is expected');\n        }\n\n        return children;\n      },\n      block: function block() {\n        return this.Block(false);\n      }\n    }\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"TYPE"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,62,1,11],[2,63,1,38,"TYPE"],[2,67,1,0],[4,0,3,0],[4,6,3,4,"WHITESPACE"],[4,16,3,14],[4,19,3,17,"TYPE"],[4,23,3,21],[4,24,3,22,"WhiteSpace"],[4,34,3,0],[5,0,4,0],[5,6,4,4,"COMMENT"],[5,13,4,11],[5,16,4,14,"TYPE"],[5,20,4,18],[5,21,4,19,"Comment"],[5,28,4,0],[6,0,5,0],[6,6,5,4,"IDENT"],[6,11,5,9],[6,14,5,12,"TYPE"],[6,18,5,16],[6,19,5,17,"Ident"],[6,24,5,0],[7,0,6,0],[7,6,6,4,"FUNCTION"],[7,14,6,12],[7,17,6,15,"TYPE"],[7,21,6,19],[7,22,6,20,"Function"],[7,30,6,0],[8,0,7,0],[8,6,7,4,"COLON"],[8,11,7,9],[8,14,7,12,"TYPE"],[8,18,7,16],[8,19,7,17,"Colon"],[8,24,7,0],[9,0,8,0],[9,6,8,4,"LEFTPARENTHESIS"],[9,21,8,19],[9,24,8,22,"TYPE"],[9,28,8,26],[9,29,8,27,"LeftParenthesis"],[9,44,8,0],[11,0,10,0],[11,11,10,9,"consumeRaw"],[11,21,10,0],[11,24,10,22],[12,0,11,4],[12,11,11,11],[12,16,11,16,"createSingleNodeList"],[12,36,11,11],[12,37,12,8],[12,42,12,13,"Raw"],[12,45,12,8],[12,46,12,17],[12,51,12,22,"scanner"],[12,58,12,17],[12,59,12,30,"tokenIndex"],[12,69,12,8],[12,71,12,42],[12,75,12,8],[12,77,12,48],[12,82,12,8],[12,83,11,11],[12,84,11,4],[13,0,14,1],[15,0,16,0],[15,11,16,9,"parentheses"],[15,22,16,0],[15,25,16,23],[16,0,17,4],[16,9,17,9,"scanner"],[16,16,17,4],[16,17,17,17,"skipSC"],[16,23,17,4],[18,0,19,4],[18,8,19,8],[18,13,19,13,"scanner"],[18,20,19,8],[18,21,19,21,"tokenType"],[18,30,19,8],[18,35,19,35,"IDENT"],[18,40,19,8],[18,44,20,8],[18,49,20,13,"lookupNonWSType"],[18,64,20,8],[18,65,20,29],[18,66,20,8],[18,72,20,36,"COLON"],[18,77,19,4],[18,79,20,43],[19,0,21,8],[19,13,21,15],[19,18,21,20,"createSingleNodeList"],[19,38,21,15],[19,39,22,12],[19,44,22,17,"Declaration"],[19,55,22,12],[19,57,21,15],[19,58,21,8],[20,0,24,5],[22,0,26,4],[22,11,26,11,"readSequence"],[22,23,26,23],[22,24,26,24,"call"],[22,28,26,11],[22,29,26,29],[22,33,26,11],[22,34,26,4],[23,0,27,1],[25,0,29,0],[25,11,29,9,"readSequence"],[25,23,29,0],[25,26,29,24],[26,0,30,4],[26,8,30,8,"children"],[26,16,30,16],[26,19,30,19],[26,24,30,24,"createList"],[26,34,30,19],[26,36,30,4],[27,0,31,4],[27,8,31,8,"space"],[27,13,31,13],[27,16,31,16],[27,20,31,4],[28,0,32,4],[28,8,32,8,"child"],[28,13,32,4],[29,0,34,4],[29,9,34,9,"scanner"],[29,16,34,4],[29,17,34,17,"skipSC"],[29,23,34,4],[31,0,36,4,"scan"],[31,4,36,4,"scan"],[31,8,36,8],[31,10,37,4],[31,17,37,11],[31,18,37,12],[31,23,37,17,"scanner"],[31,30,37,12],[31,31,37,25,"eof"],[31,34,37,4],[31,36,37,30],[32,0,38,8],[32,14,38,16],[32,19,38,21,"scanner"],[32,26,38,16],[32,27,38,29,"tokenType"],[32,36,38,8],[33,0,39,12],[33,13,39,17,"WHITESPACE"],[33,23,39,12],[34,0,40,16,"space"],[34,10,40,16,"space"],[34,15,40,21],[34,18,40,24],[34,23,40,29,"WhiteSpace"],[34,33,40,24],[34,35,40,16],[35,0,41,16],[37,0,43,12],[37,13,43,17,"COMMENT"],[37,20,43,12],[38,0,44,16],[38,15,44,21,"scanner"],[38,22,44,16],[38,23,44,29,"next"],[38,27,44,16],[39,0,45,16],[41,0,47,12],[41,13,47,17,"FUNCTION"],[41,21,47,12],[42,0,48,16,"child"],[42,10,48,16,"child"],[42,15,48,21],[42,18,48,24],[42,23,48,29,"Function"],[42,31,48,24],[42,32,48,38,"consumeRaw"],[42,42,48,24],[42,44,48,50],[42,49,48,55,"scope"],[42,54,48,50],[42,55,48,61,"AtrulePrelude"],[42,68,48,24],[42,69,48,16],[43,0,49,16],[45,0,51,12],[45,13,51,17,"IDENT"],[45,18,51,12],[46,0,52,16,"child"],[46,10,52,16,"child"],[46,15,52,21],[46,18,52,24],[46,23,52,29,"Identifier"],[46,33,52,24],[46,35,52,16],[47,0,53,16],[49,0,55,12],[49,13,55,17,"LEFTPARENTHESIS"],[49,28,55,12],[50,0,56,16,"child"],[50,10,56,16,"child"],[50,15,56,21],[50,18,56,24],[50,23,56,29,"Parentheses"],[50,34,56,24],[50,35,56,41,"parentheses"],[50,46,56,24],[50,48,56,54],[50,53,56,59,"scope"],[50,58,56,54],[50,59,56,65,"AtrulePrelude"],[50,72,56,24],[50,73,56,16],[51,0,57,16],[53,0,59,12],[54,0,60,16],[54,16,60,22,"scan"],[54,20,60,16],[55,0,38,8],[57,0,63,8],[57,10,63,12,"space"],[57,15,63,17],[57,20,63,22],[57,24,63,8],[57,26,63,28],[58,0,64,12,"children"],[58,8,64,12,"children"],[58,16,64,20],[58,17,64,21,"push"],[58,21,64,12],[58,22,64,26,"space"],[58,27,64,12],[59,0,65,12,"space"],[59,8,65,12,"space"],[59,13,65,17],[59,16,65,20],[59,20,65,12],[60,0,66,9],[62,0,68,8,"children"],[62,6,68,8,"children"],[62,14,68,16],[62,15,68,17,"push"],[62,19,68,8],[62,20,68,22,"child"],[62,25,68,8],[63,0,69,5],[65,0,71,4],[65,11,71,11,"children"],[65,19,71,4],[66,0,72,1],[68,0,74,0,"module"],[68,2,74,0,"module"],[68,8,74,6],[68,9,74,7,"exports"],[68,16,74,0],[68,19,74,17],[69,0,75,4,"parse"],[69,4,75,4,"parse"],[69,9,75,9],[69,11,75,11],[70,0,76,8,"prelude"],[70,6,76,8,"prelude"],[70,13,76,15],[70,15,76,17],[70,34,76,28],[71,0,77,12],[71,12,77,16,"children"],[71,20,77,24],[71,23,77,27,"readSequence"],[71,35,77,39],[71,36,77,40,"call"],[71,40,77,27],[71,41,77,45],[71,45,77,27],[71,46,77,12],[73,0,79,12],[73,12,79,16],[73,17,79,21,"getFirstListNode"],[73,33,79,16],[73,34,79,38,"children"],[73,42,79,16],[73,48,79,52],[73,52,79,12],[73,54,79,58],[74,0,80,16],[74,15,80,21,"error"],[74,20,80,16],[74,21,80,27],[74,44,80,16],[75,0,81,13],[77,0,83,12],[77,15,83,19,"children"],[77,23,83,12],[78,0,84,9],[78,7,75,11],[79,0,85,8,"block"],[79,6,85,8,"block"],[79,11,85,13],[79,13,85,15],[79,30,85,26],[80,0,86,12],[80,15,86,19],[80,20,86,24,"Block"],[80,25,86,19],[80,26,86,30],[80,31,86,19],[80,32,86,12],[81,0,87,9],[82,0,75,11],[83,0,74,17],[83,3,74,0]]},"type":"js/module"}]}