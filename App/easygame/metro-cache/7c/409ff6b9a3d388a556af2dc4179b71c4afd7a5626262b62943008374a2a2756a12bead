{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"../operators","data":{"isAsync":false}},{"name":"../core/AnimatedCond","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}},{"name":"../core/AnimatedNode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = interpolate;\n  exports.Extrapolate = void 0;\n\n  var _operators = _$$_REQUIRE(_dependencyMap[1], \"../operators\");\n\n  var _AnimatedCond = _$$_REQUIRE(_dependencyMap[2], \"../core/AnimatedCond\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"fbjs/lib/invariant\"));\n\n  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"../core/AnimatedNode\"));\n\n  function interpolateInternalSingle(value, inputRange, outputRange, offset) {\n    var inS = inputRange[offset];\n    var inE = inputRange[offset + 1];\n    var outS = outputRange[offset];\n    var outE = outputRange[offset + 1];\n    var progress = (0, _operators.divide)((0, _operators.sub)(value, inS), (0, _operators.sub)(inE, inS));\n    return (0, _operators.add)(outS, (0, _operators.multiply)(progress, (0, _operators.sub)(outE, outS)));\n  }\n\n  function interpolateInternal(value, inputRange, outputRange) {\n    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (inputRange.length - offset === 2) {\n      return interpolateInternalSingle(value, inputRange, outputRange, offset);\n    }\n\n    return (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[offset + 1]), interpolateInternalSingle(value, inputRange, outputRange, offset), interpolateInternal(value, inputRange, outputRange, offset + 1));\n  }\n\n  var Extrapolate = {\n    EXTEND: 'extend',\n    CLAMP: 'clamp',\n    IDENTITY: 'identity'\n  };\n  exports.Extrapolate = Extrapolate;\n\n  function checkNonDecreasing(name, arr) {\n    for (var i = 1; i < arr.length; ++i) {\n      if (arr[i] instanceof _AnimatedNode.default || arr[i - 1] instanceof _AnimatedNode.default) continue;\n      (0, _invariant.default)(arr[i] >= arr[i - 1], '%s must be monotonically non-decreasing. (%s)', name, arr);\n    }\n  }\n\n  function checkMinElements(name, arr) {\n    (0, _invariant.default)(arr.length >= 2, '%s must have at least 2 elements. (%s)', name, arr);\n  }\n\n  function checkValidNumbers(name, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] instanceof _AnimatedNode.default) continue;\n      (0, _invariant.default)(Number.isFinite(arr[i]), '%s cannot include %s. (%s)', name, arr[i], arr);\n    }\n  }\n\n  function interpolate(value, config) {\n    var inputRange = config.inputRange,\n        outputRange = config.outputRange,\n        _config$extrapolate = config.extrapolate,\n        extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,\n        extrapolateLeft = config.extrapolateLeft,\n        extrapolateRight = config.extrapolateRight;\n    checkMinElements('inputRange', inputRange);\n    checkValidNumbers('inputRange', inputRange);\n    checkMinElements('outputRange', outputRange);\n    checkValidNumbers('outputRange', outputRange);\n    checkNonDecreasing('inputRange', inputRange);\n    (0, _invariant.default)(inputRange.length === outputRange.length, 'inputRange and outputRange must be the same length.');\n    var left = extrapolateLeft || extrapolate;\n    var right = extrapolateRight || extrapolate;\n    var output = interpolateInternal(value, inputRange, outputRange);\n\n    if (left === Extrapolate.EXTEND) {} else if (left === Extrapolate.CLAMP) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), outputRange[0], output);\n    } else if (left === Extrapolate.IDENTITY) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), value, output);\n    }\n\n    if (right === Extrapolate.EXTEND) {} else if (right === Extrapolate.CLAMP) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), outputRange[outputRange.length - 1], output);\n    } else if (right === Extrapolate.IDENTITY) {\n      output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]), value, output);\n    }\n\n    return output;\n  }\n});","map":[[10,0,1,0],[12,0,10,0],[14,0,11,0],[16,0,12,0],[18,0,14,0],[18,11,14,9,"interpolateInternalSingle"],[18,36,14,0],[18,37,14,35,"value"],[18,42,14,0],[18,44,14,42,"inputRange"],[18,54,14,0],[18,56,14,54,"outputRange"],[18,67,14,0],[18,69,14,67,"offset"],[18,75,14,0],[18,77,14,75],[19,0,15,2],[19,8,15,8,"inS"],[19,11,15,11],[19,14,15,14,"inputRange"],[19,24,15,24],[19,25,15,25,"offset"],[19,31,15,24],[19,32,15,2],[20,0,16,2],[20,8,16,8,"inE"],[20,11,16,11],[20,14,16,14,"inputRange"],[20,24,16,24],[20,25,16,25,"offset"],[20,31,16,31],[20,34,16,34],[20,35,16,24],[20,36,16,2],[21,0,17,2],[21,8,17,8,"outS"],[21,12,17,12],[21,15,17,15,"outputRange"],[21,26,17,26],[21,27,17,27,"offset"],[21,33,17,26],[21,34,17,2],[22,0,18,2],[22,8,18,8,"outE"],[22,12,18,12],[22,15,18,15,"outputRange"],[22,26,18,26],[22,27,18,27,"offset"],[22,33,18,33],[22,36,18,36],[22,37,18,26],[22,38,18,2],[23,0,19,2],[23,8,19,8,"progress"],[23,16,19,16],[23,19,19,19],[23,42,19,26],[23,62,19,30,"value"],[23,67,19,26],[23,69,19,37,"inS"],[23,72,19,26],[23,73,19,19],[23,75,19,43],[23,95,19,47,"inE"],[23,98,19,43],[23,100,19,52,"inS"],[23,103,19,43],[23,104,19,19],[23,105,19,2],[24,0,20,2],[24,11,20,9],[24,31,20,13,"outS"],[24,35,20,9],[24,37,20,19],[24,62,20,28,"progress"],[24,70,20,19],[24,72,20,38],[24,92,20,42,"outE"],[24,96,20,38],[24,98,20,48,"outS"],[24,102,20,38],[24,103,20,19],[24,104,20,9],[24,105,20,2],[25,0,21,1],[27,0,23,0],[27,11,23,9,"interpolateInternal"],[27,30,23,0],[27,31,23,29,"value"],[27,36,23,0],[27,38,23,36,"inputRange"],[27,48,23,0],[27,50,23,48,"outputRange"],[27,61,23,0],[27,63,23,73],[28,0,23,73],[28,8,23,61,"offset"],[28,14,23,73],[28,85,23,70],[28,86,23,73],[30,0,24,2],[30,8,24,6,"inputRange"],[30,18,24,16],[30,19,24,17,"length"],[30,25,24,6],[30,28,24,26,"offset"],[30,34,24,6],[30,39,24,37],[30,40,24,2],[30,42,24,40],[31,0,25,4],[31,13,25,11,"interpolateInternalSingle"],[31,38,25,36],[31,39,25,37,"value"],[31,44,25,36],[31,46,25,44,"inputRange"],[31,56,25,36],[31,58,25,56,"outputRange"],[31,69,25,36],[31,71,25,69,"offset"],[31,77,25,36],[31,78,25,4],[32,0,26,3],[34,0,27,2],[34,11,27,9],[34,49,28,4],[34,74,28,13,"value"],[34,79,28,4],[34,81,28,20,"inputRange"],[34,91,28,30],[34,92,28,31,"offset"],[34,98,28,37],[34,101,28,40],[34,102,28,30],[34,103,28,4],[34,104,27,9],[34,106,29,4,"interpolateInternalSingle"],[34,131,29,29],[34,132,29,30,"value"],[34,137,29,29],[34,139,29,37,"inputRange"],[34,149,29,29],[34,151,29,49,"outputRange"],[34,162,29,29],[34,164,29,62,"offset"],[34,170,29,29],[34,171,27,9],[34,173,30,4,"interpolateInternal"],[34,192,30,23],[34,193,30,24,"value"],[34,198,30,23],[34,200,30,31,"inputRange"],[34,210,30,23],[34,212,30,43,"outputRange"],[34,223,30,23],[34,225,30,56,"offset"],[34,231,30,62],[34,234,30,65],[34,235,30,23],[34,236,27,9],[34,237,27,2],[35,0,32,1],[37,0,34,7],[37,6,34,13,"Extrapolate"],[37,17,34,24],[37,20,34,27],[38,0,35,2,"EXTEND"],[38,4,35,2,"EXTEND"],[38,10,35,8],[38,12,35,10],[38,20,34,27],[39,0,36,2,"CLAMP"],[39,4,36,2,"CLAMP"],[39,9,36,7],[39,11,36,9],[39,18,34,27],[40,0,37,2,"IDENTITY"],[40,4,37,2,"IDENTITY"],[40,12,37,10],[40,14,37,12],[41,0,34,27],[41,3,34,7],[44,0,40,0],[44,11,40,9,"checkNonDecreasing"],[44,29,40,0],[44,30,40,28,"name"],[44,34,40,0],[44,36,40,34,"arr"],[44,39,40,0],[44,41,40,39],[45,0,41,2],[45,9,41,7],[45,13,41,11,"i"],[45,14,41,12],[45,17,41,15],[45,18,41,2],[45,20,41,18,"i"],[45,21,41,19],[45,24,41,22,"arr"],[45,27,41,25],[45,28,41,26,"length"],[45,34,41,2],[45,36,41,34],[45,38,41,36,"i"],[45,39,41,2],[45,41,41,39],[46,0,43,4],[46,10,43,8,"arr"],[46,13,43,11],[46,14,43,12,"i"],[46,15,43,11],[46,16,43,8],[46,28,43,26,"AnimatedNode"],[46,49,43,8],[46,53,43,42,"arr"],[46,56,43,45],[46,57,43,46,"i"],[46,58,43,47],[46,61,43,50],[46,62,43,45],[46,63,43,42],[46,75,43,64,"AnimatedNode"],[46,96,43,4],[46,98,44,6],[47,0,45,4],[47,30,46,6,"arr"],[47,33,46,9],[47,34,46,10,"i"],[47,35,46,9],[47,36,46,6],[47,40,46,16,"arr"],[47,43,46,19],[47,44,46,20,"i"],[47,45,46,21],[47,48,46,24],[47,49,46,19],[47,50,45,4],[47,52,47,6],[47,99,45,4],[47,101,48,6,"name"],[47,105,45,4],[47,107,49,6,"arr"],[47,110,45,4],[48,0,51,3],[49,0,52,1],[51,0,54,0],[51,11,54,9,"checkMinElements"],[51,27,54,0],[51,28,54,26,"name"],[51,32,54,0],[51,34,54,32,"arr"],[51,37,54,0],[51,39,54,37],[52,0,55,2],[52,28,56,4,"arr"],[52,31,56,7],[52,32,56,8,"length"],[52,38,56,4],[52,42,56,18],[52,43,55,2],[52,45,57,4],[52,85,55,2],[52,87,58,4,"name"],[52,91,55,2],[52,93,59,4,"arr"],[52,96,55,2],[53,0,61,1],[55,0,63,0],[55,11,63,9,"checkValidNumbers"],[55,28,63,0],[55,29,63,27,"name"],[55,33,63,0],[55,35,63,33,"arr"],[55,38,63,0],[55,40,63,38],[56,0,64,2],[56,9,64,7],[56,13,64,11,"i"],[56,14,64,12],[56,17,64,15],[56,18,64,2],[56,20,64,18,"i"],[56,21,64,19],[56,24,64,22,"arr"],[56,27,64,25],[56,28,64,26,"length"],[56,34,64,2],[56,36,64,34,"i"],[56,37,64,35],[56,39,64,2],[56,41,64,39],[57,0,66,4],[57,10,66,8,"arr"],[57,13,66,11],[57,14,66,12,"i"],[57,15,66,11],[57,16,66,8],[57,28,66,26,"AnimatedNode"],[57,49,66,4],[57,51,66,40],[58,0,67,4],[58,30,68,6,"Number"],[58,36,68,12],[58,37,68,13,"isFinite"],[58,45,68,6],[58,46,68,22,"arr"],[58,49,68,25],[58,50,68,26,"i"],[58,51,68,25],[58,52,68,6],[58,53,67,4],[58,55,69,6],[58,83,67,4],[58,85,70,6,"name"],[58,89,67,4],[58,91,71,6,"arr"],[58,94,71,9],[58,95,71,10,"i"],[58,96,71,9],[58,97,67,4],[58,99,72,6,"arr"],[58,102,67,4],[59,0,74,3],[60,0,75,1],[62,0,77,15],[62,11,77,24,"interpolate"],[62,22,77,15],[62,23,77,36,"value"],[62,28,77,15],[62,30,77,43,"config"],[62,36,77,15],[62,38,77,51],[63,0,77,51],[63,8,79,4,"inputRange"],[63,18,77,51],[63,21,84,6,"config"],[63,27,77,51],[63,28,79,4,"inputRange"],[63,38,77,51],[64,0,77,51],[64,8,80,4,"outputRange"],[64,19,77,51],[64,22,84,6,"config"],[64,28,77,51],[64,29,80,4,"outputRange"],[64,40,77,51],[65,0,77,51],[65,30,84,6,"config"],[65,36,77,51],[65,37,81,4,"extrapolate"],[65,48,77,51],[66,0,77,51],[66,8,81,4,"extrapolate"],[66,19,77,51],[66,55,81,18,"Extrapolate"],[66,66,81,29],[66,67,81,30,"EXTEND"],[66,73,77,51],[67,0,77,51],[67,8,82,4,"extrapolateLeft"],[67,23,77,51],[67,26,84,6,"config"],[67,32,77,51],[67,33,82,4,"extrapolateLeft"],[67,48,77,51],[68,0,77,51],[68,8,83,4,"extrapolateRight"],[68,24,77,51],[68,27,84,6,"config"],[68,33,77,51],[68,34,83,4,"extrapolateRight"],[68,50,77,51],[69,0,85,2,"checkMinElements"],[69,4,85,2,"checkMinElements"],[69,20,85,18],[69,21,85,19],[69,33,85,18],[69,35,85,33,"inputRange"],[69,45,85,18],[69,46,85,2],[70,0,86,2,"checkValidNumbers"],[70,4,86,2,"checkValidNumbers"],[70,21,86,19],[70,22,86,20],[70,34,86,19],[70,36,86,34,"inputRange"],[70,46,86,19],[70,47,86,2],[71,0,87,2,"checkMinElements"],[71,4,87,2,"checkMinElements"],[71,20,87,18],[71,21,87,19],[71,34,87,18],[71,36,87,34,"outputRange"],[71,47,87,18],[71,48,87,2],[72,0,88,2,"checkValidNumbers"],[72,4,88,2,"checkValidNumbers"],[72,21,88,19],[72,22,88,20],[72,35,88,19],[72,37,88,35,"outputRange"],[72,48,88,19],[72,49,88,2],[73,0,89,2,"checkNonDecreasing"],[73,4,89,2,"checkNonDecreasing"],[73,22,89,20],[73,23,89,21],[73,35,89,20],[73,37,89,35,"inputRange"],[73,47,89,20],[73,48,89,2],[74,0,90,2],[74,28,91,4,"inputRange"],[74,38,91,14],[74,39,91,15,"length"],[74,45,91,4],[74,50,91,26,"outputRange"],[74,61,91,37],[74,62,91,38,"length"],[74,68,90,2],[74,70,92,4],[74,123,90,2],[75,0,95,2],[75,8,95,8,"left"],[75,12,95,12],[75,15,95,15,"extrapolateLeft"],[75,30,95,30],[75,34,95,34,"extrapolate"],[75,45,95,2],[76,0,96,2],[76,8,96,8,"right"],[76,13,96,13],[76,16,96,16,"extrapolateRight"],[76,32,96,32],[76,36,96,36,"extrapolate"],[76,47,96,2],[77,0,97,2],[77,8,97,6,"output"],[77,14,97,12],[77,17,97,15,"interpolateInternal"],[77,36,97,34],[77,37,97,35,"value"],[77,42,97,34],[77,44,97,42,"inputRange"],[77,54,97,34],[77,56,97,54,"outputRange"],[77,67,97,34],[77,68,97,2],[79,0,99,2],[79,8,99,6,"left"],[79,12,99,10],[79,17,99,15,"Extrapolate"],[79,28,99,26],[79,29,99,27,"EXTEND"],[79,35,99,2],[79,37,99,35],[79,38,100,3],[79,39,99,2],[79,45,100,9],[79,49,100,13,"left"],[79,53,100,17],[79,58,100,22,"Extrapolate"],[79,69,100,33],[79,70,100,34,"CLAMP"],[79,75,100,9],[79,77,100,41],[80,0,101,4,"output"],[80,6,101,4,"output"],[80,12,101,10],[80,15,101,13],[80,53,101,18],[80,78,101,27,"value"],[80,83,101,18],[80,85,101,34,"inputRange"],[80,95,101,44],[80,96,101,45],[80,97,101,44],[80,98,101,18],[80,99,101,13],[80,101,101,50,"outputRange"],[80,112,101,61],[80,113,101,62],[80,114,101,61],[80,115,101,13],[80,117,101,66,"output"],[80,123,101,13],[80,124,101,4],[81,0,102,3],[81,5,100,9],[81,11,102,9],[81,15,102,13,"left"],[81,19,102,17],[81,24,102,22,"Extrapolate"],[81,35,102,33],[81,36,102,34,"IDENTITY"],[81,44,102,9],[81,46,102,44],[82,0,103,4,"output"],[82,6,103,4,"output"],[82,12,103,10],[82,15,103,13],[82,53,103,18],[82,78,103,27,"value"],[82,83,103,18],[82,85,103,34,"inputRange"],[82,95,103,44],[82,96,103,45],[82,97,103,44],[82,98,103,18],[82,99,103,13],[82,101,103,50,"value"],[82,106,103,13],[82,108,103,57,"output"],[82,114,103,13],[82,115,103,4],[83,0,104,3],[85,0,106,2],[85,8,106,6,"right"],[85,13,106,11],[85,18,106,16,"Extrapolate"],[85,29,106,27],[85,30,106,28,"EXTEND"],[85,36,106,2],[85,38,106,36],[85,39,107,3],[85,40,106,2],[85,46,107,9],[85,50,107,13,"right"],[85,55,107,18],[85,60,107,23,"Extrapolate"],[85,71,107,34],[85,72,107,35,"CLAMP"],[85,77,107,9],[85,79,107,42],[86,0,108,4,"output"],[86,6,108,4,"output"],[86,12,108,10],[86,15,108,13],[86,53,109,6],[86,81,109,18,"value"],[86,86,109,6],[86,88,109,25,"inputRange"],[86,98,109,35],[86,99,109,36,"inputRange"],[86,109,109,46],[86,110,109,47,"length"],[86,116,109,36],[86,119,109,56],[86,120,109,35],[86,121,109,6],[86,122,108,13],[86,124,110,6,"outputRange"],[86,135,110,17],[86,136,110,18,"outputRange"],[86,147,110,29],[86,148,110,30,"length"],[86,154,110,18],[86,157,110,39],[86,158,110,17],[86,159,108,13],[86,161,111,6,"output"],[86,167,108,13],[86,168,108,4],[87,0,113,3],[87,5,107,9],[87,11,113,9],[87,15,113,13,"right"],[87,20,113,18],[87,25,113,23,"Extrapolate"],[87,36,113,34],[87,37,113,35,"IDENTITY"],[87,45,113,9],[87,47,113,45],[88,0,114,4,"output"],[88,6,114,4,"output"],[88,12,114,10],[88,15,114,13],[88,53,115,6],[88,81,115,18,"value"],[88,86,115,6],[88,88,115,25,"inputRange"],[88,98,115,35],[88,99,115,36,"inputRange"],[88,109,115,46],[88,110,115,47,"length"],[88,116,115,36],[88,119,115,56],[88,120,115,35],[88,121,115,6],[88,122,114,13],[88,124,116,6,"value"],[88,129,114,13],[88,131,117,6,"output"],[88,137,114,13],[88,138,114,4],[89,0,119,3],[91,0,121,2],[91,11,121,9,"output"],[91,17,121,2],[92,0,122,1]]},"type":"js/module"}]}