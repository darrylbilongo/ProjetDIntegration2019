{"dependencies":[{"name":"../../tokenizer","data":{"isAsync":false}},{"name":"./Raw","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var TYPE = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE;\n\n  var rawMode = _$$_REQUIRE(_dependencyMap[1], \"./Raw\").mode;\n\n  var WHITESPACE = TYPE.WhiteSpace;\n  var COMMENT = TYPE.Comment;\n  var SEMICOLON = TYPE.Semicolon;\n  var ATKEYWORD = TYPE.AtKeyword;\n  var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;\n  var RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;\n\n  function consumeRaw(startToken) {\n    return this.Raw(startToken, null, true);\n  }\n\n  function consumeRule() {\n    return this.parseWithFallback(this.Rule, consumeRaw);\n  }\n\n  function consumeRawDeclaration(startToken) {\n    return this.Raw(startToken, rawMode.semicolonIncluded, true);\n  }\n\n  function consumeDeclaration() {\n    if (this.scanner.tokenType === SEMICOLON) {\n      return consumeRawDeclaration.call(this, this.scanner.tokenIndex);\n    }\n\n    var node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);\n\n    if (this.scanner.tokenType === SEMICOLON) {\n      this.scanner.next();\n    }\n\n    return node;\n  }\n\n  module.exports = {\n    name: 'Block',\n    structure: {\n      children: [['Atrule', 'Rule', 'Declaration']]\n    },\n    parse: function parse(isDeclaration) {\n      var consumer = isDeclaration ? consumeDeclaration : consumeRule;\n      var start = this.scanner.tokenStart;\n      var children = this.createList();\n      this.eat(LEFTCURLYBRACKET);\n\n      scan: while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n          case RIGHTCURLYBRACKET:\n            break scan;\n\n          case WHITESPACE:\n          case COMMENT:\n            this.scanner.next();\n            break;\n\n          case ATKEYWORD:\n            children.push(this.parseWithFallback(this.Atrule, consumeRaw));\n            break;\n\n          default:\n            children.push(consumer.call(this));\n        }\n      }\n\n      if (!this.scanner.eof) {\n        this.eat(RIGHTCURLYBRACKET);\n      }\n\n      return {\n        type: 'Block',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        children: children\n      };\n    },\n    generate: function generate(node) {\n      this.chunk('{');\n      this.children(node, function (prev) {\n        if (prev.type === 'Declaration') {\n          this.chunk(';');\n        }\n      });\n      this.chunk('}');\n    },\n    walkContext: 'block'\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"TYPE"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,62,1,11],[2,63,1,38,"TYPE"],[2,67,1,0],[4,0,2,0],[4,6,2,4,"rawMode"],[4,13,2,11],[4,16,2,14,"require"],[4,27,2,21],[4,55,2,14],[4,56,2,31,"mode"],[4,60,2,0],[6,0,4,0],[6,6,4,4,"WHITESPACE"],[6,16,4,14],[6,19,4,17,"TYPE"],[6,23,4,21],[6,24,4,22,"WhiteSpace"],[6,34,4,0],[7,0,5,0],[7,6,5,4,"COMMENT"],[7,13,5,11],[7,16,5,14,"TYPE"],[7,20,5,18],[7,21,5,19,"Comment"],[7,28,5,0],[8,0,6,0],[8,6,6,4,"SEMICOLON"],[8,15,6,13],[8,18,6,16,"TYPE"],[8,22,6,20],[8,23,6,21,"Semicolon"],[8,32,6,0],[9,0,7,0],[9,6,7,4,"ATKEYWORD"],[9,15,7,13],[9,18,7,16,"TYPE"],[9,22,7,20],[9,23,7,21,"AtKeyword"],[9,32,7,0],[10,0,8,0],[10,6,8,4,"LEFTCURLYBRACKET"],[10,22,8,20],[10,25,8,23,"TYPE"],[10,29,8,27],[10,30,8,28,"LeftCurlyBracket"],[10,46,8,0],[11,0,9,0],[11,6,9,4,"RIGHTCURLYBRACKET"],[11,23,9,21],[11,26,9,24,"TYPE"],[11,30,9,28],[11,31,9,29,"RightCurlyBracket"],[11,48,9,0],[13,0,11,0],[13,11,11,9,"consumeRaw"],[13,21,11,0],[13,22,11,20,"startToken"],[13,32,11,0],[13,34,11,32],[14,0,12,4],[14,11,12,11],[14,16,12,16,"Raw"],[14,19,12,11],[14,20,12,20,"startToken"],[14,30,12,11],[14,32,12,32],[14,36,12,11],[14,38,12,38],[14,42,12,11],[14,43,12,4],[15,0,13,1],[17,0,14,0],[17,11,14,9,"consumeRule"],[17,22,14,0],[17,25,14,23],[18,0,15,4],[18,11,15,11],[18,16,15,16,"parseWithFallback"],[18,33,15,11],[18,34,15,34],[18,39,15,39,"Rule"],[18,43,15,11],[18,45,15,45,"consumeRaw"],[18,55,15,11],[18,56,15,4],[19,0,16,1],[21,0,17,0],[21,11,17,9,"consumeRawDeclaration"],[21,32,17,0],[21,33,17,31,"startToken"],[21,43,17,0],[21,45,17,43],[22,0,18,4],[22,11,18,11],[22,16,18,16,"Raw"],[22,19,18,11],[22,20,18,20,"startToken"],[22,30,18,11],[22,32,18,32,"rawMode"],[22,39,18,39],[22,40,18,40,"semicolonIncluded"],[22,57,18,11],[22,59,18,59],[22,63,18,11],[22,64,18,4],[23,0,19,1],[25,0,20,0],[25,11,20,9,"consumeDeclaration"],[25,29,20,0],[25,32,20,30],[26,0,21,4],[26,8,21,8],[26,13,21,13,"scanner"],[26,20,21,8],[26,21,21,21,"tokenType"],[26,30,21,8],[26,35,21,35,"SEMICOLON"],[26,44,21,4],[26,46,21,46],[27,0,22,8],[27,13,22,15,"consumeRawDeclaration"],[27,34,22,36],[27,35,22,37,"call"],[27,39,22,15],[27,40,22,42],[27,44,22,15],[27,46,22,48],[27,51,22,53,"scanner"],[27,58,22,48],[27,59,22,61,"tokenIndex"],[27,69,22,15],[27,70,22,8],[28,0,23,5],[30,0,25,4],[30,8,25,8,"node"],[30,12,25,12],[30,15,25,15],[30,20,25,20,"parseWithFallback"],[30,37,25,15],[30,38,25,38],[30,43,25,43,"Declaration"],[30,54,25,15],[30,56,25,56,"consumeRawDeclaration"],[30,77,25,15],[30,78,25,4],[32,0,27,4],[32,8,27,8],[32,13,27,13,"scanner"],[32,20,27,8],[32,21,27,21,"tokenType"],[32,30,27,8],[32,35,27,35,"SEMICOLON"],[32,44,27,4],[32,46,27,46],[33,0,28,8],[33,11,28,13,"scanner"],[33,18,28,8],[33,19,28,21,"next"],[33,23,28,8],[34,0,29,5],[36,0,31,4],[36,11,31,11,"node"],[36,15,31,4],[37,0,32,1],[39,0,34,0,"module"],[39,2,34,0,"module"],[39,8,34,6],[39,9,34,7,"exports"],[39,16,34,0],[39,19,34,17],[40,0,35,4,"name"],[40,4,35,4,"name"],[40,8,35,8],[40,10,35,10],[40,17,34,17],[41,0,36,4,"structure"],[41,4,36,4,"structure"],[41,13,36,13],[41,15,36,15],[42,0,37,8,"children"],[42,6,37,8,"children"],[42,14,37,16],[42,16,37,18],[42,17,37,19],[42,18,38,12],[42,26,37,19],[42,28,39,12],[42,34,37,19],[42,36,40,12],[42,49,37,19],[42,50,37,18],[43,0,36,15],[43,5,34,17],[44,0,43,4,"parse"],[44,4,43,4,"parse"],[44,9,43,9],[44,11,43,11],[44,26,43,20,"isDeclaration"],[44,39,43,11],[44,41,43,35],[45,0,44,8],[45,10,44,12,"consumer"],[45,18,44,20],[45,21,44,23,"isDeclaration"],[45,34,44,36],[45,37,44,39,"consumeDeclaration"],[45,55,44,36],[45,58,44,60,"consumeRule"],[45,69,44,8],[46,0,46,8],[46,10,46,12,"start"],[46,15,46,17],[46,18,46,20],[46,23,46,25,"scanner"],[46,30,46,20],[46,31,46,33,"tokenStart"],[46,41,46,8],[47,0,47,8],[47,10,47,12,"children"],[47,18,47,20],[47,21,47,23],[47,26,47,28,"createList"],[47,36,47,23],[47,38,47,8],[48,0,49,8],[48,11,49,13,"eat"],[48,14,49,8],[48,15,49,17,"LEFTCURLYBRACKET"],[48,31,49,8],[50,0,51,8,"scan"],[50,6,51,8,"scan"],[50,10,51,12],[50,12,52,8],[50,19,52,15],[50,20,52,16],[50,25,52,21,"scanner"],[50,32,52,16],[50,33,52,29,"eof"],[50,36,52,8],[50,38,52,34],[51,0,53,12],[51,16,53,20],[51,21,53,25,"scanner"],[51,28,53,20],[51,29,53,33,"tokenType"],[51,38,53,12],[52,0,54,16],[52,15,54,21,"RIGHTCURLYBRACKET"],[52,32,54,16],[53,0,55,20],[53,18,55,26,"scan"],[53,22,55,20],[55,0,57,16],[55,15,57,21,"WHITESPACE"],[55,25,57,16],[56,0,58,16],[56,15,58,21,"COMMENT"],[56,22,58,16],[57,0,59,20],[57,17,59,25,"scanner"],[57,24,59,20],[57,25,59,33,"next"],[57,29,59,20],[58,0,60,20],[60,0,62,16],[60,15,62,21,"ATKEYWORD"],[60,24,62,16],[61,0,63,20,"children"],[61,12,63,20,"children"],[61,20,63,28],[61,21,63,29,"push"],[61,25,63,20],[61,26,63,34],[61,31,63,39,"parseWithFallback"],[61,48,63,34],[61,49,63,57],[61,54,63,62,"Atrule"],[61,60,63,34],[61,62,63,70,"consumeRaw"],[61,72,63,34],[61,73,63,20],[62,0,64,20],[64,0,66,16],[65,0,67,20,"children"],[65,12,67,20,"children"],[65,20,67,28],[65,21,67,29,"push"],[65,25,67,20],[65,26,67,34,"consumer"],[65,34,67,42],[65,35,67,43,"call"],[65,39,67,34],[65,40,67,48],[65,44,67,34],[65,45,67,20],[66,0,53,12],[67,0,69,9],[69,0,71,8],[69,10,71,12],[69,11,71,13],[69,16,71,18,"scanner"],[69,23,71,13],[69,24,71,26,"eof"],[69,27,71,8],[69,29,71,31],[70,0,72,12],[70,13,72,17,"eat"],[70,16,72,12],[70,17,72,21,"RIGHTCURLYBRACKET"],[70,34,72,12],[71,0,73,9],[73,0,75,8],[73,13,75,15],[74,0,76,12,"type"],[74,8,76,12,"type"],[74,12,76,16],[74,14,76,18],[74,21,75,15],[75,0,77,12,"loc"],[75,8,77,12,"loc"],[75,11,77,15],[75,13,77,17],[75,18,77,22,"getLocation"],[75,29,77,17],[75,30,77,34,"start"],[75,35,77,17],[75,37,77,41],[75,42,77,46,"scanner"],[75,49,77,41],[75,50,77,54,"tokenStart"],[75,60,77,17],[75,61,75,15],[76,0,78,12,"children"],[76,8,78,12,"children"],[76,16,78,20],[76,18,78,22,"children"],[77,0,75,15],[77,7,75,8],[78,0,80,5],[78,5,34,17],[79,0,81,4,"generate"],[79,4,81,4,"generate"],[79,12,81,12],[79,14,81,14],[79,32,81,23,"node"],[79,36,81,14],[79,38,81,29],[80,0,82,8],[80,11,82,13,"chunk"],[80,16,82,8],[80,17,82,19],[80,20,82,8],[81,0,83,8],[81,11,83,13,"children"],[81,19,83,8],[81,20,83,22,"node"],[81,24,83,8],[81,26,83,28],[81,36,83,37,"prev"],[81,40,83,28],[81,42,83,43],[82,0,84,12],[82,12,84,16,"prev"],[82,16,84,20],[82,17,84,21,"type"],[82,21,84,16],[82,26,84,30],[82,39,84,12],[82,41,84,45],[83,0,85,16],[83,15,85,21,"chunk"],[83,20,85,16],[83,21,85,27],[83,24,85,16],[84,0,86,13],[85,0,87,9],[85,7,83,8],[86,0,88,8],[86,11,88,13,"chunk"],[86,16,88,8],[86,17,88,19],[86,20,88,8],[87,0,89,5],[87,5,34,17],[88,0,90,4,"walkContext"],[88,4,90,4,"walkContext"],[88,15,90,15],[88,17,90,17],[89,0,34,17],[89,3,34,0]]},"type":"js/module"}]}