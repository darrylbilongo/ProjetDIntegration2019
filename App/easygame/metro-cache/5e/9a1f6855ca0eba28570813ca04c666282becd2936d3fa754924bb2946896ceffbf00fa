{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var noop = function noop() {};\n\n  function ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n  }\n\n  function invokeForType(fn, type) {\n    return function (node, item, list) {\n      if (node.type === type) {\n        fn.call(this, node, item, list);\n      }\n    };\n  }\n\n  function getWalkersFromStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var walkers = [];\n\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n\n      var fieldTypes = structure[key];\n      var walker = {\n        name: key,\n        type: false,\n        nullable: false\n      };\n\n      if (!Array.isArray(structure[key])) {\n        fieldTypes = [structure[key]];\n      }\n\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n\n        if (fieldType === null) {\n          walker.nullable = true;\n        } else if (typeof fieldType === 'string') {\n          walker.type = 'node';\n        } else if (Array.isArray(fieldType)) {\n          walker.type = 'list';\n        }\n      }\n\n      if (walker.type) {\n        walkers.push(walker);\n      }\n    }\n\n    if (walkers.length) {\n      return {\n        context: nodeType.walkContext,\n        fields: walkers\n      };\n    }\n\n    return null;\n  }\n\n  function getTypesFromConfig(config) {\n    var types = {};\n\n    for (var name in config.node) {\n      if (hasOwnProperty.call(config.node, name)) {\n        var nodeType = config.node[name];\n\n        if (!nodeType.structure) {\n          throw new Error('Missed `structure` field in `' + name + '` node type definition');\n        }\n\n        types[name] = getWalkersFromStructure(name, nodeType);\n      }\n    }\n\n    return types;\n  }\n\n  function createTypeIterator(config, reverse) {\n    var fields = config.fields.slice();\n    var contextName = config.context;\n    var useContext = typeof contextName === 'string';\n\n    if (reverse) {\n      fields.reverse();\n    }\n\n    return function (node, context, walk) {\n      var prevContextValue;\n\n      if (useContext) {\n        prevContextValue = context[contextName];\n        context[contextName] = node;\n      }\n\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        var ref = node[field.name];\n\n        if (!field.nullable || ref) {\n          if (field.type === 'list') {\n            if (reverse) {\n              ref.forEachRight(walk);\n            } else {\n              ref.forEach(walk);\n            }\n          } else {\n            walk(ref);\n          }\n        }\n      }\n\n      if (useContext) {\n        context[contextName] = prevContextValue;\n      }\n    };\n  }\n\n  function createFastTraveralMap(iterators) {\n    return {\n      Atrule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Rule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Declaration: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      }\n    };\n  }\n\n  module.exports = function createWalker(config) {\n    var types = getTypesFromConfig(config);\n    var iteratorsNatural = {};\n    var iteratorsReverse = {};\n\n    for (var name in types) {\n      if (hasOwnProperty.call(types, name) && types[name] !== null) {\n        iteratorsNatural[name] = createTypeIterator(types[name], false);\n        iteratorsReverse[name] = createTypeIterator(types[name], true);\n      }\n    }\n\n    var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n    var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n\n    var walk = function walk(root, options) {\n      function walkNode(node, item, list) {\n        enter.call(context, node, item, list);\n\n        if (iterators.hasOwnProperty(node.type)) {\n          iterators[node.type](node, context, walkNode);\n        }\n\n        leave.call(context, node, item, list);\n      }\n\n      var enter = noop;\n      var leave = noop;\n      var iterators = iteratorsNatural;\n      var context = {\n        root: root,\n        stylesheet: null,\n        atrule: null,\n        atrulePrelude: null,\n        rule: null,\n        selector: null,\n        block: null,\n        declaration: null,\n        function: null\n      };\n\n      if (typeof options === 'function') {\n        enter = options;\n      } else if (options) {\n        enter = ensureFunction(options.enter);\n        leave = ensureFunction(options.leave);\n\n        if (options.reverse) {\n          iterators = iteratorsReverse;\n        }\n\n        if (options.visit) {\n          if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n            iterators = options.reverse ? fastTraversalIteratorsReverse[options.visit] : fastTraversalIteratorsNatural[options.visit];\n          } else if (!types.hasOwnProperty(options.visit)) {\n            throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');\n          }\n\n          enter = invokeForType(enter, options.visit);\n          leave = invokeForType(leave, options.visit);\n        }\n      }\n\n      if (enter === noop && leave === noop) {\n        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n      }\n\n      if (options.reverse) {\n        var tmp = enter;\n        enter = leave;\n        leave = tmp;\n      }\n\n      walkNode(root);\n    };\n\n    walk.find = function (ast, fn) {\n      var found = null;\n      walk(ast, function (node, item, list) {\n        if (found === null && fn.call(this, node, item, list)) {\n          found = node;\n        }\n      });\n      return found;\n    };\n\n    walk.findLast = function (ast, fn) {\n      var found = null;\n      walk(ast, {\n        reverse: true,\n        enter: function enter(node, item, list) {\n          if (found === null && fn.call(this, node, item, list)) {\n            found = node;\n          }\n        }\n      });\n      return found;\n    };\n\n    walk.findAll = function (ast, fn) {\n      var found = [];\n      walk(ast, function (node, item, list) {\n        if (fn.call(this, node, item, list)) {\n          found.push(node);\n        }\n      });\n      return found;\n    };\n\n    return walk;\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,21],[2,40,1,38,"hasOwnProperty"],[2,54,1,0],[4,0,2,0],[4,6,2,4,"noop"],[4,10,2,8],[4,13,2,11],[4,22,2,4,"noop"],[4,26,2,11],[4,29,2,22],[4,30,2,24],[4,31,2,0],[6,0,4,0],[6,11,4,9,"ensureFunction"],[6,25,4,0],[6,26,4,24,"value"],[6,31,4,0],[6,33,4,31],[7,0,5,4],[7,11,5,11],[7,18,5,18,"value"],[7,23,5,11],[7,28,5,28],[7,38,5,11],[7,41,5,41,"value"],[7,46,5,11],[7,49,5,49,"noop"],[7,53,5,4],[8,0,6,1],[10,0,8,0],[10,11,8,9,"invokeForType"],[10,24,8,0],[10,25,8,23,"fn"],[10,27,8,0],[10,29,8,27,"type"],[10,33,8,0],[10,35,8,33],[11,0,9,4],[11,11,9,11],[11,21,9,20,"node"],[11,25,9,11],[11,27,9,26,"item"],[11,31,9,11],[11,33,9,32,"list"],[11,37,9,11],[11,39,9,38],[12,0,10,8],[12,10,10,12,"node"],[12,14,10,16],[12,15,10,17,"type"],[12,19,10,12],[12,24,10,26,"type"],[12,28,10,8],[12,30,10,32],[13,0,11,12,"fn"],[13,8,11,12,"fn"],[13,10,11,14],[13,11,11,15,"call"],[13,15,11,12],[13,16,11,20],[13,20,11,12],[13,22,11,26,"node"],[13,26,11,12],[13,28,11,32,"item"],[13,32,11,12],[13,34,11,38,"list"],[13,38,11,12],[14,0,12,9],[15,0,13,5],[15,5,9,4],[16,0,14,1],[18,0,16,0],[18,11,16,9,"getWalkersFromStructure"],[18,34,16,0],[18,35,16,33,"name"],[18,39,16,0],[18,41,16,39,"nodeType"],[18,49,16,0],[18,51,16,49],[19,0,17,4],[19,8,17,8,"structure"],[19,17,17,17],[19,20,17,20,"nodeType"],[19,28,17,28],[19,29,17,29,"structure"],[19,38,17,4],[20,0,18,4],[20,8,18,8,"walkers"],[20,15,18,15],[20,18,18,18],[20,20,18,4],[22,0,20,4],[22,9,20,9],[22,13,20,13,"key"],[22,16,20,4],[22,20,20,20,"structure"],[22,29,20,4],[22,31,20,31],[23,0,21,8],[23,10,21,12,"hasOwnProperty"],[23,24,21,26],[23,25,21,27,"call"],[23,29,21,12],[23,30,21,32,"structure"],[23,39,21,12],[23,41,21,43,"key"],[23,44,21,12],[23,50,21,52],[23,55,21,8],[23,57,21,59],[24,0,22,12],[25,0,23,9],[27,0,25,8],[27,10,25,12,"fieldTypes"],[27,20,25,22],[27,23,25,25,"structure"],[27,32,25,34],[27,33,25,35,"key"],[27,36,25,34],[27,37,25,8],[28,0,26,8],[28,10,26,12,"walker"],[28,16,26,18],[28,19,26,21],[29,0,27,12,"name"],[29,8,27,12,"name"],[29,12,27,16],[29,14,27,18,"key"],[29,17,26,21],[30,0,28,12,"type"],[30,8,28,12,"type"],[30,12,28,16],[30,14,28,18],[30,19,26,21],[31,0,29,12,"nullable"],[31,8,29,12,"nullable"],[31,16,29,20],[31,18,29,22],[32,0,26,21],[32,7,26,8],[34,0,32,8],[34,10,32,12],[34,11,32,13,"Array"],[34,16,32,18],[34,17,32,19,"isArray"],[34,24,32,13],[34,25,32,27,"structure"],[34,34,32,36],[34,35,32,37,"key"],[34,38,32,36],[34,39,32,13],[34,40,32,8],[34,42,32,44],[35,0,33,12,"fieldTypes"],[35,8,33,12,"fieldTypes"],[35,18,33,22],[35,21,33,25],[35,22,33,26,"structure"],[35,31,33,35],[35,32,33,36,"key"],[35,35,33,35],[35,36,33,25],[35,37,33,12],[36,0,34,9],[38,0,36,8],[38,11,36,13],[38,15,36,17,"i"],[38,16,36,18],[38,19,36,21],[38,20,36,8],[38,22,36,24,"i"],[38,23,36,25],[38,26,36,28,"fieldTypes"],[38,36,36,38],[38,37,36,39,"length"],[38,43,36,8],[38,45,36,47,"i"],[38,46,36,48],[38,48,36,8],[38,50,36,52],[39,0,37,12],[39,12,37,16,"fieldType"],[39,21,37,25],[39,24,37,28,"fieldTypes"],[39,34,37,38],[39,35,37,39,"i"],[39,36,37,38],[39,37,37,12],[41,0,38,12],[41,12,38,16,"fieldType"],[41,21,38,25],[41,26,38,30],[41,30,38,12],[41,32,38,36],[42,0,39,16,"walker"],[42,10,39,16,"walker"],[42,16,39,22],[42,17,39,23,"nullable"],[42,25,39,16],[42,28,39,34],[42,32,39,16],[43,0,40,13],[43,9,38,12],[43,15,40,19],[43,19,40,23],[43,26,40,30,"fieldType"],[43,35,40,23],[43,40,40,44],[43,48,40,19],[43,50,40,54],[44,0,41,16,"walker"],[44,10,41,16,"walker"],[44,16,41,22],[44,17,41,23,"type"],[44,21,41,16],[44,24,41,30],[44,30,41,16],[45,0,42,13],[45,9,40,19],[45,15,42,19],[45,19,42,23,"Array"],[45,24,42,28],[45,25,42,29,"isArray"],[45,32,42,23],[45,33,42,37,"fieldType"],[45,42,42,23],[45,43,42,19],[45,45,42,49],[46,0,43,16,"walker"],[46,10,43,16,"walker"],[46,16,43,22],[46,17,43,23,"type"],[46,21,43,16],[46,24,43,30],[46,30,43,16],[47,0,44,13],[48,0,45,9],[50,0,47,8],[50,10,47,12,"walker"],[50,16,47,18],[50,17,47,19,"type"],[50,21,47,8],[50,23,47,25],[51,0,48,12,"walkers"],[51,8,48,12,"walkers"],[51,15,48,19],[51,16,48,20,"push"],[51,20,48,12],[51,21,48,25,"walker"],[51,27,48,12],[52,0,49,9],[53,0,50,5],[55,0,52,4],[55,8,52,8,"walkers"],[55,15,52,15],[55,16,52,16,"length"],[55,22,52,4],[55,24,52,24],[56,0,53,8],[56,13,53,15],[57,0,54,12,"context"],[57,8,54,12,"context"],[57,15,54,19],[57,17,54,21,"nodeType"],[57,25,54,29],[57,26,54,30,"walkContext"],[57,37,53,15],[58,0,55,12,"fields"],[58,8,55,12,"fields"],[58,14,55,18],[58,16,55,20,"walkers"],[59,0,53,15],[59,7,53,8],[60,0,57,5],[62,0,59,4],[62,11,59,11],[62,15,59,4],[63,0,60,1],[65,0,62,0],[65,11,62,9,"getTypesFromConfig"],[65,29,62,0],[65,30,62,28,"config"],[65,36,62,0],[65,38,62,36],[66,0,63,4],[66,8,63,8,"types"],[66,13,63,13],[66,16,63,16],[66,18,63,4],[68,0,65,4],[68,9,65,9],[68,13,65,13,"name"],[68,17,65,4],[68,21,65,21,"config"],[68,27,65,27],[68,28,65,28,"node"],[68,32,65,4],[68,34,65,34],[69,0,66,8],[69,10,66,12,"hasOwnProperty"],[69,24,66,26],[69,25,66,27,"call"],[69,29,66,12],[69,30,66,32,"config"],[69,36,66,38],[69,37,66,39,"node"],[69,41,66,12],[69,43,66,45,"name"],[69,47,66,12],[69,48,66,8],[69,50,66,52],[70,0,67,12],[70,12,67,16,"nodeType"],[70,20,67,24],[70,23,67,27,"config"],[70,29,67,33],[70,30,67,34,"node"],[70,34,67,27],[70,35,67,39,"name"],[70,39,67,27],[70,40,67,12],[72,0,69,12],[72,12,69,16],[72,13,69,17,"nodeType"],[72,21,69,25],[72,22,69,26,"structure"],[72,31,69,12],[72,33,69,37],[73,0,70,16],[73,16,70,22],[73,20,70,26,"Error"],[73,25,70,22],[73,26,70,32],[73,60,70,66,"name"],[73,64,70,32],[73,67,70,73],[73,91,70,22],[73,92,70,16],[74,0,71,13],[76,0,73,12,"types"],[76,8,73,12,"types"],[76,13,73,17],[76,14,73,18,"name"],[76,18,73,17],[76,19,73,12],[76,22,73,26,"getWalkersFromStructure"],[76,45,73,49],[76,46,73,50,"name"],[76,50,73,49],[76,52,73,56,"nodeType"],[76,60,73,49],[76,61,73,12],[77,0,74,9],[78,0,75,5],[80,0,77,4],[80,11,77,11,"types"],[80,16,77,4],[81,0,78,1],[83,0,80,0],[83,11,80,9,"createTypeIterator"],[83,29,80,0],[83,30,80,28,"config"],[83,36,80,0],[83,38,80,36,"reverse"],[83,45,80,0],[83,47,80,45],[84,0,81,4],[84,8,81,8,"fields"],[84,14,81,14],[84,17,81,17,"config"],[84,23,81,23],[84,24,81,24,"fields"],[84,30,81,17],[84,31,81,31,"slice"],[84,36,81,17],[84,38,81,4],[85,0,82,4],[85,8,82,8,"contextName"],[85,19,82,19],[85,22,82,22,"config"],[85,28,82,28],[85,29,82,29,"context"],[85,36,82,4],[86,0,83,4],[86,8,83,8,"useContext"],[86,18,83,18],[86,21,83,21],[86,28,83,28,"contextName"],[86,39,83,21],[86,44,83,44],[86,52,83,4],[88,0,85,4],[88,8,85,8,"reverse"],[88,15,85,4],[88,17,85,17],[89,0,86,8,"fields"],[89,6,86,8,"fields"],[89,12,86,14],[89,13,86,15,"reverse"],[89,20,86,8],[90,0,87,5],[92,0,89,4],[92,11,89,11],[92,21,89,20,"node"],[92,25,89,11],[92,27,89,26,"context"],[92,34,89,11],[92,36,89,35,"walk"],[92,40,89,11],[92,42,89,41],[93,0,90,8],[93,10,90,12,"prevContextValue"],[93,26,90,8],[95,0,92,8],[95,10,92,12,"useContext"],[95,20,92,8],[95,22,92,24],[96,0,93,12,"prevContextValue"],[96,8,93,12,"prevContextValue"],[96,24,93,28],[96,27,93,31,"context"],[96,34,93,38],[96,35,93,39,"contextName"],[96,46,93,38],[96,47,93,12],[97,0,94,12,"context"],[97,8,94,12,"context"],[97,15,94,19],[97,16,94,20,"contextName"],[97,27,94,19],[97,28,94,12],[97,31,94,35,"node"],[97,35,94,12],[98,0,95,9],[100,0,97,8],[100,11,97,13],[100,15,97,17,"i"],[100,16,97,18],[100,19,97,21],[100,20,97,8],[100,22,97,24,"i"],[100,23,97,25],[100,26,97,28,"fields"],[100,32,97,34],[100,33,97,35,"length"],[100,39,97,8],[100,41,97,43,"i"],[100,42,97,44],[100,44,97,8],[100,46,97,48],[101,0,98,12],[101,12,98,16,"field"],[101,17,98,21],[101,20,98,24,"fields"],[101,26,98,30],[101,27,98,31,"i"],[101,28,98,30],[101,29,98,12],[102,0,99,12],[102,12,99,16,"ref"],[102,15,99,19],[102,18,99,22,"node"],[102,22,99,26],[102,23,99,27,"field"],[102,28,99,32],[102,29,99,33,"name"],[102,33,99,26],[102,34,99,12],[104,0,101,12],[104,12,101,16],[104,13,101,17,"field"],[104,18,101,22],[104,19,101,23,"nullable"],[104,27,101,16],[104,31,101,35,"ref"],[104,34,101,12],[104,36,101,40],[105,0,102,16],[105,14,102,20,"field"],[105,19,102,25],[105,20,102,26,"type"],[105,24,102,20],[105,29,102,35],[105,35,102,16],[105,37,102,43],[106,0,103,20],[106,16,103,24,"reverse"],[106,23,103,20],[106,25,103,33],[107,0,104,24,"ref"],[107,14,104,24,"ref"],[107,17,104,27],[107,18,104,28,"forEachRight"],[107,30,104,24],[107,31,104,41,"walk"],[107,35,104,24],[108,0,105,21],[108,13,103,20],[108,19,105,27],[109,0,106,24,"ref"],[109,14,106,24,"ref"],[109,17,106,27],[109,18,106,28,"forEach"],[109,25,106,24],[109,26,106,36,"walk"],[109,30,106,24],[110,0,107,21],[111,0,108,17],[111,11,102,16],[111,17,108,23],[112,0,109,20,"walk"],[112,12,109,20,"walk"],[112,16,109,24],[112,17,109,25,"ref"],[112,20,109,24],[112,21,109,20],[113,0,110,17],[114,0,111,13],[115,0,112,9],[117,0,114,8],[117,10,114,12,"useContext"],[117,20,114,8],[117,22,114,24],[118,0,115,12,"context"],[118,8,115,12,"context"],[118,15,115,19],[118,16,115,20,"contextName"],[118,27,115,19],[118,28,115,12],[118,31,115,35,"prevContextValue"],[118,47,115,12],[119,0,116,9],[120,0,117,5],[120,5,89,4],[121,0,118,1],[123,0,120,0],[123,11,120,9,"createFastTraveralMap"],[123,32,120,0],[123,33,120,31,"iterators"],[123,42,120,0],[123,44,120,42],[124,0,121,4],[124,11,121,11],[125,0,122,8,"Atrule"],[125,6,122,8,"Atrule"],[125,12,122,14],[125,14,122,16],[126,0,123,12,"StyleSheet"],[126,8,123,12,"StyleSheet"],[126,18,123,22],[126,20,123,24,"iterators"],[126,29,123,33],[126,30,123,34,"StyleSheet"],[126,40,122,16],[127,0,124,12,"Atrule"],[127,8,124,12,"Atrule"],[127,14,124,18],[127,16,124,20,"iterators"],[127,25,124,29],[127,26,124,30,"Atrule"],[127,32,122,16],[128,0,125,12,"Rule"],[128,8,125,12,"Rule"],[128,12,125,16],[128,14,125,18,"iterators"],[128,23,125,27],[128,24,125,28,"Rule"],[128,28,122,16],[129,0,126,12,"Block"],[129,8,126,12,"Block"],[129,13,126,17],[129,15,126,19,"iterators"],[129,24,126,28],[129,25,126,29,"Block"],[130,0,122,16],[130,7,121,11],[131,0,128,8,"Rule"],[131,6,128,8,"Rule"],[131,10,128,12],[131,12,128,14],[132,0,129,12,"StyleSheet"],[132,8,129,12,"StyleSheet"],[132,18,129,22],[132,20,129,24,"iterators"],[132,29,129,33],[132,30,129,34,"StyleSheet"],[132,40,128,14],[133,0,130,12,"Atrule"],[133,8,130,12,"Atrule"],[133,14,130,18],[133,16,130,20,"iterators"],[133,25,130,29],[133,26,130,30,"Atrule"],[133,32,128,14],[134,0,131,12,"Rule"],[134,8,131,12,"Rule"],[134,12,131,16],[134,14,131,18,"iterators"],[134,23,131,27],[134,24,131,28,"Rule"],[134,28,128,14],[135,0,132,12,"Block"],[135,8,132,12,"Block"],[135,13,132,17],[135,15,132,19,"iterators"],[135,24,132,28],[135,25,132,29,"Block"],[136,0,128,14],[136,7,121,11],[137,0,134,8,"Declaration"],[137,6,134,8,"Declaration"],[137,17,134,19],[137,19,134,21],[138,0,135,12,"StyleSheet"],[138,8,135,12,"StyleSheet"],[138,18,135,22],[138,20,135,24,"iterators"],[138,29,135,33],[138,30,135,34,"StyleSheet"],[138,40,134,21],[139,0,136,12,"Atrule"],[139,8,136,12,"Atrule"],[139,14,136,18],[139,16,136,20,"iterators"],[139,25,136,29],[139,26,136,30,"Atrule"],[139,32,134,21],[140,0,137,12,"Rule"],[140,8,137,12,"Rule"],[140,12,137,16],[140,14,137,18,"iterators"],[140,23,137,27],[140,24,137,28,"Rule"],[140,28,134,21],[141,0,138,12,"Block"],[141,8,138,12,"Block"],[141,13,138,17],[141,15,138,19,"iterators"],[141,24,138,28],[141,25,138,29,"Block"],[142,0,134,21],[143,0,121,11],[143,5,121,4],[144,0,141,1],[146,0,143,0,"module"],[146,2,143,0,"module"],[146,8,143,6],[146,9,143,7,"exports"],[146,16,143,0],[146,19,143,17],[146,28,143,26,"createWalker"],[146,40,143,17],[146,41,143,39,"config"],[146,47,143,17],[146,49,143,47],[147,0,144,4],[147,8,144,8,"types"],[147,13,144,13],[147,16,144,16,"getTypesFromConfig"],[147,34,144,34],[147,35,144,35,"config"],[147,41,144,34],[147,42,144,4],[148,0,145,4],[148,8,145,8,"iteratorsNatural"],[148,24,145,24],[148,27,145,27],[148,29,145,4],[149,0,146,4],[149,8,146,8,"iteratorsReverse"],[149,24,146,24],[149,27,146,27],[149,29,146,4],[151,0,148,4],[151,9,148,9],[151,13,148,13,"name"],[151,17,148,4],[151,21,148,21,"types"],[151,26,148,4],[151,28,148,28],[152,0,149,8],[152,10,149,12,"hasOwnProperty"],[152,24,149,26],[152,25,149,27,"call"],[152,29,149,12],[152,30,149,32,"types"],[152,35,149,12],[152,37,149,39,"name"],[152,41,149,12],[152,46,149,48,"types"],[152,51,149,53],[152,52,149,54,"name"],[152,56,149,53],[152,57,149,48],[152,62,149,64],[152,66,149,8],[152,68,149,70],[153,0,150,12,"iteratorsNatural"],[153,8,150,12,"iteratorsNatural"],[153,24,150,28],[153,25,150,29,"name"],[153,29,150,28],[153,30,150,12],[153,33,150,37,"createTypeIterator"],[153,51,150,55],[153,52,150,56,"types"],[153,57,150,61],[153,58,150,62,"name"],[153,62,150,61],[153,63,150,55],[153,65,150,69],[153,70,150,55],[153,71,150,12],[154,0,151,12,"iteratorsReverse"],[154,8,151,12,"iteratorsReverse"],[154,24,151,28],[154,25,151,29,"name"],[154,29,151,28],[154,30,151,12],[154,33,151,37,"createTypeIterator"],[154,51,151,55],[154,52,151,56,"types"],[154,57,151,61],[154,58,151,62,"name"],[154,62,151,61],[154,63,151,55],[154,65,151,69],[154,69,151,55],[154,70,151,12],[155,0,152,9],[156,0,153,5],[158,0,155,4],[158,8,155,8,"fastTraversalIteratorsNatural"],[158,37,155,37],[158,40,155,40,"createFastTraveralMap"],[158,61,155,61],[158,62,155,62,"iteratorsNatural"],[158,78,155,61],[158,79,155,4],[159,0,156,4],[159,8,156,8,"fastTraversalIteratorsReverse"],[159,37,156,37],[159,40,156,40,"createFastTraveralMap"],[159,61,156,61],[159,62,156,62,"iteratorsReverse"],[159,78,156,61],[159,79,156,4],[161,0,158,4],[161,8,158,8,"walk"],[161,12,158,12],[161,15,158,15],[161,24,158,8,"walk"],[161,28,158,15],[161,29,158,24,"root"],[161,33,158,15],[161,35,158,30,"options"],[161,42,158,15],[161,44,158,39],[162,0,159,8],[162,15,159,17,"walkNode"],[162,23,159,8],[162,24,159,26,"node"],[162,28,159,8],[162,30,159,32,"item"],[162,34,159,8],[162,36,159,38,"list"],[162,40,159,8],[162,42,159,44],[163,0,160,12,"enter"],[163,8,160,12,"enter"],[163,13,160,17],[163,14,160,18,"call"],[163,18,160,12],[163,19,160,23,"context"],[163,26,160,12],[163,28,160,32,"node"],[163,32,160,12],[163,34,160,38,"item"],[163,38,160,12],[163,40,160,44,"list"],[163,44,160,12],[165,0,162,12],[165,12,162,16,"iterators"],[165,21,162,25],[165,22,162,26,"hasOwnProperty"],[165,36,162,16],[165,37,162,41,"node"],[165,41,162,45],[165,42,162,46,"type"],[165,46,162,16],[165,47,162,12],[165,49,162,53],[166,0,163,16,"iterators"],[166,10,163,16,"iterators"],[166,19,163,25],[166,20,163,26,"node"],[166,24,163,30],[166,25,163,31,"type"],[166,29,163,25],[166,30,163,16],[166,31,163,37,"node"],[166,35,163,16],[166,37,163,43,"context"],[166,44,163,16],[166,46,163,52,"walkNode"],[166,54,163,16],[167,0,164,13],[169,0,166,12,"leave"],[169,8,166,12,"leave"],[169,13,166,17],[169,14,166,18,"call"],[169,18,166,12],[169,19,166,23,"context"],[169,26,166,12],[169,28,166,32,"node"],[169,32,166,12],[169,34,166,38,"item"],[169,38,166,12],[169,40,166,44,"list"],[169,44,166,12],[170,0,167,9],[172,0,169,8],[172,10,169,12,"enter"],[172,15,169,17],[172,18,169,20,"noop"],[172,22,169,8],[173,0,170,8],[173,10,170,12,"leave"],[173,15,170,17],[173,18,170,20,"noop"],[173,22,170,8],[174,0,171,8],[174,10,171,12,"iterators"],[174,19,171,21],[174,22,171,24,"iteratorsNatural"],[174,38,171,8],[175,0,172,8],[175,10,172,12,"context"],[175,17,172,19],[175,20,172,22],[176,0,173,12,"root"],[176,8,173,12,"root"],[176,12,173,16],[176,14,173,18,"root"],[176,18,172,22],[177,0,174,12,"stylesheet"],[177,8,174,12,"stylesheet"],[177,18,174,22],[177,20,174,24],[177,24,172,22],[178,0,175,12,"atrule"],[178,8,175,12,"atrule"],[178,14,175,18],[178,16,175,20],[178,20,172,22],[179,0,176,12,"atrulePrelude"],[179,8,176,12,"atrulePrelude"],[179,21,176,25],[179,23,176,27],[179,27,172,22],[180,0,177,12,"rule"],[180,8,177,12,"rule"],[180,12,177,16],[180,14,177,18],[180,18,172,22],[181,0,178,12,"selector"],[181,8,178,12,"selector"],[181,16,178,20],[181,18,178,22],[181,22,172,22],[182,0,179,12,"block"],[182,8,179,12,"block"],[182,13,179,17],[182,15,179,19],[182,19,172,22],[183,0,180,12,"declaration"],[183,8,180,12,"declaration"],[183,19,180,23],[183,21,180,25],[183,25,172,22],[184,0,181,12,"function"],[184,8,181,12,"function"],[184,16,181,20],[184,18,181,22],[185,0,172,22],[185,7,172,8],[187,0,184,8],[187,10,184,12],[187,17,184,19,"options"],[187,24,184,12],[187,29,184,31],[187,39,184,8],[187,41,184,43],[188,0,185,12,"enter"],[188,8,185,12,"enter"],[188,13,185,17],[188,16,185,20,"options"],[188,23,185,12],[189,0,186,9],[189,7,184,8],[189,13,186,15],[189,17,186,19,"options"],[189,24,186,15],[189,26,186,28],[190,0,187,12,"enter"],[190,8,187,12,"enter"],[190,13,187,17],[190,16,187,20,"ensureFunction"],[190,30,187,34],[190,31,187,35,"options"],[190,38,187,42],[190,39,187,43,"enter"],[190,44,187,34],[190,45,187,12],[191,0,188,12,"leave"],[191,8,188,12,"leave"],[191,13,188,17],[191,16,188,20,"ensureFunction"],[191,30,188,34],[191,31,188,35,"options"],[191,38,188,42],[191,39,188,43,"leave"],[191,44,188,34],[191,45,188,12],[193,0,190,12],[193,12,190,16,"options"],[193,19,190,23],[193,20,190,24,"reverse"],[193,27,190,12],[193,29,190,33],[194,0,191,16,"iterators"],[194,10,191,16,"iterators"],[194,19,191,25],[194,22,191,28,"iteratorsReverse"],[194,38,191,16],[195,0,192,13],[197,0,194,12],[197,12,194,16,"options"],[197,19,194,23],[197,20,194,24,"visit"],[197,25,194,12],[197,27,194,31],[198,0,195,16],[198,14,195,20,"fastTraversalIteratorsNatural"],[198,43,195,49],[198,44,195,50,"hasOwnProperty"],[198,58,195,20],[198,59,195,65,"options"],[198,66,195,72],[198,67,195,73,"visit"],[198,72,195,20],[198,73,195,16],[198,75,195,81],[199,0,196,20,"iterators"],[199,12,196,20,"iterators"],[199,21,196,29],[199,24,196,32,"options"],[199,31,196,39],[199,32,196,40,"reverse"],[199,39,196,32],[199,42,197,26,"fastTraversalIteratorsReverse"],[199,71,197,55],[199,72,197,56,"options"],[199,79,197,63],[199,80,197,64,"visit"],[199,85,197,55],[199,86,196,32],[199,89,198,26,"fastTraversalIteratorsNatural"],[199,118,198,55],[199,119,198,56,"options"],[199,126,198,63],[199,127,198,64,"visit"],[199,132,198,55],[199,133,196,20],[200,0,199,17],[200,11,195,16],[200,17,199,23],[200,21,199,27],[200,22,199,28,"types"],[200,27,199,33],[200,28,199,34,"hasOwnProperty"],[200,42,199,28],[200,43,199,49,"options"],[200,50,199,56],[200,51,199,57,"visit"],[200,56,199,28],[200,57,199,23],[200,59,199,65],[201,0,200,20],[201,18,200,26],[201,22,200,30,"Error"],[201,27,200,26],[201,28,200,36],[201,44,200,52,"options"],[201,51,200,59],[201,52,200,60,"visit"],[201,57,200,36],[201,60,200,68],[201,95,200,36],[201,98,200,106,"Object"],[201,104,200,112],[201,105,200,113,"keys"],[201,109,200,106],[201,110,200,118,"types"],[201,115,200,106],[201,117,200,125,"join"],[201,121,200,106],[201,122,200,130],[201,126,200,106],[201,127,200,36],[201,130,200,138],[201,133,200,26],[201,134,200,20],[202,0,201,17],[204,0,203,16,"enter"],[204,10,203,16,"enter"],[204,15,203,21],[204,18,203,24,"invokeForType"],[204,31,203,37],[204,32,203,38,"enter"],[204,37,203,37],[204,39,203,45,"options"],[204,46,203,52],[204,47,203,53,"visit"],[204,52,203,37],[204,53,203,16],[205,0,204,16,"leave"],[205,10,204,16,"leave"],[205,15,204,21],[205,18,204,24,"invokeForType"],[205,31,204,37],[205,32,204,38,"leave"],[205,37,204,37],[205,39,204,45,"options"],[205,46,204,52],[205,47,204,53,"visit"],[205,52,204,37],[205,53,204,16],[206,0,205,13],[207,0,206,9],[209,0,208,8],[209,10,208,12,"enter"],[209,15,208,17],[209,20,208,22,"noop"],[209,24,208,12],[209,28,208,30,"leave"],[209,33,208,35],[209,38,208,40,"noop"],[209,42,208,8],[209,44,208,46],[210,0,209,12],[210,14,209,18],[210,18,209,22,"Error"],[210,23,209,18],[210,24,209,28],[210,102,209,18],[210,103,209,12],[211,0,210,9],[213,0,213,8],[213,10,213,12,"options"],[213,17,213,19],[213,18,213,20,"reverse"],[213,25,213,8],[213,27,213,29],[214,0,214,12],[214,12,214,16,"tmp"],[214,15,214,19],[214,18,214,22,"enter"],[214,23,214,12],[215,0,215,12,"enter"],[215,8,215,12,"enter"],[215,13,215,17],[215,16,215,20,"leave"],[215,21,215,12],[216,0,216,12,"leave"],[216,8,216,12,"leave"],[216,13,216,17],[216,16,216,20,"tmp"],[216,19,216,12],[217,0,217,9],[219,0,219,8,"walkNode"],[219,6,219,8,"walkNode"],[219,14,219,16],[219,15,219,17,"root"],[219,19,219,16],[219,20,219,8],[220,0,220,5],[220,5,158,4],[222,0,222,4,"walk"],[222,4,222,4,"walk"],[222,8,222,8],[222,9,222,9,"find"],[222,13,222,4],[222,16,222,16],[222,26,222,25,"ast"],[222,29,222,16],[222,31,222,30,"fn"],[222,33,222,16],[222,35,222,34],[223,0,223,8],[223,10,223,12,"found"],[223,15,223,17],[223,18,223,20],[223,22,223,8],[224,0,225,8,"walk"],[224,6,225,8,"walk"],[224,10,225,12],[224,11,225,13,"ast"],[224,14,225,12],[224,16,225,18],[224,26,225,27,"node"],[224,30,225,18],[224,32,225,33,"item"],[224,36,225,18],[224,38,225,39,"list"],[224,42,225,18],[224,44,225,45],[225,0,226,12],[225,12,226,16,"found"],[225,17,226,21],[225,22,226,26],[225,26,226,16],[225,30,226,34,"fn"],[225,32,226,36],[225,33,226,37,"call"],[225,37,226,34],[225,38,226,42],[225,42,226,34],[225,44,226,48,"node"],[225,48,226,34],[225,50,226,54,"item"],[225,54,226,34],[225,56,226,60,"list"],[225,60,226,34],[225,61,226,12],[225,63,226,67],[226,0,227,16,"found"],[226,10,227,16,"found"],[226,15,227,21],[226,18,227,24,"node"],[226,22,227,16],[227,0,228,13],[228,0,229,9],[228,7,225,12],[228,8,225,8],[229,0,231,8],[229,13,231,15,"found"],[229,18,231,8],[230,0,232,5],[230,5,222,4],[232,0,234,4,"walk"],[232,4,234,4,"walk"],[232,8,234,8],[232,9,234,9,"findLast"],[232,17,234,4],[232,20,234,20],[232,30,234,29,"ast"],[232,33,234,20],[232,35,234,34,"fn"],[232,37,234,20],[232,39,234,38],[233,0,235,8],[233,10,235,12,"found"],[233,15,235,17],[233,18,235,20],[233,22,235,8],[234,0,237,8,"walk"],[234,6,237,8,"walk"],[234,10,237,12],[234,11,237,13,"ast"],[234,14,237,12],[234,16,237,18],[235,0,238,12,"reverse"],[235,8,238,12,"reverse"],[235,15,238,19],[235,17,238,21],[235,21,237,18],[236,0,239,12,"enter"],[236,8,239,12,"enter"],[236,13,239,17],[236,15,239,19],[236,30,239,28,"node"],[236,34,239,19],[236,36,239,34,"item"],[236,40,239,19],[236,42,239,40,"list"],[236,46,239,19],[236,48,239,46],[237,0,240,16],[237,14,240,20,"found"],[237,19,240,25],[237,24,240,30],[237,28,240,20],[237,32,240,38,"fn"],[237,34,240,40],[237,35,240,41,"call"],[237,39,240,38],[237,40,240,46],[237,44,240,38],[237,46,240,52,"node"],[237,50,240,38],[237,52,240,58,"item"],[237,56,240,38],[237,58,240,64,"list"],[237,62,240,38],[237,63,240,16],[237,65,240,71],[238,0,241,20,"found"],[238,12,241,20,"found"],[238,17,241,25],[238,20,241,28,"node"],[238,24,241,20],[239,0,242,17],[240,0,243,13],[241,0,237,18],[241,7,237,12],[241,8,237,8],[242,0,246,8],[242,13,246,15,"found"],[242,18,246,8],[243,0,247,5],[243,5,234,4],[245,0,249,4,"walk"],[245,4,249,4,"walk"],[245,8,249,8],[245,9,249,9,"findAll"],[245,16,249,4],[245,19,249,19],[245,29,249,28,"ast"],[245,32,249,19],[245,34,249,33,"fn"],[245,36,249,19],[245,38,249,37],[246,0,250,8],[246,10,250,12,"found"],[246,15,250,17],[246,18,250,20],[246,20,250,8],[247,0,252,8,"walk"],[247,6,252,8,"walk"],[247,10,252,12],[247,11,252,13,"ast"],[247,14,252,12],[247,16,252,18],[247,26,252,27,"node"],[247,30,252,18],[247,32,252,33,"item"],[247,36,252,18],[247,38,252,39,"list"],[247,42,252,18],[247,44,252,45],[248,0,253,12],[248,12,253,16,"fn"],[248,14,253,18],[248,15,253,19,"call"],[248,19,253,16],[248,20,253,24],[248,24,253,16],[248,26,253,30,"node"],[248,30,253,16],[248,32,253,36,"item"],[248,36,253,16],[248,38,253,42,"list"],[248,42,253,16],[248,43,253,12],[248,45,253,49],[249,0,254,16,"found"],[249,10,254,16,"found"],[249,15,254,21],[249,16,254,22,"push"],[249,20,254,16],[249,21,254,27,"node"],[249,25,254,16],[250,0,255,13],[251,0,256,9],[251,7,252,12],[251,8,252,8],[252,0,258,8],[252,13,258,15,"found"],[252,18,258,8],[253,0,259,5],[253,5,249,4],[255,0,261,4],[255,11,261,11,"walk"],[255,15,261,4],[256,0,262,1],[256,3,143,0]]},"type":"js/module"}]}