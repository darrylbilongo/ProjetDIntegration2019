{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  module.exports = parse;\n  var re_nthElement = /^([+\\-]?\\d*n)?\\s*(?:([+\\-]?)\\s*(\\d+))?$/;\n\n  function parse(formula) {\n    formula = formula.trim().toLowerCase();\n\n    if (formula === \"even\") {\n      return [2, 0];\n    } else if (formula === \"odd\") {\n      return [2, 1];\n    } else {\n      var parsed = formula.match(re_nthElement);\n\n      if (!parsed) {\n        throw new SyntaxError(\"n-th rule couldn't be parsed ('\" + formula + \"')\");\n      }\n\n      var a;\n\n      if (parsed[1]) {\n        a = parseInt(parsed[1], 10);\n\n        if (isNaN(a)) {\n          if (parsed[1].charAt(0) === \"-\") a = -1;else a = 1;\n        }\n      } else a = 0;\n\n      return [a, parsed[3] ? parseInt((parsed[2] || \"\") + parsed[3], 10) : 0];\n    }\n  }\n});","map":[[2,0,1,0,"module"],[2,2,1,0,"module"],[2,8,1,6],[2,9,1,7,"exports"],[2,16,1,0],[2,19,1,17,"parse"],[2,24,1,0],[3,0,6,0],[3,6,6,4,"re_nthElement"],[3,19,6,17],[3,22,6,20],[3,63,6,0],[5,0,11,0],[5,11,11,9,"parse"],[5,16,11,0],[5,17,11,15,"formula"],[5,24,11,0],[5,26,11,23],[6,0,12,1,"formula"],[6,4,12,1,"formula"],[6,11,12,8],[6,14,12,11,"formula"],[6,21,12,18],[6,22,12,19,"trim"],[6,26,12,11],[6,29,12,26,"toLowerCase"],[6,40,12,11],[6,42,12,1],[8,0,14,1],[8,8,14,4,"formula"],[8,15,14,11],[8,20,14,16],[8,26,14,1],[8,28,14,23],[9,0,15,2],[9,13,15,9],[9,14,15,10],[9,15,15,9],[9,17,15,13],[9,18,15,9],[9,19,15,2],[10,0,16,2],[10,5,14,1],[10,11,16,8],[10,15,16,11,"formula"],[10,22,16,18],[10,27,16,23],[10,32,16,8],[10,34,16,29],[11,0,17,2],[11,13,17,9],[11,14,17,10],[11,15,17,9],[11,17,17,13],[11,18,17,9],[11,19,17,2],[12,0,18,2],[12,5,16,8],[12,11,18,8],[13,0,19,2],[13,10,19,6,"parsed"],[13,16,19,12],[13,19,19,15,"formula"],[13,26,19,22],[13,27,19,23,"match"],[13,32,19,15],[13,33,19,29,"re_nthElement"],[13,46,19,15],[13,47,19,2],[15,0,21,2],[15,10,21,5],[15,11,21,6,"parsed"],[15,17,21,2],[15,19,21,13],[16,0,22,3],[16,14,22,9],[16,18,22,13,"SyntaxError"],[16,29,22,9],[16,30,22,25],[16,66,22,61,"formula"],[16,73,22,25],[16,76,22,71],[16,80,22,9],[16,81,22,3],[17,0,23,3],[19,0,25,2],[19,10,25,6,"a"],[19,11,25,2],[21,0,27,2],[21,10,27,5,"parsed"],[21,16,27,11],[21,17,27,12],[21,18,27,11],[21,19,27,2],[21,21,27,15],[22,0,28,3,"a"],[22,8,28,3,"a"],[22,9,28,4],[22,12,28,7,"parseInt"],[22,20,28,15],[22,21,28,16,"parsed"],[22,27,28,22],[22,28,28,23],[22,29,28,22],[22,30,28,15],[22,32,28,27],[22,34,28,15],[22,35,28,3],[24,0,29,3],[24,12,29,6,"isNaN"],[24,17,29,11],[24,18,29,12,"a"],[24,19,29,11],[24,20,29,3],[24,22,29,15],[25,0,30,4],[25,14,30,7,"parsed"],[25,20,30,13],[25,21,30,14],[25,22,30,13],[25,23,30,7],[25,24,30,17,"charAt"],[25,30,30,7],[25,31,30,24],[25,32,30,7],[25,38,30,31],[25,41,30,4],[25,43,30,36,"a"],[25,44,30,37],[25,47,30,40],[25,48,30,41],[25,49,30,36],[25,50,30,4],[25,55,31,9,"a"],[25,56,31,10],[25,59,31,13],[25,60,31,9],[26,0,32,4],[27,0,33,3],[27,7,27,2],[27,13,33,9,"a"],[27,14,33,10],[27,17,33,13],[27,18,33,9],[29,0,35,2],[29,13,35,9],[29,14,36,3,"a"],[29,15,35,9],[29,17,37,3,"parsed"],[29,23,37,9],[29,24,37,10],[29,25,37,9],[29,26,37,3],[29,29,37,15,"parseInt"],[29,37,37,23],[29,38,37,24],[29,39,37,25,"parsed"],[29,45,37,31],[29,46,37,32],[29,47,37,31],[29,48,37,25],[29,52,37,38],[29,54,37,24],[29,58,37,44,"parsed"],[29,64,37,50],[29,65,37,51],[29,66,37,50],[29,67,37,23],[29,69,37,55],[29,71,37,23],[29,72,37,3],[29,75,37,61],[29,76,35,9],[29,77,35,2],[30,0,39,2],[31,0,40,1]]},"type":"js/module"}]}