{"dependencies":[{"name":"../common/List","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var List = _$$_REQUIRE(_dependencyMap[0], \"../common/List\");\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function isValidNumber(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n  }\n\n  function isValidLocation(loc) {\n    return Boolean(loc) && isValidNumber(loc.offset) && isValidNumber(loc.line) && isValidNumber(loc.column);\n  }\n\n  function createNodeStructureChecker(type, fields) {\n    return function checkNode(node, warn) {\n      if (!node || node.constructor !== Object) {\n        return warn(node, 'Type of node should be an Object');\n      }\n\n      for (var key in node) {\n        var valid = true;\n\n        if (hasOwnProperty.call(node, key) === false) {\n          continue;\n        }\n\n        if (key === 'type') {\n          if (node.type !== type) {\n            warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');\n          }\n        } else if (key === 'loc') {\n          if (node.loc === null) {\n            continue;\n          } else if (node.loc && node.loc.constructor === Object) {\n            if (typeof node.loc.source !== 'string') {\n              key += '.source';\n            } else if (!isValidLocation(node.loc.start)) {\n              key += '.start';\n            } else if (!isValidLocation(node.loc.end)) {\n              key += '.end';\n            } else {\n              continue;\n            }\n          }\n\n          valid = false;\n        } else if (fields.hasOwnProperty(key)) {\n          for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {\n            var fieldType = fields[key][i];\n\n            switch (fieldType) {\n              case String:\n                valid = typeof node[key] === 'string';\n                break;\n\n              case Boolean:\n                valid = typeof node[key] === 'boolean';\n                break;\n\n              case null:\n                valid = node[key] === null;\n                break;\n\n              default:\n                if (typeof fieldType === 'string') {\n                  valid = node[key] && node[key].type === fieldType;\n                } else if (Array.isArray(fieldType)) {\n                  valid = node[key] instanceof List;\n                }\n\n            }\n          }\n        } else {\n          warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');\n        }\n\n        if (!valid) {\n          warn(node, 'Bad value for `' + type + '.' + key + '`');\n        }\n      }\n\n      for (var key in fields) {\n        if (hasOwnProperty.call(fields, key) && hasOwnProperty.call(node, key) === false) {\n          warn(node, 'Field `' + type + '.' + key + '` is missed');\n        }\n      }\n    };\n  }\n\n  function processStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var fields = {\n      type: String,\n      loc: true\n    };\n    var docs = {\n      type: '\"' + name + '\"'\n    };\n\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n\n      var docsTypes = [];\n      var fieldTypes = fields[key] = Array.isArray(structure[key]) ? structure[key].slice() : [structure[key]];\n\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n\n        if (fieldType === String || fieldType === Boolean) {\n          docsTypes.push(fieldType.name);\n        } else if (fieldType === null) {\n          docsTypes.push('null');\n        } else if (typeof fieldType === 'string') {\n          docsTypes.push('<' + fieldType + '>');\n        } else if (Array.isArray(fieldType)) {\n          docsTypes.push('List');\n        } else {\n          throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');\n        }\n      }\n\n      docs[key] = docsTypes.join(' | ');\n    }\n\n    return {\n      docs: docs,\n      check: createNodeStructureChecker(name, fields)\n    };\n  }\n\n  module.exports = {\n    getStructureFromConfig: function getStructureFromConfig(config) {\n      var structure = {};\n\n      if (config.node) {\n        for (var name in config.node) {\n          if (hasOwnProperty.call(config.node, name)) {\n            var nodeType = config.node[name];\n\n            if (nodeType.structure) {\n              structure[name] = processStructure(name, nodeType);\n            } else {\n              throw new Error('Missed `structure` field in `' + name + '` node type definition');\n            }\n          }\n        }\n      }\n\n      return structure;\n    }\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"List"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,61,1,0],[4,0,2,0],[4,6,2,4,"hasOwnProperty"],[4,20,2,18],[4,23,2,21,"Object"],[4,29,2,27],[4,30,2,28,"prototype"],[4,39,2,21],[4,40,2,38,"hasOwnProperty"],[4,54,2,0],[6,0,4,0],[6,11,4,9,"isValidNumber"],[6,24,4,0],[6,25,4,23,"value"],[6,30,4,0],[6,32,4,30],[7,0,6,4],[7,11,7,8],[7,18,7,15,"value"],[7,23,7,8],[7,28,7,25],[7,36,7,8],[7,40,8,8,"isFinite"],[7,48,8,16],[7,49,8,17,"value"],[7,54,8,16],[7,55,7,8],[7,59,9,8,"Math"],[7,63,9,12],[7,64,9,13,"floor"],[7,69,9,8],[7,70,9,19,"value"],[7,75,9,8],[7,81,9,30,"value"],[7,86,7,8],[7,90,10,8,"value"],[7,95,10,13],[7,99,10,17],[7,100,6,4],[8,0,12,1],[10,0,14,0],[10,11,14,9,"isValidLocation"],[10,26,14,0],[10,27,14,25,"loc"],[10,30,14,0],[10,32,14,30],[11,0,15,4],[11,11,16,8,"Boolean"],[11,18,16,15],[11,19,16,16,"loc"],[11,22,16,15],[11,23,16,8],[11,27,17,8,"isValidNumber"],[11,40,17,21],[11,41,17,22,"loc"],[11,44,17,25],[11,45,17,26,"offset"],[11,51,17,21],[11,52,16,8],[11,56,18,8,"isValidNumber"],[11,69,18,21],[11,70,18,22,"loc"],[11,73,18,25],[11,74,18,26,"line"],[11,78,18,21],[11,79,16,8],[11,83,19,8,"isValidNumber"],[11,96,19,21],[11,97,19,22,"loc"],[11,100,19,25],[11,101,19,26,"column"],[11,107,19,21],[11,108,15,4],[12,0,21,1],[14,0,23,0],[14,11,23,9,"createNodeStructureChecker"],[14,37,23,0],[14,38,23,36,"type"],[14,42,23,0],[14,44,23,42,"fields"],[14,50,23,0],[14,52,23,50],[15,0,24,4],[15,11,24,11],[15,20,24,20,"checkNode"],[15,29,24,11],[15,30,24,30,"node"],[15,34,24,11],[15,36,24,36,"warn"],[15,40,24,11],[15,42,24,42],[16,0,25,8],[16,10,25,12],[16,11,25,13,"node"],[16,15,25,12],[16,19,25,21,"node"],[16,23,25,25],[16,24,25,26,"constructor"],[16,35,25,21],[16,40,25,42,"Object"],[16,46,25,8],[16,48,25,50],[17,0,26,12],[17,15,26,19,"warn"],[17,19,26,23],[17,20,26,24,"node"],[17,24,26,23],[17,26,26,30],[17,60,26,23],[17,61,26,12],[18,0,27,9],[20,0,29,8],[20,11,29,13],[20,15,29,17,"key"],[20,18,29,8],[20,22,29,24,"node"],[20,26,29,8],[20,28,29,30],[21,0,30,12],[21,12,30,16,"valid"],[21,17,30,21],[21,20,30,24],[21,24,30,12],[23,0,32,12],[23,12,32,16,"hasOwnProperty"],[23,26,32,30],[23,27,32,31,"call"],[23,31,32,16],[23,32,32,36,"node"],[23,36,32,16],[23,38,32,42,"key"],[23,41,32,16],[23,47,32,51],[23,52,32,12],[23,54,32,58],[24,0,33,16],[25,0,34,13],[27,0,36,12],[27,12,36,16,"key"],[27,15,36,19],[27,20,36,24],[27,26,36,12],[27,28,36,32],[28,0,37,16],[28,14,37,20,"node"],[28,18,37,24],[28,19,37,25,"type"],[28,23,37,20],[28,28,37,34,"type"],[28,32,37,16],[28,34,37,40],[29,0,38,20,"warn"],[29,12,38,20,"warn"],[29,16,38,24],[29,17,38,25,"node"],[29,21,38,24],[29,23,38,31],[29,45,38,53,"node"],[29,49,38,57],[29,50,38,58,"type"],[29,54,38,31],[29,57,38,65],[29,72,38,31],[29,75,38,83,"type"],[29,79,38,31],[29,82,38,90],[29,85,38,24],[29,86,38,20],[30,0,39,17],[31,0,40,13],[31,9,36,12],[31,15,40,19],[31,19,40,23,"key"],[31,22,40,26],[31,27,40,31],[31,32,40,19],[31,34,40,38],[32,0,41,16],[32,14,41,20,"node"],[32,18,41,24],[32,19,41,25,"loc"],[32,22,41,20],[32,27,41,33],[32,31,41,16],[32,33,41,39],[33,0,42,20],[34,0,43,17],[34,11,41,16],[34,17,43,23],[34,21,43,27,"node"],[34,25,43,31],[34,26,43,32,"loc"],[34,29,43,27],[34,33,43,39,"node"],[34,37,43,43],[34,38,43,44,"loc"],[34,41,43,39],[34,42,43,48,"constructor"],[34,53,43,39],[34,58,43,64,"Object"],[34,64,43,23],[34,66,43,72],[35,0,44,20],[35,16,44,24],[35,23,44,31,"node"],[35,27,44,35],[35,28,44,36,"loc"],[35,31,44,31],[35,32,44,40,"source"],[35,38,44,24],[35,43,44,51],[35,51,44,20],[35,53,44,61],[36,0,45,24,"key"],[36,14,45,24,"key"],[36,17,45,27],[36,21,45,31],[36,30,45,24],[37,0,46,21],[37,13,44,20],[37,19,46,27],[37,23,46,31],[37,24,46,32,"isValidLocation"],[37,39,46,47],[37,40,46,48,"node"],[37,44,46,52],[37,45,46,53,"loc"],[37,48,46,48],[37,49,46,57,"start"],[37,54,46,47],[37,55,46,27],[37,57,46,65],[38,0,47,24,"key"],[38,14,47,24,"key"],[38,17,47,27],[38,21,47,31],[38,29,47,24],[39,0,48,21],[39,13,46,27],[39,19,48,27],[39,23,48,31],[39,24,48,32,"isValidLocation"],[39,39,48,47],[39,40,48,48,"node"],[39,44,48,52],[39,45,48,53,"loc"],[39,48,48,48],[39,49,48,57,"end"],[39,52,48,47],[39,53,48,27],[39,55,48,63],[40,0,49,24,"key"],[40,14,49,24,"key"],[40,17,49,27],[40,21,49,31],[40,27,49,24],[41,0,50,21],[41,13,48,27],[41,19,50,27],[42,0,51,24],[43,0,52,21],[44,0,53,17],[46,0,55,16,"valid"],[46,10,55,16,"valid"],[46,15,55,21],[46,18,55,24],[46,23,55,16],[47,0,56,13],[47,9,40,19],[47,15,56,19],[47,19,56,23,"fields"],[47,25,56,29],[47,26,56,30,"hasOwnProperty"],[47,40,56,23],[47,41,56,45,"key"],[47,44,56,23],[47,45,56,19],[47,47,56,51],[48,0,57,16],[48,15,57,21],[48,19,57,25,"i"],[48,20,57,26],[48,23,57,29],[48,24,57,21],[48,26,57,32,"valid"],[48,31,57,37],[48,34,57,40],[48,39,57,16],[48,41,57,47],[48,42,57,48,"valid"],[48,47,57,47],[48,51,57,57,"i"],[48,52,57,58],[48,55,57,61,"fields"],[48,61,57,67],[48,62,57,68,"key"],[48,65,57,67],[48,66,57,61],[48,67,57,73,"length"],[48,73,57,16],[48,75,57,81,"i"],[48,76,57,82],[48,78,57,16],[48,80,57,86],[49,0,58,20],[49,16,58,24,"fieldType"],[49,25,58,33],[49,28,58,36,"fields"],[49,34,58,42],[49,35,58,43,"key"],[49,38,58,42],[49,39,58,36],[49,40,58,48,"i"],[49,41,58,36],[49,42,58,20],[51,0,60,20],[51,20,60,28,"fieldType"],[51,29,60,20],[52,0,61,24],[52,19,61,29,"String"],[52,25,61,24],[53,0,62,28,"valid"],[53,16,62,28,"valid"],[53,21,62,33],[53,24,62,36],[53,31,62,43,"node"],[53,35,62,47],[53,36,62,48,"key"],[53,39,62,47],[53,40,62,36],[53,45,62,57],[53,53,62,28],[54,0,63,28],[56,0,65,24],[56,19,65,29,"Boolean"],[56,26,65,24],[57,0,66,28,"valid"],[57,16,66,28,"valid"],[57,21,66,33],[57,24,66,36],[57,31,66,43,"node"],[57,35,66,47],[57,36,66,48,"key"],[57,39,66,47],[57,40,66,36],[57,45,66,57],[57,54,66,28],[58,0,67,28],[60,0,69,24],[60,19,69,29],[60,23,69,24],[61,0,70,28,"valid"],[61,16,70,28,"valid"],[61,21,70,33],[61,24,70,36,"node"],[61,28,70,40],[61,29,70,41,"key"],[61,32,70,40],[61,33,70,36],[61,38,70,50],[61,42,70,28],[62,0,71,28],[64,0,73,24],[65,0,74,28],[65,20,74,32],[65,27,74,39,"fieldType"],[65,36,74,32],[65,41,74,53],[65,49,74,28],[65,51,74,63],[66,0,75,32,"valid"],[66,18,75,32,"valid"],[66,23,75,37],[66,26,75,40,"node"],[66,30,75,44],[66,31,75,45,"key"],[66,34,75,44],[66,35,75,40],[66,39,75,53,"node"],[66,43,75,57],[66,44,75,58,"key"],[66,47,75,57],[66,48,75,53],[66,49,75,63,"type"],[66,53,75,53],[66,58,75,72,"fieldType"],[66,67,75,32],[67,0,76,29],[67,17,74,28],[67,23,76,35],[67,27,76,39,"Array"],[67,32,76,44],[67,33,76,45,"isArray"],[67,40,76,39],[67,41,76,53,"fieldType"],[67,50,76,39],[67,51,76,35],[67,53,76,65],[68,0,77,32,"valid"],[68,18,77,32,"valid"],[68,23,77,37],[68,26,77,40,"node"],[68,30,77,44],[68,31,77,45,"key"],[68,34,77,44],[68,35,77,40],[68,47,77,61,"List"],[68,51,77,32],[69,0,78,29],[71,0,60,20],[72,0,80,17],[73,0,81,13],[73,9,56,19],[73,15,81,19],[74,0,82,16,"warn"],[74,10,82,16,"warn"],[74,14,82,20],[74,15,82,21,"node"],[74,19,82,20],[74,21,82,27],[74,41,82,47,"key"],[74,44,82,27],[74,47,82,53],[74,55,82,27],[74,58,82,64,"type"],[74,62,82,27],[74,65,82,71],[74,77,82,20],[74,78,82,16],[75,0,83,13],[77,0,85,12],[77,12,85,16],[77,13,85,17,"valid"],[77,18,85,12],[77,20,85,24],[78,0,86,16,"warn"],[78,10,86,16,"warn"],[78,14,86,20],[78,15,86,21,"node"],[78,19,86,20],[78,21,86,27],[78,41,86,47,"type"],[78,45,86,27],[78,48,86,54],[78,51,86,27],[78,54,86,60,"key"],[78,57,86,27],[78,60,86,66],[78,63,86,20],[78,64,86,16],[79,0,87,13],[80,0,88,9],[82,0,90,8],[82,11,90,13],[82,15,90,17,"key"],[82,18,90,8],[82,22,90,24,"fields"],[82,28,90,8],[82,30,90,32],[83,0,91,12],[83,12,91,16,"hasOwnProperty"],[83,26,91,30],[83,27,91,31,"call"],[83,31,91,16],[83,32,91,36,"fields"],[83,38,91,16],[83,40,91,44,"key"],[83,43,91,16],[83,48,92,16,"hasOwnProperty"],[83,62,92,30],[83,63,92,31,"call"],[83,67,92,16],[83,68,92,36,"node"],[83,72,92,16],[83,74,92,42,"key"],[83,77,92,16],[83,83,92,51],[83,88,91,12],[83,90,92,58],[84,0,93,16,"warn"],[84,10,93,16,"warn"],[84,14,93,20],[84,15,93,21,"node"],[84,19,93,20],[84,21,93,27],[84,33,93,39,"type"],[84,37,93,27],[84,40,93,46],[84,43,93,27],[84,46,93,52,"key"],[84,49,93,27],[84,52,93,58],[84,65,93,20],[84,66,93,16],[85,0,94,13],[86,0,95,9],[87,0,96,5],[87,5,24,4],[88,0,97,1],[90,0,99,0],[90,11,99,9,"processStructure"],[90,27,99,0],[90,28,99,26,"name"],[90,32,99,0],[90,34,99,32,"nodeType"],[90,42,99,0],[90,44,99,42],[91,0,100,4],[91,8,100,8,"structure"],[91,17,100,17],[91,20,100,20,"nodeType"],[91,28,100,28],[91,29,100,29,"structure"],[91,38,100,4],[92,0,101,4],[92,8,101,8,"fields"],[92,14,101,14],[92,17,101,17],[93,0,102,8,"type"],[93,6,102,8,"type"],[93,10,102,12],[93,12,102,14,"String"],[93,18,101,17],[94,0,103,8,"loc"],[94,6,103,8,"loc"],[94,9,103,11],[94,11,103,13],[95,0,101,17],[95,5,101,4],[96,0,105,4],[96,8,105,8,"docs"],[96,12,105,12],[96,15,105,15],[97,0,106,8,"type"],[97,6,106,8,"type"],[97,10,106,12],[97,12,106,14],[97,18,106,20,"name"],[97,22,106,14],[97,25,106,27],[98,0,105,15],[98,5,105,4],[100,0,109,4],[100,9,109,9],[100,13,109,13,"key"],[100,16,109,4],[100,20,109,20,"structure"],[100,29,109,4],[100,31,109,31],[101,0,110,8],[101,10,110,12,"hasOwnProperty"],[101,24,110,26],[101,25,110,27,"call"],[101,29,110,12],[101,30,110,32,"structure"],[101,39,110,12],[101,41,110,43,"key"],[101,44,110,12],[101,50,110,52],[101,55,110,8],[101,57,110,59],[102,0,111,12],[103,0,112,9],[105,0,114,8],[105,10,114,12,"docsTypes"],[105,19,114,21],[105,22,114,24],[105,24,114,8],[106,0,115,8],[106,10,115,12,"fieldTypes"],[106,20,115,22],[106,23,115,25,"fields"],[106,29,115,31],[106,30,115,32,"key"],[106,33,115,31],[106,34,115,25],[106,37,115,39,"Array"],[106,42,115,44],[106,43,115,45,"isArray"],[106,50,115,39],[106,51,115,53,"structure"],[106,60,115,62],[106,61,115,63,"key"],[106,64,115,62],[106,65,115,39],[106,69,116,14,"structure"],[106,78,116,23],[106,79,116,24,"key"],[106,82,116,23],[106,83,116,14],[106,84,116,29,"slice"],[106,89,116,14],[106,91,115,39],[106,94,117,14],[106,95,117,15,"structure"],[106,104,117,24],[106,105,117,25,"key"],[106,108,117,24],[106,109,117,14],[106,110,115,8],[108,0,119,8],[108,11,119,13],[108,15,119,17,"i"],[108,16,119,18],[108,19,119,21],[108,20,119,8],[108,22,119,24,"i"],[108,23,119,25],[108,26,119,28,"fieldTypes"],[108,36,119,38],[108,37,119,39,"length"],[108,43,119,8],[108,45,119,47,"i"],[108,46,119,48],[108,48,119,8],[108,50,119,52],[109,0,120,12],[109,12,120,16,"fieldType"],[109,21,120,25],[109,24,120,28,"fieldTypes"],[109,34,120,38],[109,35,120,39,"i"],[109,36,120,38],[109,37,120,12],[111,0,121,12],[111,12,121,16,"fieldType"],[111,21,121,25],[111,26,121,30,"String"],[111,32,121,16],[111,36,121,40,"fieldType"],[111,45,121,49],[111,50,121,54,"Boolean"],[111,57,121,12],[111,59,121,63],[112,0,122,16,"docsTypes"],[112,10,122,16,"docsTypes"],[112,19,122,25],[112,20,122,26,"push"],[112,24,122,16],[112,25,122,31,"fieldType"],[112,34,122,40],[112,35,122,41,"name"],[112,39,122,16],[113,0,123,13],[113,9,121,12],[113,15,123,19],[113,19,123,23,"fieldType"],[113,28,123,32],[113,33,123,37],[113,37,123,19],[113,39,123,43],[114,0,124,16,"docsTypes"],[114,10,124,16,"docsTypes"],[114,19,124,25],[114,20,124,26,"push"],[114,24,124,16],[114,25,124,31],[114,31,124,16],[115,0,125,13],[115,9,123,19],[115,15,125,19],[115,19,125,23],[115,26,125,30,"fieldType"],[115,35,125,23],[115,40,125,44],[115,48,125,19],[115,50,125,54],[116,0,126,16,"docsTypes"],[116,10,126,16,"docsTypes"],[116,19,126,25],[116,20,126,26,"push"],[116,24,126,16],[116,25,126,31],[116,31,126,37,"fieldType"],[116,40,126,31],[116,43,126,49],[116,46,126,16],[117,0,127,13],[117,9,125,19],[117,15,127,19],[117,19,127,23,"Array"],[117,24,127,28],[117,25,127,29,"isArray"],[117,32,127,23],[117,33,127,37,"fieldType"],[117,42,127,23],[117,43,127,19],[117,45,127,49],[118,0,128,16,"docsTypes"],[118,10,128,16,"docsTypes"],[118,19,128,25],[118,20,128,26,"push"],[118,24,128,16],[118,25,128,31],[118,31,128,16],[119,0,129,13],[119,9,127,19],[119,15,129,19],[120,0,130,16],[120,16,130,22],[120,20,130,26,"Error"],[120,25,130,22],[120,26,130,32],[120,44,130,50,"fieldType"],[120,53,130,32],[120,56,130,62],[120,64,130,32],[120,67,130,73,"name"],[120,71,130,32],[120,74,130,80],[120,77,130,32],[120,80,130,86,"key"],[120,83,130,32],[120,86,130,92],[120,110,130,22],[120,111,130,16],[121,0,131,13],[122,0,132,9],[124,0,134,8,"docs"],[124,6,134,8,"docs"],[124,10,134,12],[124,11,134,13,"key"],[124,14,134,12],[124,15,134,8],[124,18,134,20,"docsTypes"],[124,27,134,29],[124,28,134,30,"join"],[124,32,134,20],[124,33,134,35],[124,38,134,20],[124,39,134,8],[125,0,135,5],[127,0,137,4],[127,11,137,11],[128,0,138,8,"docs"],[128,6,138,8,"docs"],[128,10,138,12],[128,12,138,14,"docs"],[128,16,137,11],[129,0,139,8,"check"],[129,6,139,8,"check"],[129,11,139,13],[129,13,139,15,"createNodeStructureChecker"],[129,39,139,41],[129,40,139,42,"name"],[129,44,139,41],[129,46,139,48,"fields"],[129,52,139,41],[130,0,137,11],[130,5,137,4],[131,0,141,1],[133,0,143,0,"module"],[133,2,143,0,"module"],[133,8,143,6],[133,9,143,7,"exports"],[133,16,143,0],[133,19,143,17],[134,0,144,4,"getStructureFromConfig"],[134,4,144,4,"getStructureFromConfig"],[134,26,144,26],[134,28,144,28],[134,60,144,37,"config"],[134,66,144,28],[134,68,144,45],[135,0,145,8],[135,10,145,12,"structure"],[135,19,145,21],[135,22,145,24],[135,24,145,8],[137,0,147,8],[137,10,147,12,"config"],[137,16,147,18],[137,17,147,19,"node"],[137,21,147,8],[137,23,147,25],[138,0,148,12],[138,13,148,17],[138,17,148,21,"name"],[138,21,148,12],[138,25,148,29,"config"],[138,31,148,35],[138,32,148,36,"node"],[138,36,148,12],[138,38,148,42],[139,0,149,16],[139,14,149,20,"hasOwnProperty"],[139,28,149,34],[139,29,149,35,"call"],[139,33,149,20],[139,34,149,40,"config"],[139,40,149,46],[139,41,149,47,"node"],[139,45,149,20],[139,47,149,53,"name"],[139,51,149,20],[139,52,149,16],[139,54,149,60],[140,0,150,20],[140,16,150,24,"nodeType"],[140,24,150,32],[140,27,150,35,"config"],[140,33,150,41],[140,34,150,42,"node"],[140,38,150,35],[140,39,150,47,"name"],[140,43,150,35],[140,44,150,20],[142,0,152,20],[142,16,152,24,"nodeType"],[142,24,152,32],[142,25,152,33,"structure"],[142,34,152,20],[142,36,152,44],[143,0,153,24,"structure"],[143,14,153,24,"structure"],[143,23,153,33],[143,24,153,34,"name"],[143,28,153,33],[143,29,153,24],[143,32,153,42,"processStructure"],[143,48,153,58],[143,49,153,59,"name"],[143,53,153,58],[143,55,153,65,"nodeType"],[143,63,153,58],[143,64,153,24],[144,0,154,21],[144,13,152,20],[144,19,154,27],[145,0,155,24],[145,20,155,30],[145,24,155,34,"Error"],[145,29,155,30],[145,30,155,40],[145,64,155,74,"name"],[145,68,155,40],[145,71,155,81],[145,95,155,30],[145,96,155,24],[146,0,156,21],[147,0,157,17],[148,0,158,13],[149,0,159,9],[151,0,161,8],[151,13,161,15,"structure"],[151,22,161,8],[152,0,162,5],[153,0,143,17],[153,3,143,0]]},"type":"js/module"}]}