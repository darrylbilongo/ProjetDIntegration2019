{"dependencies":[{"name":"./match-graph","data":{"isAsync":false}},{"name":"../tokenizer/const","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var matchGraph = _$$_REQUIRE(_dependencyMap[0], \"./match-graph\");\n\n  var MATCH = matchGraph.MATCH;\n  var MISMATCH = matchGraph.MISMATCH;\n  var DISALLOW_EMPTY = matchGraph.DISALLOW_EMPTY;\n\n  var TYPE = _$$_REQUIRE(_dependencyMap[1], \"../tokenizer/const\").TYPE;\n\n  var STUB = 0;\n  var TOKEN = 1;\n  var OPEN_SYNTAX = 2;\n  var CLOSE_SYNTAX = 3;\n  var EXIT_REASON_MATCH = 'Match';\n  var EXIT_REASON_MISMATCH = 'Mismatch';\n  var EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';\n  var ITERATION_LIMIT = 15000;\n  var totalIterationCount = 0;\n\n  function reverseList(list) {\n    var prev = null;\n    var next = null;\n    var item = list;\n\n    while (item !== null) {\n      next = item.prev;\n      item.prev = prev;\n      prev = item;\n      item = next;\n    }\n\n    return prev;\n  }\n\n  function areStringsEqualCaseInsensitive(testStr, referenceStr) {\n    if (testStr.length !== referenceStr.length) {\n      return false;\n    }\n\n    for (var i = 0; i < testStr.length; i++) {\n      var testCode = testStr.charCodeAt(i);\n      var referenceCode = referenceStr.charCodeAt(i);\n\n      if (testCode >= 0x0041 && testCode <= 0x005A) {\n        testCode = testCode | 32;\n      }\n\n      if (testCode !== referenceCode) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function isCommaContextStart(token) {\n    if (token === null) {\n      return true;\n    }\n\n    return token.type === TYPE.Comma || token.type === TYPE.Function || token.type === TYPE.LeftParenthesis || token.type === TYPE.LeftSquareBracket || token.type === TYPE.LeftCurlyBracket || token.type === TYPE.Delim;\n  }\n\n  function isCommaContextEnd(token) {\n    if (token === null) {\n      return true;\n    }\n\n    return token.type === TYPE.RightParenthesis || token.type === TYPE.RightSquareBracket || token.type === TYPE.RightCurlyBracket || token.type === TYPE.Delim;\n  }\n\n  function internalMatch(tokens, state, syntaxes) {\n    function moveToNextToken() {\n      do {\n        tokenIndex++;\n        token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n      } while (token !== null && (token.type === TYPE.WhiteSpace || token.type === TYPE.Comment));\n    }\n\n    function getNextToken(offset) {\n      var nextIndex = tokenIndex + offset;\n      return nextIndex < tokens.length ? tokens[nextIndex] : null;\n    }\n\n    function stateSnapshotFromSyntax(nextState, prev) {\n      return {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        thenStack: thenStack,\n        tokenIndex: tokenIndex,\n        prev: prev\n      };\n    }\n\n    function pushThenStack(nextState) {\n      thenStack = {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        prev: thenStack\n      };\n    }\n\n    function pushElseStack(nextState) {\n      elseStack = stateSnapshotFromSyntax(nextState, elseStack);\n    }\n\n    function addTokenToMatch() {\n      matchStack = {\n        type: TOKEN,\n        syntax: state.syntax,\n        token: token,\n        prev: matchStack\n      };\n      moveToNextToken();\n      syntaxStash = null;\n\n      if (tokenIndex > longestMatch) {\n        longestMatch = tokenIndex;\n      }\n    }\n\n    function openSyntax() {\n      syntaxStack = {\n        syntax: state.syntax,\n        opts: state.syntax.opts || syntaxStack !== null && syntaxStack.opts || null,\n        prev: syntaxStack\n      };\n      matchStack = {\n        type: OPEN_SYNTAX,\n        syntax: state.syntax,\n        token: matchStack.token,\n        prev: matchStack\n      };\n    }\n\n    function closeSyntax() {\n      if (matchStack.type === OPEN_SYNTAX) {\n        matchStack = matchStack.prev;\n      } else {\n        matchStack = {\n          type: CLOSE_SYNTAX,\n          syntax: syntaxStack.syntax,\n          token: matchStack.token,\n          prev: matchStack\n        };\n      }\n\n      syntaxStack = syntaxStack.prev;\n    }\n\n    var syntaxStack = null;\n    var thenStack = null;\n    var elseStack = null;\n    var syntaxStash = null;\n    var iterationCount = 0;\n    var exitReason = null;\n    var token = null;\n    var tokenIndex = -1;\n    var longestMatch = 0;\n    var matchStack = {\n      type: STUB,\n      syntax: null,\n      token: null,\n      prev: null\n    };\n    moveToNextToken();\n\n    while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {\n      switch (state.type) {\n        case 'Match':\n          if (thenStack === null) {\n            if (token !== null) {\n              if (tokenIndex !== tokens.length - 1 || token.value !== '\\\\0' && token.value !== '\\\\9') {\n                state = MISMATCH;\n                break;\n              }\n            }\n\n            exitReason = EXIT_REASON_MATCH;\n            break;\n          }\n\n          state = thenStack.nextState;\n\n          if (state === DISALLOW_EMPTY) {\n            if (thenStack.matchStack === matchStack) {\n              state = MISMATCH;\n              break;\n            } else {\n              state = MATCH;\n            }\n          }\n\n          while (thenStack.syntaxStack !== syntaxStack) {\n            closeSyntax();\n          }\n\n          thenStack = thenStack.prev;\n          break;\n\n        case 'Mismatch':\n          if (syntaxStash !== null && syntaxStash !== false) {\n            if (elseStack === null || tokenIndex > elseStack.tokenIndex) {\n              elseStack = syntaxStash;\n              syntaxStash = false;\n            }\n          } else if (elseStack === null) {\n            exitReason = EXIT_REASON_MISMATCH;\n            break;\n          }\n\n          state = elseStack.nextState;\n          thenStack = elseStack.thenStack;\n          syntaxStack = elseStack.syntaxStack;\n          matchStack = elseStack.matchStack;\n          tokenIndex = elseStack.tokenIndex;\n          token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n          elseStack = elseStack.prev;\n          break;\n\n        case 'MatchGraph':\n          state = state.match;\n          break;\n\n        case 'If':\n          if (state.else !== MISMATCH) {\n            pushElseStack(state.else);\n          }\n\n          if (state.then !== MATCH) {\n            pushThenStack(state.then);\n          }\n\n          state = state.match;\n          break;\n\n        case 'MatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state,\n            index: 0,\n            mask: 0\n          };\n          break;\n\n        case 'MatchOnceBuffer':\n          var terms = state.syntax.terms;\n\n          if (state.index === terms.length) {\n            if (state.mask === 0 || state.syntax.all) {\n              state = MISMATCH;\n              break;\n            }\n\n            state = MATCH;\n            break;\n          }\n\n          if (state.mask === (1 << terms.length) - 1) {\n            state = MATCH;\n            break;\n          }\n\n          for (; state.index < terms.length; state.index++) {\n            var matchFlag = 1 << state.index;\n\n            if ((state.mask & matchFlag) === 0) {\n              pushElseStack(state);\n              pushThenStack({\n                type: 'AddMatchOnce',\n                syntax: state.syntax,\n                mask: state.mask | matchFlag\n              });\n              state = terms[state.index++];\n              break;\n            }\n          }\n\n          break;\n\n        case 'AddMatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state.syntax,\n            index: 0,\n            mask: state.mask\n          };\n          break;\n\n        case 'Enum':\n          if (token !== null) {\n            var name = token.value.toLowerCase();\n\n            if (name.indexOf('\\\\') !== -1) {\n              name = name.replace(/\\\\[09].*$/, '');\n            }\n\n            if (hasOwnProperty.call(state.map, name)) {\n              state = state.map[name];\n              break;\n            }\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'Generic':\n          var opts = syntaxStack !== null ? syntaxStack.opts : null;\n          var lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));\n\n          if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n\n            state = MATCH;\n          } else {\n            state = MISMATCH;\n          }\n\n          break;\n\n        case 'Type':\n        case 'Property':\n          var syntaxDict = state.type === 'Type' ? 'types' : 'properties';\n          var dictSyntax = hasOwnProperty.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;\n\n          if (!dictSyntax || !dictSyntax.match) {\n            throw new Error('Bad syntax reference: ' + (state.type === 'Type' ? '<' + state.name + '>' : '<\\'' + state.name + '\\'>'));\n          }\n\n          if (syntaxStash !== false && token !== null && state.type === 'Type') {\n            var lowPriorityMatching = state.name === 'custom-ident' && token.type === TYPE.Ident || state.name === 'length' && token.value === '0';\n\n            if (lowPriorityMatching) {\n              if (syntaxStash === null) {\n                syntaxStash = stateSnapshotFromSyntax(state, elseStack);\n              }\n\n              state = MISMATCH;\n              break;\n            }\n          }\n\n          openSyntax();\n          state = dictSyntax.match;\n          break;\n\n        case 'Keyword':\n          var name = state.name;\n\n          if (token !== null) {\n            var keywordName = token.value;\n\n            if (keywordName.indexOf('\\\\') !== -1) {\n              keywordName = keywordName.replace(/\\\\[09].*$/, '');\n            }\n\n            if (areStringsEqualCaseInsensitive(keywordName, name)) {\n              addTokenToMatch();\n              state = MATCH;\n              break;\n            }\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'AtKeyword':\n        case 'Function':\n          if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {\n            addTokenToMatch();\n            state = MATCH;\n            break;\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'Token':\n          if (token !== null && token.value === state.value) {\n            addTokenToMatch();\n            state = MATCH;\n            break;\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'Comma':\n          if (token !== null && token.type === TYPE.Comma) {\n            if (isCommaContextStart(matchStack.token)) {\n              state = MISMATCH;\n            } else {\n              addTokenToMatch();\n              state = isCommaContextEnd(token) ? MISMATCH : MATCH;\n            }\n          } else {\n            state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? MATCH : MISMATCH;\n          }\n\n          break;\n\n        case 'String':\n          var string = '';\n\n          for (var lastTokenIndex = tokenIndex; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {\n            string += tokens[lastTokenIndex].value;\n          }\n\n          if (areStringsEqualCaseInsensitive(string, state.value)) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n\n            state = MATCH;\n          } else {\n            state = MISMATCH;\n          }\n\n          break;\n\n        default:\n          throw new Error('Unknown node type: ' + state.type);\n      }\n    }\n\n    totalIterationCount += iterationCount;\n\n    switch (exitReason) {\n      case null:\n        console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');\n        exitReason = EXIT_REASON_ITERATION_LIMIT;\n        matchStack = null;\n        break;\n\n      case EXIT_REASON_MATCH:\n        while (syntaxStack !== null) {\n          closeSyntax();\n        }\n\n        break;\n\n      default:\n        matchStack = null;\n    }\n\n    return {\n      tokens: tokens,\n      reason: exitReason,\n      iterations: iterationCount,\n      match: matchStack,\n      longestMatch: longestMatch\n    };\n  }\n\n  function matchAsList(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match !== null) {\n      var item = reverseList(matchResult.match).prev;\n      matchResult.match = [];\n\n      while (item !== null) {\n        switch (item.type) {\n          case STUB:\n            break;\n\n          case OPEN_SYNTAX:\n          case CLOSE_SYNTAX:\n            matchResult.match.push({\n              type: item.type,\n              syntax: item.syntax\n            });\n            break;\n\n          default:\n            matchResult.match.push({\n              token: item.token.value,\n              node: item.token.node\n            });\n            break;\n        }\n\n        item = item.prev;\n      }\n    }\n\n    return matchResult;\n  }\n\n  function matchAsTree(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match === null) {\n      return matchResult;\n    }\n\n    var item = matchResult.match;\n    var host = matchResult.match = {\n      syntax: matchGraph.syntax || null,\n      match: []\n    };\n    var hostStack = [host];\n    item = reverseList(item).prev;\n\n    while (item !== null) {\n      switch (item.type) {\n        case OPEN_SYNTAX:\n          host.match.push(host = {\n            syntax: item.syntax,\n            match: []\n          });\n          hostStack.push(host);\n          break;\n\n        case CLOSE_SYNTAX:\n          hostStack.pop();\n          host = hostStack[hostStack.length - 1];\n          break;\n\n        default:\n          host.match.push({\n            syntax: item.syntax || null,\n            token: item.token.value,\n            node: item.token.node\n          });\n      }\n\n      item = item.prev;\n    }\n\n    return matchResult;\n  }\n\n  module.exports = {\n    matchAsList: matchAsList,\n    matchAsTree: matchAsTree,\n    getTotalIterationCount: function getTotalIterationCount() {\n      return totalIterationCount;\n    }\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,21],[2,40,1,38,"hasOwnProperty"],[2,54,1,0],[4,0,2,0],[4,6,2,4,"matchGraph"],[4,16,2,14],[4,19,2,17,"require"],[4,30,2,24],[4,66,2,0],[6,0,3,0],[6,6,3,4,"MATCH"],[6,11,3,9],[6,14,3,12,"matchGraph"],[6,24,3,22],[6,25,3,23,"MATCH"],[6,30,3,0],[7,0,4,0],[7,6,4,4,"MISMATCH"],[7,14,4,12],[7,17,4,15,"matchGraph"],[7,27,4,25],[7,28,4,26,"MISMATCH"],[7,36,4,0],[8,0,5,0],[8,6,5,4,"DISALLOW_EMPTY"],[8,20,5,18],[8,23,5,21,"matchGraph"],[8,33,5,31],[8,34,5,32,"DISALLOW_EMPTY"],[8,48,5,0],[10,0,6,0],[10,6,6,4,"TYPE"],[10,10,6,8],[10,13,6,11,"require"],[10,24,6,18],[10,65,6,11],[10,66,6,41,"TYPE"],[10,70,6,0],[12,0,8,0],[12,6,8,4,"STUB"],[12,10,8,8],[12,13,8,11],[12,14,8,0],[13,0,9,0],[13,6,9,4,"TOKEN"],[13,11,9,9],[13,14,9,12],[13,15,9,0],[14,0,10,0],[14,6,10,4,"OPEN_SYNTAX"],[14,17,10,15],[14,20,10,18],[14,21,10,0],[15,0,11,0],[15,6,11,4,"CLOSE_SYNTAX"],[15,18,11,16],[15,21,11,19],[15,22,11,0],[16,0,13,0],[16,6,13,4,"EXIT_REASON_MATCH"],[16,23,13,21],[16,26,13,24],[16,33,13,0],[17,0,14,0],[17,6,14,4,"EXIT_REASON_MISMATCH"],[17,26,14,24],[17,29,14,27],[17,39,14,0],[18,0,15,0],[18,6,15,4,"EXIT_REASON_ITERATION_LIMIT"],[18,33,15,31],[18,36,15,34],[18,139,15,0],[19,0,17,0],[19,6,17,4,"ITERATION_LIMIT"],[19,21,17,19],[19,24,17,22],[19,29,17,0],[20,0,18,0],[20,6,18,4,"totalIterationCount"],[20,25,18,23],[20,28,18,26],[20,29,18,0],[22,0,20,0],[22,11,20,9,"reverseList"],[22,22,20,0],[22,23,20,21,"list"],[22,27,20,0],[22,29,20,27],[23,0,21,4],[23,8,21,8,"prev"],[23,12,21,12],[23,15,21,15],[23,19,21,4],[24,0,22,4],[24,8,22,8,"next"],[24,12,22,12],[24,15,22,15],[24,19,22,4],[25,0,23,4],[25,8,23,8,"item"],[25,12,23,12],[25,15,23,15,"list"],[25,19,23,4],[27,0,25,4],[27,11,25,11,"item"],[27,15,25,15],[27,20,25,20],[27,24,25,4],[27,26,25,26],[28,0,26,8,"next"],[28,6,26,8,"next"],[28,10,26,12],[28,13,26,15,"item"],[28,17,26,19],[28,18,26,20,"prev"],[28,22,26,8],[29,0,27,8,"item"],[29,6,27,8,"item"],[29,10,27,12],[29,11,27,13,"prev"],[29,15,27,8],[29,18,27,20,"prev"],[29,22,27,8],[30,0,28,8,"prev"],[30,6,28,8,"prev"],[30,10,28,12],[30,13,28,15,"item"],[30,17,28,8],[31,0,29,8,"item"],[31,6,29,8,"item"],[31,10,29,12],[31,13,29,15,"next"],[31,17,29,8],[32,0,30,5],[34,0,32,4],[34,11,32,11,"prev"],[34,15,32,4],[35,0,33,1],[37,0,35,0],[37,11,35,9,"areStringsEqualCaseInsensitive"],[37,41,35,0],[37,42,35,40,"testStr"],[37,49,35,0],[37,51,35,49,"referenceStr"],[37,63,35,0],[37,65,35,63],[38,0,36,4],[38,8,36,8,"testStr"],[38,15,36,15],[38,16,36,16,"length"],[38,22,36,8],[38,27,36,27,"referenceStr"],[38,39,36,39],[38,40,36,40,"length"],[38,46,36,4],[38,48,36,48],[39,0,37,8],[39,13,37,15],[39,18,37,8],[40,0,38,5],[42,0,40,4],[42,9,40,9],[42,13,40,13,"i"],[42,14,40,14],[42,17,40,17],[42,18,40,4],[42,20,40,20,"i"],[42,21,40,21],[42,24,40,24,"testStr"],[42,31,40,31],[42,32,40,32,"length"],[42,38,40,4],[42,40,40,40,"i"],[42,41,40,41],[42,43,40,4],[42,45,40,45],[43,0,41,8],[43,10,41,12,"testCode"],[43,18,41,20],[43,21,41,23,"testStr"],[43,28,41,30],[43,29,41,31,"charCodeAt"],[43,39,41,23],[43,40,41,42,"i"],[43,41,41,23],[43,42,41,8],[44,0,42,8],[44,10,42,12,"referenceCode"],[44,23,42,25],[44,26,42,28,"referenceStr"],[44,38,42,40],[44,39,42,41,"charCodeAt"],[44,49,42,28],[44,50,42,52,"i"],[44,51,42,28],[44,52,42,8],[46,0,45,8],[46,10,45,12,"testCode"],[46,18,45,20],[46,22,45,24],[46,28,45,12],[46,32,45,34,"testCode"],[46,40,45,42],[46,44,45,46],[46,50,45,8],[46,52,45,54],[47,0,46,12,"testCode"],[47,8,46,12,"testCode"],[47,16,46,20],[47,19,46,23,"testCode"],[47,27,46,31],[47,30,46,34],[47,32,46,12],[48,0,47,9],[50,0,49,8],[50,10,49,12,"testCode"],[50,18,49,20],[50,23,49,25,"referenceCode"],[50,36,49,8],[50,38,49,40],[51,0,50,12],[51,15,50,19],[51,20,50,12],[52,0,51,9],[53,0,52,5],[55,0,54,4],[55,11,54,11],[55,15,54,4],[56,0,55,1],[58,0,57,0],[58,11,57,9,"isCommaContextStart"],[58,30,57,0],[58,31,57,29,"token"],[58,36,57,0],[58,38,57,36],[59,0,58,4],[59,8,58,8,"token"],[59,13,58,13],[59,18,58,18],[59,22,58,4],[59,24,58,24],[60,0,59,8],[60,13,59,15],[60,17,59,8],[61,0,60,5],[63,0,62,4],[63,11,63,8,"token"],[63,16,63,13],[63,17,63,14,"type"],[63,21,63,8],[63,26,63,23,"TYPE"],[63,30,63,27],[63,31,63,28,"Comma"],[63,36,63,8],[63,40,64,8,"token"],[63,45,64,13],[63,46,64,14,"type"],[63,50,64,8],[63,55,64,23,"TYPE"],[63,59,64,27],[63,60,64,28,"Function"],[63,68,63,8],[63,72,65,8,"token"],[63,77,65,13],[63,78,65,14,"type"],[63,82,65,8],[63,87,65,23,"TYPE"],[63,91,65,27],[63,92,65,28,"LeftParenthesis"],[63,107,63,8],[63,111,66,8,"token"],[63,116,66,13],[63,117,66,14,"type"],[63,121,66,8],[63,126,66,23,"TYPE"],[63,130,66,27],[63,131,66,28,"LeftSquareBracket"],[63,148,63,8],[63,152,67,8,"token"],[63,157,67,13],[63,158,67,14,"type"],[63,162,67,8],[63,167,67,23,"TYPE"],[63,171,67,27],[63,172,67,28,"LeftCurlyBracket"],[63,188,63,8],[63,192,68,8,"token"],[63,197,68,13],[63,198,68,14,"type"],[63,202,68,8],[63,207,68,23,"TYPE"],[63,211,68,27],[63,212,68,28,"Delim"],[63,217,62,4],[64,0,70,1],[66,0,72,0],[66,11,72,9,"isCommaContextEnd"],[66,28,72,0],[66,29,72,27,"token"],[66,34,72,0],[66,36,72,34],[67,0,73,4],[67,8,73,8,"token"],[67,13,73,13],[67,18,73,18],[67,22,73,4],[67,24,73,24],[68,0,74,8],[68,13,74,15],[68,17,74,8],[69,0,75,5],[71,0,77,4],[71,11,78,8,"token"],[71,16,78,13],[71,17,78,14,"type"],[71,21,78,8],[71,26,78,23,"TYPE"],[71,30,78,27],[71,31,78,28,"RightParenthesis"],[71,47,78,8],[71,51,79,8,"token"],[71,56,79,13],[71,57,79,14,"type"],[71,61,79,8],[71,66,79,23,"TYPE"],[71,70,79,27],[71,71,79,28,"RightSquareBracket"],[71,89,78,8],[71,93,80,8,"token"],[71,98,80,13],[71,99,80,14,"type"],[71,103,80,8],[71,108,80,23,"TYPE"],[71,112,80,27],[71,113,80,28,"RightCurlyBracket"],[71,130,78,8],[71,134,81,8,"token"],[71,139,81,13],[71,140,81,14,"type"],[71,144,81,8],[71,149,81,23,"TYPE"],[71,153,81,27],[71,154,81,28,"Delim"],[71,159,77,4],[72,0,83,1],[74,0,85,0],[74,11,85,9,"internalMatch"],[74,24,85,0],[74,25,85,23,"tokens"],[74,31,85,0],[74,33,85,31,"state"],[74,38,85,0],[74,40,85,38,"syntaxes"],[74,48,85,0],[74,50,85,48],[75,0,86,4],[75,13,86,13,"moveToNextToken"],[75,28,86,4],[75,31,86,31],[76,0,87,8],[76,9,87,11],[77,0,88,12,"tokenIndex"],[77,8,88,12,"tokenIndex"],[77,18,88,22],[78,0,89,12,"token"],[78,8,89,12,"token"],[78,13,89,17],[78,16,89,20,"tokenIndex"],[78,26,89,30],[78,29,89,33,"tokens"],[78,35,89,39],[78,36,89,40,"length"],[78,42,89,20],[78,45,89,49,"tokens"],[78,51,89,55],[78,52,89,56,"tokenIndex"],[78,62,89,55],[78,63,89,20],[78,66,89,70],[78,70,89,12],[79,0,90,9],[79,7,87,8],[79,15,90,17,"token"],[79,20,90,22],[79,25,90,27],[79,29,90,17],[79,34,90,36,"token"],[79,39,90,41],[79,40,90,42,"type"],[79,44,90,36],[79,49,90,51,"TYPE"],[79,53,90,55],[79,54,90,56,"WhiteSpace"],[79,64,90,36],[79,68,90,70,"token"],[79,73,90,75],[79,74,90,76,"type"],[79,78,90,70],[79,83,90,85,"TYPE"],[79,87,90,89],[79,88,90,90,"Comment"],[79,95,90,17],[79,96,87,8],[80,0,91,5],[82,0,93,4],[82,13,93,13,"getNextToken"],[82,25,93,4],[82,26,93,26,"offset"],[82,32,93,4],[82,34,93,34],[83,0,94,8],[83,10,94,12,"nextIndex"],[83,19,94,21],[83,22,94,24,"tokenIndex"],[83,32,94,34],[83,35,94,37,"offset"],[83,41,94,8],[84,0,96,8],[84,13,96,15,"nextIndex"],[84,22,96,24],[84,25,96,27,"tokens"],[84,31,96,33],[84,32,96,34,"length"],[84,38,96,15],[84,41,96,43,"tokens"],[84,47,96,49],[84,48,96,50,"nextIndex"],[84,57,96,49],[84,58,96,15],[84,61,96,63],[84,65,96,8],[85,0,97,5],[87,0,99,4],[87,13,99,13,"stateSnapshotFromSyntax"],[87,36,99,4],[87,37,99,37,"nextState"],[87,46,99,4],[87,48,99,48,"prev"],[87,52,99,4],[87,54,99,54],[88,0,100,8],[88,13,100,15],[89,0,101,12,"nextState"],[89,8,101,12,"nextState"],[89,17,101,21],[89,19,101,23,"nextState"],[89,28,100,15],[90,0,102,12,"matchStack"],[90,8,102,12,"matchStack"],[90,18,102,22],[90,20,102,24,"matchStack"],[90,30,100,15],[91,0,103,12,"syntaxStack"],[91,8,103,12,"syntaxStack"],[91,19,103,23],[91,21,103,25,"syntaxStack"],[91,32,100,15],[92,0,104,12,"thenStack"],[92,8,104,12,"thenStack"],[92,17,104,21],[92,19,104,23,"thenStack"],[92,28,100,15],[93,0,105,12,"tokenIndex"],[93,8,105,12,"tokenIndex"],[93,18,105,22],[93,20,105,24,"tokenIndex"],[93,30,100,15],[94,0,106,12,"prev"],[94,8,106,12,"prev"],[94,12,106,16],[94,14,106,18,"prev"],[95,0,100,15],[95,7,100,8],[96,0,108,5],[98,0,110,4],[98,13,110,13,"pushThenStack"],[98,26,110,4],[98,27,110,27,"nextState"],[98,36,110,4],[98,38,110,38],[99,0,111,8,"thenStack"],[99,6,111,8,"thenStack"],[99,15,111,17],[99,18,111,20],[100,0,112,12,"nextState"],[100,8,112,12,"nextState"],[100,17,112,21],[100,19,112,23,"nextState"],[100,28,111,20],[101,0,113,12,"matchStack"],[101,8,113,12,"matchStack"],[101,18,113,22],[101,20,113,24,"matchStack"],[101,30,111,20],[102,0,114,12,"syntaxStack"],[102,8,114,12,"syntaxStack"],[102,19,114,23],[102,21,114,25,"syntaxStack"],[102,32,111,20],[103,0,115,12,"prev"],[103,8,115,12,"prev"],[103,12,115,16],[103,14,115,18,"thenStack"],[104,0,111,20],[104,7,111,8],[105,0,117,5],[107,0,119,4],[107,13,119,13,"pushElseStack"],[107,26,119,4],[107,27,119,27,"nextState"],[107,36,119,4],[107,38,119,38],[108,0,120,8,"elseStack"],[108,6,120,8,"elseStack"],[108,15,120,17],[108,18,120,20,"stateSnapshotFromSyntax"],[108,41,120,43],[108,42,120,44,"nextState"],[108,51,120,43],[108,53,120,55,"elseStack"],[108,62,120,43],[108,63,120,8],[109,0,121,5],[111,0,123,4],[111,13,123,13,"addTokenToMatch"],[111,28,123,4],[111,31,123,31],[112,0,124,8,"matchStack"],[112,6,124,8,"matchStack"],[112,16,124,18],[112,19,124,21],[113,0,125,12,"type"],[113,8,125,12,"type"],[113,12,125,16],[113,14,125,18,"TOKEN"],[113,19,124,21],[114,0,126,12,"syntax"],[114,8,126,12,"syntax"],[114,14,126,18],[114,16,126,20,"state"],[114,21,126,25],[114,22,126,26,"syntax"],[114,28,124,21],[115,0,127,12,"token"],[115,8,127,12,"token"],[115,13,127,17],[115,15,127,19,"token"],[115,20,124,21],[116,0,128,12,"prev"],[116,8,128,12,"prev"],[116,12,128,16],[116,14,128,18,"matchStack"],[117,0,124,21],[117,7,124,8],[118,0,131,8,"moveToNextToken"],[118,6,131,8,"moveToNextToken"],[118,21,131,23],[119,0,132,8,"syntaxStash"],[119,6,132,8,"syntaxStash"],[119,17,132,19],[119,20,132,22],[119,24,132,8],[121,0,134,8],[121,10,134,12,"tokenIndex"],[121,20,134,22],[121,23,134,25,"longestMatch"],[121,35,134,8],[121,37,134,39],[122,0,135,12,"longestMatch"],[122,8,135,12,"longestMatch"],[122,20,135,24],[122,23,135,27,"tokenIndex"],[122,33,135,12],[123,0,136,9],[124,0,137,5],[126,0,139,4],[126,13,139,13,"openSyntax"],[126,23,139,4],[126,26,139,26],[127,0,140,8,"syntaxStack"],[127,6,140,8,"syntaxStack"],[127,17,140,19],[127,20,140,22],[128,0,141,12,"syntax"],[128,8,141,12,"syntax"],[128,14,141,18],[128,16,141,20,"state"],[128,21,141,25],[128,22,141,26,"syntax"],[128,28,140,22],[129,0,142,12,"opts"],[129,8,142,12,"opts"],[129,12,142,16],[129,14,142,18,"state"],[129,19,142,23],[129,20,142,24,"syntax"],[129,26,142,18],[129,27,142,31,"opts"],[129,31,142,18],[129,35,142,40,"syntaxStack"],[129,46,142,51],[129,51,142,56],[129,55,142,40],[129,59,142,64,"syntaxStack"],[129,70,142,75],[129,71,142,76,"opts"],[129,75,142,18],[129,79,142,85],[129,83,140,22],[130,0,143,12,"prev"],[130,8,143,12,"prev"],[130,12,143,16],[130,14,143,18,"syntaxStack"],[131,0,140,22],[131,7,140,8],[132,0,146,8,"matchStack"],[132,6,146,8,"matchStack"],[132,16,146,18],[132,19,146,21],[133,0,147,12,"type"],[133,8,147,12,"type"],[133,12,147,16],[133,14,147,18,"OPEN_SYNTAX"],[133,25,146,21],[134,0,148,12,"syntax"],[134,8,148,12,"syntax"],[134,14,148,18],[134,16,148,20,"state"],[134,21,148,25],[134,22,148,26,"syntax"],[134,28,146,21],[135,0,149,12,"token"],[135,8,149,12,"token"],[135,13,149,17],[135,15,149,19,"matchStack"],[135,25,149,29],[135,26,149,30,"token"],[135,31,146,21],[136,0,150,12,"prev"],[136,8,150,12,"prev"],[136,12,150,16],[136,14,150,18,"matchStack"],[137,0,146,21],[137,7,146,8],[138,0,152,5],[140,0,154,4],[140,13,154,13,"closeSyntax"],[140,24,154,4],[140,27,154,27],[141,0,155,8],[141,10,155,12,"matchStack"],[141,20,155,22],[141,21,155,23,"type"],[141,25,155,12],[141,30,155,32,"OPEN_SYNTAX"],[141,41,155,8],[141,43,155,45],[142,0,156,12,"matchStack"],[142,8,156,12,"matchStack"],[142,18,156,22],[142,21,156,25,"matchStack"],[142,31,156,35],[142,32,156,36,"prev"],[142,36,156,12],[143,0,157,9],[143,7,155,8],[143,13,157,15],[144,0,158,12,"matchStack"],[144,8,158,12,"matchStack"],[144,18,158,22],[144,21,158,25],[145,0,159,16,"type"],[145,10,159,16,"type"],[145,14,159,20],[145,16,159,22,"CLOSE_SYNTAX"],[145,28,158,25],[146,0,160,16,"syntax"],[146,10,160,16,"syntax"],[146,16,160,22],[146,18,160,24,"syntaxStack"],[146,29,160,35],[146,30,160,36,"syntax"],[146,36,158,25],[147,0,161,16,"token"],[147,10,161,16,"token"],[147,15,161,21],[147,17,161,23,"matchStack"],[147,27,161,33],[147,28,161,34,"token"],[147,33,158,25],[148,0,162,16,"prev"],[148,10,162,16,"prev"],[148,14,162,20],[148,16,162,22,"matchStack"],[149,0,158,25],[149,9,158,12],[150,0,164,9],[152,0,166,8,"syntaxStack"],[152,6,166,8,"syntaxStack"],[152,17,166,19],[152,20,166,22,"syntaxStack"],[152,31,166,33],[152,32,166,34,"prev"],[152,36,166,8],[153,0,167,5],[155,0,169,4],[155,8,169,8,"syntaxStack"],[155,19,169,19],[155,22,169,22],[155,26,169,4],[156,0,170,4],[156,8,170,8,"thenStack"],[156,17,170,17],[156,20,170,20],[156,24,170,4],[157,0,171,4],[157,8,171,8,"elseStack"],[157,17,171,17],[157,20,171,20],[157,24,171,4],[158,0,176,4],[158,8,176,8,"syntaxStash"],[158,19,176,19],[158,22,176,22],[158,26,176,4],[159,0,178,4],[159,8,178,8,"iterationCount"],[159,22,178,22],[159,25,178,25],[159,26,178,4],[160,0,179,4],[160,8,179,8,"exitReason"],[160,18,179,18],[160,21,179,21],[160,25,179,4],[161,0,181,4],[161,8,181,8,"token"],[161,13,181,13],[161,16,181,16],[161,20,181,4],[162,0,182,4],[162,8,182,8,"tokenIndex"],[162,18,182,18],[162,21,182,21],[162,22,182,22],[162,23,182,4],[163,0,183,4],[163,8,183,8,"longestMatch"],[163,20,183,20],[163,23,183,23],[163,24,183,4],[164,0,184,4],[164,8,184,8,"matchStack"],[164,18,184,18],[164,21,184,21],[165,0,185,8,"type"],[165,6,185,8,"type"],[165,10,185,12],[165,12,185,14,"STUB"],[165,16,184,21],[166,0,186,8,"syntax"],[166,6,186,8,"syntax"],[166,12,186,14],[166,14,186,16],[166,18,184,21],[167,0,187,8,"token"],[167,6,187,8,"token"],[167,11,187,13],[167,13,187,15],[167,17,184,21],[168,0,188,8,"prev"],[168,6,188,8,"prev"],[168,10,188,12],[168,12,188,14],[169,0,184,21],[169,5,184,4],[170,0,191,4,"moveToNextToken"],[170,4,191,4,"moveToNextToken"],[170,19,191,19],[172,0,193,4],[172,11,193,11,"exitReason"],[172,21,193,21],[172,26,193,26],[172,30,193,11],[172,34,193,34],[172,36,193,36,"iterationCount"],[172,50,193,34],[172,53,193,53,"ITERATION_LIMIT"],[172,68,193,4],[172,70,193,70],[173,0,211,8],[173,14,211,16,"state"],[173,19,211,21],[173,20,211,22,"type"],[173,24,211,8],[174,0,212,12],[174,13,212,17],[174,20,212,12],[175,0,213,16],[175,14,213,20,"thenStack"],[175,23,213,29],[175,28,213,34],[175,32,213,16],[175,34,213,40],[176,0,215,20],[176,16,215,24,"token"],[176,21,215,29],[176,26,215,34],[176,30,215,20],[176,32,215,40],[177,0,217,24],[177,18,217,28,"tokenIndex"],[177,28,217,38],[177,33,217,43,"tokens"],[177,39,217,49],[177,40,217,50,"length"],[177,46,217,43],[177,49,217,59],[177,50,217,28],[177,54,217,65,"token"],[177,59,217,70],[177,60,217,71,"value"],[177,65,217,65],[177,70,217,81],[177,75,217,65],[177,79,217,90,"token"],[177,84,217,95],[177,85,217,96,"value"],[177,90,217,90],[177,95,217,106],[177,100,217,24],[177,102,217,114],[178,0,218,28,"state"],[178,16,218,28,"state"],[178,21,218,33],[178,24,218,36,"MISMATCH"],[178,32,218,28],[179,0,219,28],[180,0,220,25],[181,0,221,21],[183,0,224,20,"exitReason"],[183,12,224,20,"exitReason"],[183,22,224,30],[183,25,224,33,"EXIT_REASON_MATCH"],[183,42,224,20],[184,0,225,20],[185,0,226,17],[187,0,229,16,"state"],[187,10,229,16,"state"],[187,15,229,21],[187,18,229,24,"thenStack"],[187,27,229,33],[187,28,229,34,"nextState"],[187,37,229,16],[189,0,232,16],[189,14,232,20,"state"],[189,19,232,25],[189,24,232,30,"DISALLOW_EMPTY"],[189,38,232,16],[189,40,232,46],[190,0,233,20],[190,16,233,24,"thenStack"],[190,25,233,33],[190,26,233,34,"matchStack"],[190,36,233,24],[190,41,233,49,"matchStack"],[190,51,233,20],[190,53,233,61],[191,0,234,24,"state"],[191,14,234,24,"state"],[191,19,234,29],[191,22,234,32,"MISMATCH"],[191,30,234,24],[192,0,235,24],[193,0,236,21],[193,13,233,20],[193,19,236,27],[194,0,237,24,"state"],[194,14,237,24,"state"],[194,19,237,29],[194,22,237,32,"MATCH"],[194,27,237,24],[195,0,238,21],[196,0,239,17],[198,0,242,16],[198,17,242,23,"thenStack"],[198,26,242,32],[198,27,242,33,"syntaxStack"],[198,38,242,23],[198,43,242,49,"syntaxStack"],[198,54,242,16],[198,56,242,62],[199,0,243,20,"closeSyntax"],[199,12,243,20,"closeSyntax"],[199,23,243,31],[200,0,244,17],[202,0,247,16,"thenStack"],[202,10,247,16,"thenStack"],[202,19,247,25],[202,22,247,28,"thenStack"],[202,31,247,37],[202,32,247,38,"prev"],[202,36,247,16],[203,0,248,16],[205,0,250,12],[205,13,250,17],[205,23,250,12],[206,0,252,16],[206,14,252,20,"syntaxStash"],[206,25,252,31],[206,30,252,36],[206,34,252,20],[206,38,252,44,"syntaxStash"],[206,49,252,55],[206,54,252,60],[206,59,252,16],[206,61,252,67],[207,0,254,20],[207,16,254,24,"elseStack"],[207,25,254,33],[207,30,254,38],[207,34,254,24],[207,38,254,46,"tokenIndex"],[207,48,254,56],[207,51,254,59,"elseStack"],[207,60,254,68],[207,61,254,69,"tokenIndex"],[207,71,254,20],[207,73,254,81],[208,0,256,24,"elseStack"],[208,14,256,24,"elseStack"],[208,23,256,33],[208,26,256,36,"syntaxStash"],[208,37,256,24],[209,0,257,24,"syntaxStash"],[209,14,257,24,"syntaxStash"],[209,25,257,35],[209,28,257,38],[209,33,257,24],[210,0,258,21],[211,0,259,17],[211,11,252,16],[211,17,259,23],[211,21,259,27,"elseStack"],[211,30,259,36],[211,35,259,41],[211,39,259,23],[211,41,259,47],[212,0,262,20,"exitReason"],[212,12,262,20,"exitReason"],[212,22,262,30],[212,25,262,33,"EXIT_REASON_MISMATCH"],[212,45,262,20],[213,0,263,20],[214,0,264,17],[216,0,267,16,"state"],[216,10,267,16,"state"],[216,15,267,21],[216,18,267,24,"elseStack"],[216,27,267,33],[216,28,267,34,"nextState"],[216,37,267,16],[217,0,270,16,"thenStack"],[217,10,270,16,"thenStack"],[217,19,270,25],[217,22,270,28,"elseStack"],[217,31,270,37],[217,32,270,38,"thenStack"],[217,41,270,16],[218,0,271,16,"syntaxStack"],[218,10,271,16,"syntaxStack"],[218,21,271,27],[218,24,271,30,"elseStack"],[218,33,271,39],[218,34,271,40,"syntaxStack"],[218,45,271,16],[219,0,272,16,"matchStack"],[219,10,272,16,"matchStack"],[219,20,272,26],[219,23,272,29,"elseStack"],[219,32,272,38],[219,33,272,39,"matchStack"],[219,43,272,16],[220,0,273,16,"tokenIndex"],[220,10,273,16,"tokenIndex"],[220,20,273,26],[220,23,273,29,"elseStack"],[220,32,273,38],[220,33,273,39,"tokenIndex"],[220,43,273,16],[221,0,274,16,"token"],[221,10,274,16,"token"],[221,15,274,21],[221,18,274,24,"tokenIndex"],[221,28,274,34],[221,31,274,37,"tokens"],[221,37,274,43],[221,38,274,44,"length"],[221,44,274,24],[221,47,274,53,"tokens"],[221,53,274,59],[221,54,274,60,"tokenIndex"],[221,64,274,59],[221,65,274,24],[221,68,274,74],[221,72,274,16],[222,0,277,16,"elseStack"],[222,10,277,16,"elseStack"],[222,19,277,25],[222,22,277,28,"elseStack"],[222,31,277,37],[222,32,277,38,"prev"],[222,36,277,16],[223,0,278,16],[225,0,280,12],[225,13,280,17],[225,25,280,12],[226,0,281,16,"state"],[226,10,281,16,"state"],[226,15,281,21],[226,18,281,24,"state"],[226,23,281,29],[226,24,281,30,"match"],[226,29,281,16],[227,0,282,16],[229,0,284,12],[229,13,284,17],[229,17,284,12],[230,0,287,16],[230,14,287,20,"state"],[230,19,287,25],[230,20,287,26,"else"],[230,24,287,20],[230,29,287,35,"MISMATCH"],[230,37,287,16],[230,39,287,45],[231,0,288,20,"pushElseStack"],[231,12,288,20,"pushElseStack"],[231,25,288,33],[231,26,288,34,"state"],[231,31,288,39],[231,32,288,40,"else"],[231,36,288,33],[231,37,288,20],[232,0,289,17],[234,0,291,16],[234,14,291,20,"state"],[234,19,291,25],[234,20,291,26,"then"],[234,24,291,20],[234,29,291,35,"MATCH"],[234,34,291,16],[234,36,291,42],[235,0,292,20,"pushThenStack"],[235,12,292,20,"pushThenStack"],[235,25,292,33],[235,26,292,34,"state"],[235,31,292,39],[235,32,292,40,"then"],[235,36,292,33],[235,37,292,20],[236,0,293,17],[238,0,295,16,"state"],[238,10,295,16,"state"],[238,15,295,21],[238,18,295,24,"state"],[238,23,295,29],[238,24,295,30,"match"],[238,29,295,16],[239,0,296,16],[241,0,298,12],[241,13,298,17],[241,24,298,12],[242,0,299,16,"state"],[242,10,299,16,"state"],[242,15,299,21],[242,18,299,24],[243,0,300,20,"type"],[243,12,300,20,"type"],[243,16,300,24],[243,18,300,26],[243,35,299,24],[244,0,301,20,"syntax"],[244,12,301,20,"syntax"],[244,18,301,26],[244,20,301,28,"state"],[244,25,299,24],[245,0,302,20,"index"],[245,12,302,20,"index"],[245,17,302,25],[245,19,302,27],[245,20,299,24],[246,0,303,20,"mask"],[246,12,303,20,"mask"],[246,16,303,24],[246,18,303,26],[247,0,299,24],[247,11,299,16],[248,0,305,16],[250,0,307,12],[250,13,307,17],[250,30,307,12],[251,0,308,16],[251,14,308,20,"terms"],[251,19,308,25],[251,22,308,28,"state"],[251,27,308,33],[251,28,308,34,"syntax"],[251,34,308,28],[251,35,308,41,"terms"],[251,40,308,16],[253,0,310,16],[253,14,310,20,"state"],[253,19,310,25],[253,20,310,26,"index"],[253,25,310,20],[253,30,310,36,"terms"],[253,35,310,41],[253,36,310,42,"length"],[253,42,310,16],[253,44,310,50],[254,0,312,20],[254,16,312,24,"state"],[254,21,312,29],[254,22,312,30,"mask"],[254,26,312,24],[254,31,312,39],[254,32,312,24],[254,36,312,44,"state"],[254,41,312,49],[254,42,312,50,"syntax"],[254,48,312,44],[254,49,312,57,"all"],[254,52,312,20],[254,54,312,62],[255,0,313,24,"state"],[255,14,313,24,"state"],[255,19,313,29],[255,22,313,32,"MISMATCH"],[255,30,313,24],[256,0,314,24],[257,0,315,21],[259,0,318,20,"state"],[259,12,318,20,"state"],[259,17,318,25],[259,20,318,28,"MATCH"],[259,25,318,20],[260,0,319,20],[261,0,320,17],[263,0,323,16],[263,14,323,20,"state"],[263,19,323,25],[263,20,323,26,"mask"],[263,24,323,20],[263,29,323,35],[263,30,323,36],[263,35,323,41,"terms"],[263,40,323,46],[263,41,323,47,"length"],[263,47,323,35],[263,51,323,57],[263,52,323,16],[263,54,323,60],[264,0,324,20,"state"],[264,12,324,20,"state"],[264,17,324,25],[264,20,324,28,"MATCH"],[264,25,324,20],[265,0,325,20],[266,0,326,17],[268,0,328,16],[268,17,328,23,"state"],[268,22,328,28],[268,23,328,29,"index"],[268,28,328,23],[268,31,328,37,"terms"],[268,36,328,42],[268,37,328,43,"length"],[268,43,328,16],[268,45,328,51,"state"],[268,50,328,56],[268,51,328,57,"index"],[268,56,328,51],[268,58,328,16],[268,60,328,66],[269,0,329,20],[269,16,329,24,"matchFlag"],[269,25,329,33],[269,28,329,36],[269,33,329,41,"state"],[269,38,329,46],[269,39,329,47,"index"],[269,44,329,20],[271,0,331,20],[271,16,331,24],[271,17,331,25,"state"],[271,22,331,30],[271,23,331,31,"mask"],[271,27,331,25],[271,30,331,38,"matchFlag"],[271,39,331,24],[271,45,331,53],[271,46,331,20],[271,48,331,56],[272,0,334,24,"pushElseStack"],[272,14,334,24,"pushElseStack"],[272,27,334,37],[272,28,334,38,"state"],[272,33,334,37],[272,34,334,24],[273,0,335,24,"pushThenStack"],[273,14,335,24,"pushThenStack"],[273,27,335,37],[273,28,335,38],[274,0,336,28,"type"],[274,16,336,28,"type"],[274,20,336,32],[274,22,336,34],[274,36,335,38],[275,0,337,28,"syntax"],[275,16,337,28,"syntax"],[275,22,337,34],[275,24,337,36,"state"],[275,29,337,41],[275,30,337,42,"syntax"],[275,36,335,38],[276,0,338,28,"mask"],[276,16,338,28,"mask"],[276,20,338,32],[276,22,338,34,"state"],[276,27,338,39],[276,28,338,40,"mask"],[276,32,338,34],[276,35,338,47,"matchFlag"],[277,0,335,38],[277,15,335,37],[277,16,335,24],[278,0,342,24,"state"],[278,14,342,24,"state"],[278,19,342,29],[278,22,342,32,"terms"],[278,27,342,37],[278,28,342,38,"state"],[278,33,342,43],[278,34,342,44,"index"],[278,39,342,38],[278,41,342,37],[278,42,342,24],[279,0,343,24],[280,0,344,21],[281,0,345,17],[283,0,346,16],[285,0,348,12],[285,13,348,17],[285,27,348,12],[286,0,349,16,"state"],[286,10,349,16,"state"],[286,15,349,21],[286,18,349,24],[287,0,350,20,"type"],[287,12,350,20,"type"],[287,16,350,24],[287,18,350,26],[287,35,349,24],[288,0,351,20,"syntax"],[288,12,351,20,"syntax"],[288,18,351,26],[288,20,351,28,"state"],[288,25,351,33],[288,26,351,34,"syntax"],[288,32,349,24],[289,0,352,20,"index"],[289,12,352,20,"index"],[289,17,352,25],[289,19,352,27],[289,20,349,24],[290,0,353,20,"mask"],[290,12,353,20,"mask"],[290,16,353,24],[290,18,353,26,"state"],[290,23,353,31],[290,24,353,32,"mask"],[291,0,349,24],[291,11,349,16],[292,0,355,16],[294,0,357,12],[294,13,357,17],[294,19,357,12],[295,0,358,16],[295,14,358,20,"token"],[295,19,358,25],[295,24,358,30],[295,28,358,16],[295,30,358,36],[296,0,359,20],[296,16,359,24,"name"],[296,20,359,28],[296,23,359,31,"token"],[296,28,359,36],[296,29,359,37,"value"],[296,34,359,31],[296,35,359,43,"toLowerCase"],[296,46,359,31],[296,48,359,20],[298,0,362,20],[298,16,362,24,"name"],[298,20,362,28],[298,21,362,29,"indexOf"],[298,28,362,24],[298,29,362,37],[298,33,362,24],[298,39,362,47],[298,40,362,48],[298,41,362,20],[298,43,362,51],[299,0,363,24,"name"],[299,14,363,24,"name"],[299,18,363,28],[299,21,363,31,"name"],[299,25,363,35],[299,26,363,36,"replace"],[299,33,363,31],[299,34,363,44],[299,45,363,31],[299,47,363,57],[299,49,363,31],[299,50,363,24],[300,0,364,21],[302,0,366,20],[302,16,366,24,"hasOwnProperty"],[302,30,366,38],[302,31,366,39,"call"],[302,35,366,24],[302,36,366,44,"state"],[302,41,366,49],[302,42,366,50,"map"],[302,45,366,24],[302,47,366,55,"name"],[302,51,366,24],[302,52,366,20],[302,54,366,62],[303,0,367,24,"state"],[303,14,367,24,"state"],[303,19,367,29],[303,22,367,32,"state"],[303,27,367,37],[303,28,367,38,"map"],[303,31,367,32],[303,32,367,42,"name"],[303,36,367,32],[303,37,367,24],[304,0,368,24],[305,0,369,21],[306,0,370,17],[308,0,372,16,"state"],[308,10,372,16,"state"],[308,15,372,21],[308,18,372,24,"MISMATCH"],[308,26,372,16],[309,0,373,16],[311,0,375,12],[311,13,375,17],[311,22,375,12],[312,0,376,16],[312,14,376,20,"opts"],[312,18,376,24],[312,21,376,27,"syntaxStack"],[312,32,376,38],[312,37,376,43],[312,41,376,27],[312,44,376,50,"syntaxStack"],[312,55,376,61],[312,56,376,62,"opts"],[312,60,376,27],[312,63,376,69],[312,67,376,16],[313,0,377,16],[313,14,377,20,"lastTokenIndex"],[313,28,377,34],[313,31,377,37,"tokenIndex"],[313,41,377,47],[313,44,377,50,"Math"],[313,48,377,54],[313,49,377,55,"floor"],[313,54,377,50],[313,55,377,61,"state"],[313,60,377,66],[313,61,377,67,"fn"],[313,63,377,61],[313,64,377,70,"token"],[313,69,377,61],[313,71,377,77,"getNextToken"],[313,83,377,61],[313,85,377,91,"opts"],[313,89,377,61],[313,90,377,50],[313,91,377,16],[315,0,379,16],[315,14,379,20],[315,15,379,21,"isNaN"],[315,20,379,26],[315,21,379,27,"lastTokenIndex"],[315,35,379,26],[315,36,379,20],[315,40,379,46,"lastTokenIndex"],[315,54,379,60],[315,57,379,63,"tokenIndex"],[315,67,379,16],[315,69,379,75],[316,0,380,20],[316,19,380,27,"tokenIndex"],[316,29,380,37],[316,32,380,40,"lastTokenIndex"],[316,46,380,20],[316,48,380,56],[317,0,381,24,"addTokenToMatch"],[317,14,381,24,"addTokenToMatch"],[317,29,381,39],[318,0,382,21],[320,0,384,20,"state"],[320,12,384,20,"state"],[320,17,384,25],[320,20,384,28,"MATCH"],[320,25,384,20],[321,0,385,17],[321,11,379,16],[321,17,385,23],[322,0,386,20,"state"],[322,12,386,20,"state"],[322,17,386,25],[322,20,386,28,"MISMATCH"],[322,28,386,20],[323,0,387,17],[325,0,389,16],[327,0,391,12],[327,13,391,17],[327,19,391,12],[328,0,392,12],[328,13,392,17],[328,23,392,12],[329,0,393,16],[329,14,393,20,"syntaxDict"],[329,24,393,30],[329,27,393,33,"state"],[329,32,393,38],[329,33,393,39,"type"],[329,37,393,33],[329,42,393,48],[329,48,393,33],[329,51,393,57],[329,58,393,33],[329,61,393,67],[329,73,393,16],[330,0,394,16],[330,14,394,20,"dictSyntax"],[330,24,394,30],[330,27,394,33,"hasOwnProperty"],[330,41,394,47],[330,42,394,48,"call"],[330,46,394,33],[330,47,394,53,"syntaxes"],[330,55,394,33],[330,57,394,63,"syntaxDict"],[330,67,394,33],[330,71,394,77,"syntaxes"],[330,79,394,85],[330,80,394,86,"syntaxDict"],[330,90,394,85],[330,91,394,77],[330,92,394,98,"state"],[330,97,394,103],[330,98,394,104,"name"],[330,102,394,77],[330,103,394,33],[330,106,394,112],[330,110,394,16],[332,0,396,16],[332,14,396,20],[332,15,396,21,"dictSyntax"],[332,25,396,20],[332,29,396,35],[332,30,396,36,"dictSyntax"],[332,40,396,46],[332,41,396,47,"match"],[332,46,396,16],[332,48,396,54],[333,0,397,20],[333,18,397,26],[333,22,397,30,"Error"],[333,27,397,26],[333,28,398,24],[333,56,399,25,"state"],[333,61,399,30],[333,62,399,31,"type"],[333,66,399,25],[333,71,399,40],[333,77,399,25],[333,80,400,30],[333,86,400,36,"state"],[333,91,400,41],[333,92,400,42,"name"],[333,96,400,30],[333,99,400,49],[333,102,399,25],[333,105,401,30],[333,113,401,38,"state"],[333,118,401,43],[333,119,401,44,"name"],[333,123,401,30],[333,126,401,51],[333,131,398,24],[333,132,397,26],[333,133,397,20],[334,0,403,17],[336,0,406,16],[336,14,406,20,"syntaxStash"],[336,25,406,31],[336,30,406,36],[336,35,406,20],[336,39,406,45,"token"],[336,44,406,50],[336,49,406,55],[336,53,406,20],[336,57,406,63,"state"],[336,62,406,68],[336,63,406,69,"type"],[336,67,406,63],[336,72,406,78],[336,78,406,16],[336,80,406,86],[337,0,407,20],[337,16,407,24,"lowPriorityMatching"],[337,35,407,43],[337,38,411,25,"state"],[337,43,411,30],[337,44,411,31,"name"],[337,48,411,25],[337,53,411,40],[337,67,411,25],[337,71,411,58,"token"],[337,76,411,63],[337,77,411,64,"type"],[337,81,411,58],[337,86,411,73,"TYPE"],[337,90,411,77],[337,91,411,78,"Ident"],[337,96,411,24],[337,100,416,25,"state"],[337,105,416,30],[337,106,416,31,"name"],[337,110,416,25],[337,115,416,40],[337,123,416,25],[337,127,416,52,"token"],[337,132,416,57],[337,133,416,58,"value"],[337,138,416,52],[337,143,416,68],[337,146,407,20],[339,0,418,20],[339,16,418,24,"lowPriorityMatching"],[339,35,418,20],[339,37,418,45],[340,0,419,24],[340,18,419,28,"syntaxStash"],[340,29,419,39],[340,34,419,44],[340,38,419,24],[340,40,419,50],[341,0,420,28,"syntaxStash"],[341,16,420,28,"syntaxStash"],[341,27,420,39],[341,30,420,42,"stateSnapshotFromSyntax"],[341,53,420,65],[341,54,420,66,"state"],[341,59,420,65],[341,61,420,73,"elseStack"],[341,70,420,65],[341,71,420,28],[342,0,421,25],[344,0,423,24,"state"],[344,14,423,24,"state"],[344,19,423,29],[344,22,423,32,"MISMATCH"],[344,30,423,24],[345,0,424,24],[346,0,425,21],[347,0,426,17],[349,0,428,16,"openSyntax"],[349,10,428,16,"openSyntax"],[349,20,428,26],[350,0,429,16,"state"],[350,10,429,16,"state"],[350,15,429,21],[350,18,429,24,"dictSyntax"],[350,28,429,34],[350,29,429,35,"match"],[350,34,429,16],[351,0,430,16],[353,0,432,12],[353,13,432,17],[353,22,432,12],[354,0,433,16],[354,14,433,20,"name"],[354,18,433,24],[354,21,433,27,"state"],[354,26,433,32],[354,27,433,33,"name"],[354,31,433,16],[356,0,435,16],[356,14,435,20,"token"],[356,19,435,25],[356,24,435,30],[356,28,435,16],[356,30,435,36],[357,0,436,20],[357,16,436,24,"keywordName"],[357,27,436,35],[357,30,436,38,"token"],[357,35,436,43],[357,36,436,44,"value"],[357,41,436,20],[359,0,439,20],[359,16,439,24,"keywordName"],[359,27,439,35],[359,28,439,36,"indexOf"],[359,35,439,24],[359,36,439,44],[359,40,439,24],[359,46,439,54],[359,47,439,55],[359,48,439,20],[359,50,439,58],[360,0,440,24,"keywordName"],[360,14,440,24,"keywordName"],[360,25,440,35],[360,28,440,38,"keywordName"],[360,39,440,49],[360,40,440,50,"replace"],[360,47,440,38],[360,48,440,58],[360,59,440,38],[360,61,440,71],[360,63,440,38],[360,64,440,24],[361,0,441,21],[363,0,443,20],[363,16,443,24,"areStringsEqualCaseInsensitive"],[363,46,443,54],[363,47,443,55,"keywordName"],[363,58,443,54],[363,60,443,68,"name"],[363,64,443,54],[363,65,443,20],[363,67,443,75],[364,0,444,24,"addTokenToMatch"],[364,14,444,24,"addTokenToMatch"],[364,29,444,39],[365,0,445,24,"state"],[365,14,445,24,"state"],[365,19,445,29],[365,22,445,32,"MATCH"],[365,27,445,24],[366,0,446,24],[367,0,447,21],[368,0,448,17],[370,0,450,16,"state"],[370,10,450,16,"state"],[370,15,450,21],[370,18,450,24,"MISMATCH"],[370,26,450,16],[371,0,451,16],[373,0,453,12],[373,13,453,17],[373,24,453,12],[374,0,454,12],[374,13,454,17],[374,23,454,12],[375,0,455,16],[375,14,455,20,"token"],[375,19,455,25],[375,24,455,30],[375,28,455,20],[375,32,455,38,"areStringsEqualCaseInsensitive"],[375,62,455,68],[375,63,455,69,"token"],[375,68,455,74],[375,69,455,75,"value"],[375,74,455,68],[375,76,455,82,"state"],[375,81,455,87],[375,82,455,88,"name"],[375,86,455,68],[375,87,455,16],[375,89,455,95],[376,0,456,20,"addTokenToMatch"],[376,12,456,20,"addTokenToMatch"],[376,27,456,35],[377,0,457,20,"state"],[377,12,457,20,"state"],[377,17,457,25],[377,20,457,28,"MATCH"],[377,25,457,20],[378,0,458,20],[379,0,459,17],[381,0,461,16,"state"],[381,10,461,16,"state"],[381,15,461,21],[381,18,461,24,"MISMATCH"],[381,26,461,16],[382,0,462,16],[384,0,464,12],[384,13,464,17],[384,20,464,12],[385,0,465,16],[385,14,465,20,"token"],[385,19,465,25],[385,24,465,30],[385,28,465,20],[385,32,465,38,"token"],[385,37,465,43],[385,38,465,44,"value"],[385,43,465,38],[385,48,465,54,"state"],[385,53,465,59],[385,54,465,60,"value"],[385,59,465,16],[385,61,465,67],[386,0,466,20,"addTokenToMatch"],[386,12,466,20,"addTokenToMatch"],[386,27,466,35],[387,0,467,20,"state"],[387,12,467,20,"state"],[387,17,467,25],[387,20,467,28,"MATCH"],[387,25,467,20],[388,0,468,20],[389,0,469,17],[391,0,471,16,"state"],[391,10,471,16,"state"],[391,15,471,21],[391,18,471,24,"MISMATCH"],[391,26,471,16],[392,0,472,16],[394,0,474,12],[394,13,474,17],[394,20,474,12],[395,0,475,16],[395,14,475,20,"token"],[395,19,475,25],[395,24,475,30],[395,28,475,20],[395,32,475,38,"token"],[395,37,475,43],[395,38,475,44,"type"],[395,42,475,38],[395,47,475,53,"TYPE"],[395,51,475,57],[395,52,475,58,"Comma"],[395,57,475,16],[395,59,475,65],[396,0,476,20],[396,16,476,24,"isCommaContextStart"],[396,35,476,43],[396,36,476,44,"matchStack"],[396,46,476,54],[396,47,476,55,"token"],[396,52,476,43],[396,53,476,20],[396,55,476,63],[397,0,477,24,"state"],[397,14,477,24,"state"],[397,19,477,29],[397,22,477,32,"MISMATCH"],[397,30,477,24],[398,0,478,21],[398,13,476,20],[398,19,478,27],[399,0,479,24,"addTokenToMatch"],[399,14,479,24,"addTokenToMatch"],[399,29,479,39],[400,0,480,24,"state"],[400,14,480,24,"state"],[400,19,480,29],[400,22,480,32,"isCommaContextEnd"],[400,39,480,49],[400,40,480,50,"token"],[400,45,480,49],[400,46,480,32],[400,49,480,59,"MISMATCH"],[400,57,480,32],[400,60,480,70,"MATCH"],[400,65,480,24],[401,0,481,21],[402,0,482,17],[402,11,475,16],[402,17,482,23],[403,0,483,20,"state"],[403,12,483,20,"state"],[403,17,483,25],[403,20,483,28,"isCommaContextStart"],[403,39,483,47],[403,40,483,48,"matchStack"],[403,50,483,58],[403,51,483,59,"token"],[403,56,483,47],[403,57,483,28],[403,61,483,69,"isCommaContextEnd"],[403,78,483,86],[403,79,483,87,"token"],[403,84,483,86],[403,85,483,28],[403,88,483,96,"MATCH"],[403,93,483,28],[403,96,483,104,"MISMATCH"],[403,104,483,20],[404,0,484,17],[406,0,486,16],[408,0,488,12],[408,13,488,17],[408,21,488,12],[409,0,489,16],[409,14,489,20,"string"],[409,20,489,26],[409,23,489,29],[409,25,489,16],[411,0,491,16],[411,15,491,21],[411,19,491,25,"lastTokenIndex"],[411,33,491,39],[411,36,491,42,"tokenIndex"],[411,46,491,16],[411,48,491,54,"lastTokenIndex"],[411,62,491,68],[411,65,491,71,"tokens"],[411,71,491,77],[411,72,491,78,"length"],[411,78,491,54],[411,82,491,88,"string"],[411,88,491,94],[411,89,491,95,"length"],[411,95,491,88],[411,98,491,104,"state"],[411,103,491,109],[411,104,491,110,"value"],[411,109,491,104],[411,110,491,116,"length"],[411,116,491,16],[411,118,491,124,"lastTokenIndex"],[411,132,491,138],[411,134,491,16],[411,136,491,142],[412,0,492,20,"string"],[412,12,492,20,"string"],[412,18,492,26],[412,22,492,30,"tokens"],[412,28,492,36],[412,29,492,37,"lastTokenIndex"],[412,43,492,36],[412,44,492,30],[412,45,492,53,"value"],[412,50,492,20],[413,0,493,17],[415,0,495,16],[415,14,495,20,"areStringsEqualCaseInsensitive"],[415,44,495,50],[415,45,495,51,"string"],[415,51,495,50],[415,53,495,59,"state"],[415,58,495,64],[415,59,495,65,"value"],[415,64,495,50],[415,65,495,16],[415,67,495,73],[416,0,496,20],[416,19,496,27,"tokenIndex"],[416,29,496,37],[416,32,496,40,"lastTokenIndex"],[416,46,496,20],[416,48,496,56],[417,0,497,24,"addTokenToMatch"],[417,14,497,24,"addTokenToMatch"],[417,29,497,39],[418,0,498,21],[420,0,500,20,"state"],[420,12,500,20,"state"],[420,17,500,25],[420,20,500,28,"MATCH"],[420,25,500,20],[421,0,501,17],[421,11,495,16],[421,17,501,23],[422,0,502,20,"state"],[422,12,502,20,"state"],[422,17,502,25],[422,20,502,28,"MISMATCH"],[422,28,502,20],[423,0,503,17],[425,0,505,16],[427,0,507,12],[428,0,508,16],[428,16,508,22],[428,20,508,26,"Error"],[428,25,508,22],[428,26,508,32],[428,50,508,56,"state"],[428,55,508,61],[428,56,508,62,"type"],[428,60,508,22],[428,61,508,16],[429,0,211,8],[430,0,510,5],[432,0,512,4,"totalIterationCount"],[432,4,512,4,"totalIterationCount"],[432,23,512,23],[432,27,512,27,"iterationCount"],[432,41,512,4],[434,0,514,4],[434,12,514,12,"exitReason"],[434,22,514,4],[435,0,515,8],[435,11,515,13],[435,15,515,8],[436,0,516,12,"console"],[436,8,516,12,"console"],[436,15,516,19],[436,16,516,20,"warn"],[436,20,516,12],[436,21,516,25],[436,54,516,58,"ITERATION_LIMIT"],[436,69,516,25],[436,72,516,76],[436,85,516,12],[437,0,517,12,"exitReason"],[437,8,517,12,"exitReason"],[437,18,517,22],[437,21,517,25,"EXIT_REASON_ITERATION_LIMIT"],[437,48,517,12],[438,0,518,12,"matchStack"],[438,8,518,12,"matchStack"],[438,18,518,22],[438,21,518,25],[438,25,518,12],[439,0,519,12],[441,0,521,8],[441,11,521,13,"EXIT_REASON_MATCH"],[441,28,521,8],[442,0,522,12],[442,15,522,19,"syntaxStack"],[442,26,522,30],[442,31,522,35],[442,35,522,12],[442,37,522,41],[443,0,523,16,"closeSyntax"],[443,10,523,16,"closeSyntax"],[443,21,523,27],[444,0,524,13],[446,0,525,12],[448,0,527,8],[449,0,528,12,"matchStack"],[449,8,528,12,"matchStack"],[449,18,528,22],[449,21,528,25],[449,25,528,12],[450,0,514,4],[452,0,531,4],[452,11,531,11],[453,0,532,8,"tokens"],[453,6,532,8,"tokens"],[453,12,532,14],[453,14,532,16,"tokens"],[453,20,531,11],[454,0,533,8,"reason"],[454,6,533,8,"reason"],[454,12,533,14],[454,14,533,16,"exitReason"],[454,24,531,11],[455,0,534,8,"iterations"],[455,6,534,8,"iterations"],[455,16,534,18],[455,18,534,20,"iterationCount"],[455,32,531,11],[456,0,535,8,"match"],[456,6,535,8,"match"],[456,11,535,13],[456,13,535,15,"matchStack"],[456,23,531,11],[457,0,536,8,"longestMatch"],[457,6,536,8,"longestMatch"],[457,18,536,20],[457,20,536,22,"longestMatch"],[458,0,531,11],[458,5,531,4],[459,0,538,1],[461,0,540,0],[461,11,540,9,"matchAsList"],[461,22,540,0],[461,23,540,21,"tokens"],[461,29,540,0],[461,31,540,29,"matchGraph"],[461,41,540,0],[461,43,540,41,"syntaxes"],[461,51,540,0],[461,53,540,51],[462,0,541,4],[462,8,541,8,"matchResult"],[462,19,541,19],[462,22,541,22,"internalMatch"],[462,35,541,35],[462,36,541,36,"tokens"],[462,42,541,35],[462,44,541,44,"matchGraph"],[462,54,541,35],[462,56,541,56,"syntaxes"],[462,64,541,64],[462,68,541,68],[462,70,541,35],[462,71,541,4],[464,0,543,4],[464,8,543,8,"matchResult"],[464,19,543,19],[464,20,543,20,"match"],[464,25,543,8],[464,30,543,30],[464,34,543,4],[464,36,543,36],[465,0,544,8],[465,10,544,12,"item"],[465,14,544,16],[465,17,544,19,"reverseList"],[465,28,544,30],[465,29,544,31,"matchResult"],[465,40,544,42],[465,41,544,43,"match"],[465,46,544,30],[465,47,544,19],[465,48,544,50,"prev"],[465,52,544,8],[466,0,546,8,"matchResult"],[466,6,546,8,"matchResult"],[466,17,546,19],[466,18,546,20,"match"],[466,23,546,8],[466,26,546,28],[466,28,546,8],[468,0,548,8],[468,13,548,15,"item"],[468,17,548,19],[468,22,548,24],[468,26,548,8],[468,28,548,30],[469,0,549,12],[469,16,549,20,"item"],[469,20,549,24],[469,21,549,25,"type"],[469,25,549,12],[470,0,550,16],[470,15,550,21,"STUB"],[470,19,550,16],[471,0,551,20],[473,0,553,16],[473,15,553,21,"OPEN_SYNTAX"],[473,26,553,16],[474,0,554,16],[474,15,554,21,"CLOSE_SYNTAX"],[474,27,554,16],[475,0,555,20,"matchResult"],[475,12,555,20,"matchResult"],[475,23,555,31],[475,24,555,32,"match"],[475,29,555,20],[475,30,555,38,"push"],[475,34,555,20],[475,35,555,43],[476,0,556,24,"type"],[476,14,556,24,"type"],[476,18,556,28],[476,20,556,30,"item"],[476,24,556,34],[476,25,556,35,"type"],[476,29,555,43],[477,0,557,24,"syntax"],[477,14,557,24,"syntax"],[477,20,557,30],[477,22,557,32,"item"],[477,26,557,36],[477,27,557,37,"syntax"],[478,0,555,43],[478,13,555,20],[479,0,559,20],[481,0,561,16],[482,0,562,20,"matchResult"],[482,12,562,20,"matchResult"],[482,23,562,31],[482,24,562,32,"match"],[482,29,562,20],[482,30,562,38,"push"],[482,34,562,20],[482,35,562,43],[483,0,563,24,"token"],[483,14,563,24,"token"],[483,19,563,29],[483,21,563,31,"item"],[483,25,563,35],[483,26,563,36,"token"],[483,31,563,31],[483,32,563,42,"value"],[483,37,562,43],[484,0,564,24,"node"],[484,14,564,24,"node"],[484,18,564,28],[484,20,564,30,"item"],[484,24,564,34],[484,25,564,35,"token"],[484,30,564,30],[484,31,564,41,"node"],[485,0,562,43],[485,13,562,20],[486,0,566,20],[487,0,549,12],[489,0,569,12,"item"],[489,8,569,12,"item"],[489,12,569,16],[489,15,569,19,"item"],[489,19,569,23],[489,20,569,24,"prev"],[489,24,569,12],[490,0,570,9],[491,0,571,5],[493,0,573,4],[493,11,573,11,"matchResult"],[493,22,573,4],[494,0,574,1],[496,0,576,0],[496,11,576,9,"matchAsTree"],[496,22,576,0],[496,23,576,21,"tokens"],[496,29,576,0],[496,31,576,29,"matchGraph"],[496,41,576,0],[496,43,576,41,"syntaxes"],[496,51,576,0],[496,53,576,51],[497,0,577,4],[497,8,577,8,"matchResult"],[497,19,577,19],[497,22,577,22,"internalMatch"],[497,35,577,35],[497,36,577,36,"tokens"],[497,42,577,35],[497,44,577,44,"matchGraph"],[497,54,577,35],[497,56,577,56,"syntaxes"],[497,64,577,64],[497,68,577,68],[497,70,577,35],[497,71,577,4],[499,0,579,4],[499,8,579,8,"matchResult"],[499,19,579,19],[499,20,579,20,"match"],[499,25,579,8],[499,30,579,30],[499,34,579,4],[499,36,579,36],[500,0,580,8],[500,13,580,15,"matchResult"],[500,24,580,8],[501,0,581,5],[503,0,583,4],[503,8,583,8,"item"],[503,12,583,12],[503,15,583,15,"matchResult"],[503,26,583,26],[503,27,583,27,"match"],[503,32,583,4],[504,0,584,4],[504,8,584,8,"host"],[504,12,584,12],[504,15,584,15,"matchResult"],[504,26,584,26],[504,27,584,27,"match"],[504,32,584,15],[504,35,584,35],[505,0,585,8,"syntax"],[505,6,585,8,"syntax"],[505,12,585,14],[505,14,585,16,"matchGraph"],[505,24,585,26],[505,25,585,27,"syntax"],[505,31,585,16],[505,35,585,37],[505,39,584,35],[506,0,586,8,"match"],[506,6,586,8,"match"],[506,11,586,13],[506,13,586,15],[507,0,584,35],[507,5,584,4],[508,0,588,4],[508,8,588,8,"hostStack"],[508,17,588,17],[508,20,588,20],[508,21,588,21,"host"],[508,25,588,20],[508,26,588,4],[509,0,591,4,"item"],[509,4,591,4,"item"],[509,8,591,8],[509,11,591,11,"reverseList"],[509,22,591,22],[509,23,591,23,"item"],[509,27,591,22],[509,28,591,11],[509,29,591,29,"prev"],[509,33,591,4],[511,0,594,4],[511,11,594,11,"item"],[511,15,594,15],[511,20,594,20],[511,24,594,4],[511,26,594,26],[512,0,595,8],[512,14,595,16,"item"],[512,18,595,20],[512,19,595,21,"type"],[512,23,595,8],[513,0,596,12],[513,13,596,17,"OPEN_SYNTAX"],[513,24,596,12],[514,0,597,16,"host"],[514,10,597,16,"host"],[514,14,597,20],[514,15,597,21,"match"],[514,20,597,16],[514,21,597,27,"push"],[514,25,597,16],[514,26,597,32,"host"],[514,30,597,36],[514,33,597,39],[515,0,598,20,"syntax"],[515,12,598,20,"syntax"],[515,18,598,26],[515,20,598,28,"item"],[515,24,598,32],[515,25,598,33,"syntax"],[515,31,597,39],[516,0,599,20,"match"],[516,12,599,20,"match"],[516,17,599,25],[516,19,599,27],[517,0,597,39],[517,11,597,16],[518,0,601,16,"hostStack"],[518,10,601,16,"hostStack"],[518,19,601,25],[518,20,601,26,"push"],[518,24,601,16],[518,25,601,31,"host"],[518,29,601,16],[519,0,602,16],[521,0,604,12],[521,13,604,17,"CLOSE_SYNTAX"],[521,25,604,12],[522,0,605,16,"hostStack"],[522,10,605,16,"hostStack"],[522,19,605,25],[522,20,605,26,"pop"],[522,23,605,16],[523,0,606,16,"host"],[523,10,606,16,"host"],[523,14,606,20],[523,17,606,23,"hostStack"],[523,26,606,32],[523,27,606,33,"hostStack"],[523,36,606,42],[523,37,606,43,"length"],[523,43,606,33],[523,46,606,52],[523,47,606,32],[523,48,606,16],[524,0,607,16],[526,0,609,12],[527,0,610,16,"host"],[527,10,610,16,"host"],[527,14,610,20],[527,15,610,21,"match"],[527,20,610,16],[527,21,610,27,"push"],[527,25,610,16],[527,26,610,32],[528,0,611,20,"syntax"],[528,12,611,20,"syntax"],[528,18,611,26],[528,20,611,28,"item"],[528,24,611,32],[528,25,611,33,"syntax"],[528,31,611,28],[528,35,611,43],[528,39,610,32],[529,0,612,20,"token"],[529,12,612,20,"token"],[529,17,612,25],[529,19,612,27,"item"],[529,23,612,31],[529,24,612,32,"token"],[529,29,612,27],[529,30,612,38,"value"],[529,35,610,32],[530,0,613,20,"node"],[530,12,613,20,"node"],[530,16,613,24],[530,18,613,26,"item"],[530,22,613,30],[530,23,613,31,"token"],[530,28,613,26],[530,29,613,37,"node"],[531,0,610,32],[531,11,610,16],[532,0,595,8],[534,0,617,8,"item"],[534,6,617,8,"item"],[534,10,617,12],[534,13,617,15,"item"],[534,17,617,19],[534,18,617,20,"prev"],[534,22,617,8],[535,0,618,5],[537,0,620,4],[537,11,620,11,"matchResult"],[537,22,620,4],[538,0,621,1],[540,0,623,0,"module"],[540,2,623,0,"module"],[540,8,623,6],[540,9,623,7,"exports"],[540,16,623,0],[540,19,623,17],[541,0,624,4,"matchAsList"],[541,4,624,4,"matchAsList"],[541,15,624,15],[541,17,624,17,"matchAsList"],[541,28,623,17],[542,0,625,4,"matchAsTree"],[542,4,625,4,"matchAsTree"],[542,15,625,15],[542,17,625,17,"matchAsTree"],[542,28,623,17],[543,0,626,4,"getTotalIterationCount"],[543,4,626,4,"getTotalIterationCount"],[543,26,626,26],[543,28,626,28],[543,62,626,39],[544,0,627,8],[544,13,627,15,"totalIterationCount"],[544,32,627,8],[545,0,628,5],[546,0,623,17],[546,3,623,0]]},"type":"js/module"}]}