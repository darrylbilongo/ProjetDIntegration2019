{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"../val","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n\n  var _val = _$$_REQUIRE(_dependencyMap[6], \"../val\");\n\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\"));\n\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX = 0;\n    var currentT = 0;\n    var i = 0;\n\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n\n    return aGuessT;\n  }\n\n  function bezier(mX1, mY1, mX2, mY2) {\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n\n      --currentSample;\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x;\n      }\n\n      if (x === 0) {\n        return 0;\n      }\n\n      if (x === 1) {\n        return 1;\n      }\n\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n\n  var AnimatedBezier = function (_AnimatedNode) {\n    (0, _inherits2.default)(AnimatedBezier, _AnimatedNode);\n\n    function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedBezier);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedBezier).call(this, {\n        type: 'bezier',\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        input: value.__nodeID\n      }, [value]));\n      _this._value = value;\n      _this._bezier = bezier(mX1, mY1, mX2, mY2);\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedBezier, [{\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._bezier((0, _val.val)(this._value));\n      }\n    }]);\n    return AnimatedBezier;\n  }(_AnimatedNode2.default);\n\n  exports.default = AnimatedBezier;\n});","map":[[19,0,1,0],[21,0,2,0],[23,0,5,0],[23,6,5,4,"NEWTON_ITERATIONS"],[23,23,5,21],[23,26,5,24],[23,27,5,0],[24,0,6,0],[24,6,6,4,"NEWTON_MIN_SLOPE"],[24,22,6,20],[24,25,6,23],[24,30,6,0],[25,0,7,0],[25,6,7,4,"SUBDIVISION_PRECISION"],[25,27,7,25],[25,30,7,28],[25,39,7,0],[26,0,8,0],[26,6,8,4,"SUBDIVISION_MAX_ITERATIONS"],[26,32,8,30],[26,35,8,33],[26,37,8,0],[27,0,10,0],[27,6,10,4,"kSplineTableSize"],[27,22,10,20],[27,25,10,23],[27,27,10,0],[28,0,11,0],[28,6,11,4,"kSampleStepSize"],[28,21,11,19],[28,24,11,22],[28,31,11,29,"kSplineTableSize"],[28,47,11,45],[28,50,11,48],[28,53,11,22],[28,54,11,0],[29,0,13,0],[29,6,13,4,"float32ArraySupported"],[29,27,13,25],[29,30,13,28],[29,37,13,35,"Float32Array"],[29,49,13,28],[29,54,13,52],[29,64,13,0],[31,0,15,0],[31,11,15,9,"A"],[31,12,15,0],[31,13,15,11,"aA1"],[31,16,15,0],[31,18,15,16,"aA2"],[31,21,15,0],[31,23,15,21],[32,0,16,2],[32,11,16,9],[32,17,16,15],[32,23,16,21,"aA2"],[32,26,16,9],[32,29,16,27],[32,35,16,33,"aA1"],[32,38,16,2],[33,0,17,1],[35,0,18,0],[35,11,18,9,"B"],[35,12,18,0],[35,13,18,11,"aA1"],[35,16,18,0],[35,18,18,16,"aA2"],[35,21,18,0],[35,23,18,21],[36,0,19,2],[36,11,19,9],[36,17,19,15,"aA2"],[36,20,19,9],[36,23,19,21],[36,29,19,27,"aA1"],[36,32,19,2],[37,0,20,1],[39,0,21,0],[39,11,21,9,"C"],[39,12,21,0],[39,13,21,11,"aA1"],[39,16,21,0],[39,18,21,16],[40,0,22,2],[40,11,22,9],[40,17,22,15,"aA1"],[40,20,22,2],[41,0,23,1],[43,0,26,0],[43,11,26,9,"calcBezier"],[43,21,26,0],[43,22,26,20,"aT"],[43,24,26,0],[43,26,26,24,"aA1"],[43,29,26,0],[43,31,26,29,"aA2"],[43,34,26,0],[43,36,26,34],[44,0,27,2],[44,11,27,9],[44,12,27,10],[44,13,27,11,"A"],[44,14,27,12],[44,15,27,13,"aA1"],[44,18,27,12],[44,20,27,18,"aA2"],[44,23,27,12],[44,24,27,11],[44,27,27,25,"aT"],[44,29,27,11],[44,32,27,30,"B"],[44,33,27,31],[44,34,27,32,"aA1"],[44,37,27,31],[44,39,27,37,"aA2"],[44,42,27,31],[44,43,27,10],[44,47,27,45,"aT"],[44,49,27,10],[44,52,27,50,"C"],[44,53,27,51],[44,54,27,52,"aA1"],[44,57,27,51],[44,58,27,9],[44,62,27,60,"aT"],[44,64,27,2],[45,0,28,1],[47,0,31,0],[47,11,31,9,"getSlope"],[47,19,31,0],[47,20,31,18,"aT"],[47,22,31,0],[47,24,31,22,"aA1"],[47,27,31,0],[47,29,31,27,"aA2"],[47,32,31,0],[47,34,31,32],[48,0,32,2],[48,11,32,9],[48,17,32,15,"A"],[48,18,32,16],[48,19,32,17,"aA1"],[48,22,32,16],[48,24,32,22,"aA2"],[48,27,32,16],[48,28,32,9],[48,31,32,29,"aT"],[48,33,32,9],[48,36,32,34,"aT"],[48,38,32,9],[48,41,32,39],[48,47,32,45,"B"],[48,48,32,46],[48,49,32,47,"aA1"],[48,52,32,46],[48,54,32,52,"aA2"],[48,57,32,46],[48,58,32,39],[48,61,32,59,"aT"],[48,63,32,9],[48,66,32,64,"C"],[48,67,32,65],[48,68,32,66,"aA1"],[48,71,32,65],[48,72,32,2],[49,0,33,1],[51,0,35,0],[51,11,35,9,"binarySubdivide"],[51,26,35,0],[51,27,35,25,"aX"],[51,29,35,0],[51,31,35,29,"aA"],[51,33,35,0],[51,35,35,33,"aB"],[51,37,35,0],[51,39,35,37,"mX1"],[51,42,35,0],[51,44,35,42,"mX2"],[51,47,35,0],[51,49,35,47],[52,0,36,2],[52,8,36,6,"currentX"],[52,16,36,14],[52,19,36,17],[52,20,36,2],[53,0,37,2],[53,8,37,6,"currentT"],[53,16,37,14],[53,19,37,17],[53,20,37,2],[54,0,38,2],[54,8,38,6,"i"],[54,9,38,7],[54,12,38,10],[54,13,38,2],[56,0,39,2],[56,7,39,5],[57,0,40,4,"currentT"],[57,6,40,4,"currentT"],[57,14,40,12],[57,17,40,15,"aA"],[57,19,40,17],[57,22,40,20],[57,23,40,21,"aB"],[57,25,40,23],[57,28,40,26,"aA"],[57,30,40,20],[57,34,40,32],[57,37,40,4],[58,0,41,4,"currentX"],[58,6,41,4,"currentX"],[58,14,41,12],[58,17,41,15,"calcBezier"],[58,27,41,25],[58,28,41,26,"currentT"],[58,36,41,25],[58,38,41,36,"mX1"],[58,41,41,25],[58,43,41,41,"mX2"],[58,46,41,25],[58,47,41,15],[58,50,41,48,"aX"],[58,52,41,4],[60,0,42,4],[60,10,42,8,"currentX"],[60,18,42,16],[60,21,42,19],[60,24,42,4],[60,26,42,24],[61,0,43,6,"aB"],[61,8,43,6,"aB"],[61,10,43,8],[61,13,43,11,"currentT"],[61,21,43,6],[62,0,44,5],[62,7,42,4],[62,13,44,11],[63,0,45,6,"aA"],[63,8,45,6,"aA"],[63,10,45,8],[63,13,45,11,"currentT"],[63,21,45,6],[64,0,46,5],[65,0,47,3],[65,5,39,2],[65,13,48,4,"Math"],[65,17,48,8],[65,18,48,9,"abs"],[65,21,48,4],[65,22,48,13,"currentX"],[65,30,48,4],[65,34,48,25,"SUBDIVISION_PRECISION"],[65,55,48,4],[65,59,49,4],[65,61,49,6,"i"],[65,62,49,4],[65,65,49,10,"SUBDIVISION_MAX_ITERATIONS"],[65,91,39,2],[67,0,51,2],[67,11,51,9,"currentT"],[67,19,51,2],[68,0,52,1],[70,0,54,0],[70,11,54,9,"newtonRaphsonIterate"],[70,31,54,0],[70,32,54,30,"aX"],[70,34,54,0],[70,36,54,34,"aGuessT"],[70,43,54,0],[70,45,54,43,"mX1"],[70,48,54,0],[70,50,54,48,"mX2"],[70,53,54,0],[70,55,54,53],[71,0,55,2],[71,9,55,7],[71,13,55,11,"i"],[71,14,55,12],[71,17,55,15],[71,18,55,2],[71,20,55,18,"i"],[71,21,55,19],[71,24,55,22,"NEWTON_ITERATIONS"],[71,41,55,2],[71,43,55,41],[71,45,55,43,"i"],[71,46,55,2],[71,48,55,46],[72,0,56,4],[72,10,56,8,"currentSlope"],[72,22,56,20],[72,25,56,23,"getSlope"],[72,33,56,31],[72,34,56,32,"aGuessT"],[72,41,56,31],[72,43,56,41,"mX1"],[72,46,56,31],[72,48,56,46,"mX2"],[72,51,56,31],[72,52,56,4],[74,0,57,4],[74,10,57,8,"currentSlope"],[74,22,57,20],[74,27,57,25],[74,30,57,4],[74,32,57,30],[75,0,58,6],[75,15,58,13,"aGuessT"],[75,22,58,6],[76,0,59,5],[78,0,60,4],[78,10,60,8,"currentX"],[78,18,60,16],[78,21,60,19,"calcBezier"],[78,31,60,29],[78,32,60,30,"aGuessT"],[78,39,60,29],[78,41,60,39,"mX1"],[78,44,60,29],[78,46,60,44,"mX2"],[78,49,60,29],[78,50,60,19],[78,53,60,51,"aX"],[78,55,60,4],[79,0,61,4,"aGuessT"],[79,6,61,4,"aGuessT"],[79,13,61,11],[79,17,61,15,"currentX"],[79,25,61,23],[79,28,61,26,"currentSlope"],[79,40,61,4],[80,0,62,3],[82,0,63,2],[82,11,63,9,"aGuessT"],[82,18,63,2],[83,0,64,1],[85,0,66,0],[85,11,66,9,"bezier"],[85,17,66,0],[85,18,66,16,"mX1"],[85,21,66,0],[85,23,66,21,"mY1"],[85,26,66,0],[85,28,66,26,"mX2"],[85,31,66,0],[85,33,66,31,"mY2"],[85,36,66,0],[85,38,66,36],[86,0,68,2],[86,8,68,6,"sampleValues"],[86,20,68,18],[86,23,68,21,"float32ArraySupported"],[86,44,68,42],[86,47,69,6],[86,51,69,10,"Float32Array"],[86,63,69,6],[86,64,69,23,"kSplineTableSize"],[86,80,69,6],[86,81,68,42],[86,84,70,6],[86,88,70,10,"Array"],[86,93,70,6],[86,94,70,16,"kSplineTableSize"],[86,110,70,6],[86,111,68,2],[88,0,71,2],[88,8,71,6,"mX1"],[88,11,71,9],[88,16,71,14,"mY1"],[88,19,71,6],[88,23,71,21,"mX2"],[88,26,71,24],[88,31,71,29,"mY2"],[88,34,71,2],[88,36,71,34],[89,0,72,4],[89,11,72,9],[89,15,72,13,"i"],[89,16,72,14],[89,19,72,17],[89,20,72,4],[89,22,72,20,"i"],[89,23,72,21],[89,26,72,24,"kSplineTableSize"],[89,42,72,4],[89,44,72,42],[89,46,72,44,"i"],[89,47,72,4],[89,49,72,47],[90,0,73,6,"sampleValues"],[90,8,73,6,"sampleValues"],[90,20,73,18],[90,21,73,19,"i"],[90,22,73,18],[90,23,73,6],[90,26,73,24,"calcBezier"],[90,36,73,34],[90,37,73,35,"i"],[90,38,73,36],[90,41,73,39,"kSampleStepSize"],[90,56,73,34],[90,58,73,56,"mX1"],[90,61,73,34],[90,63,73,61,"mX2"],[90,66,73,34],[90,67,73,6],[91,0,74,5],[92,0,75,3],[94,0,77,2],[94,13,77,11,"getTForX"],[94,21,77,2],[94,22,77,20,"aX"],[94,24,77,2],[94,26,77,24],[95,0,78,4],[95,10,78,8,"intervalStart"],[95,23,78,21],[95,26,78,24],[95,29,78,4],[96,0,79,4],[96,10,79,8,"currentSample"],[96,23,79,21],[96,26,79,24],[96,27,79,4],[97,0,80,4],[97,10,80,8,"lastSample"],[97,20,80,18],[97,23,80,21,"kSplineTableSize"],[97,39,80,37],[97,42,80,40],[97,43,80,4],[99,0,82,4],[99,13,84,6,"currentSample"],[99,26,84,19],[99,31,84,24,"lastSample"],[99,41,84,6],[99,45,84,38,"sampleValues"],[99,57,84,50],[99,58,84,51,"currentSample"],[99,71,84,50],[99,72,84,38],[99,76,84,69,"aX"],[99,78,82,4],[99,80,85,6],[99,82,85,8,"currentSample"],[99,95,82,4],[99,97,86,6],[100,0,87,6,"intervalStart"],[100,8,87,6,"intervalStart"],[100,21,87,19],[100,25,87,23,"kSampleStepSize"],[100,40,87,6],[101,0,88,5],[103,0,89,4],[103,8,89,6,"currentSample"],[103,21,89,4],[104,0,92,4],[104,10,92,8,"dist"],[104,14,92,12],[104,17,93,6],[104,18,93,7,"aX"],[104,20,93,9],[104,23,93,12,"sampleValues"],[104,35,93,24],[104,36,93,25,"currentSample"],[104,49,93,24],[104,50,93,6],[104,55,94,7,"sampleValues"],[104,67,94,19],[104,68,94,20,"currentSample"],[104,81,94,33],[104,84,94,36],[104,85,94,19],[104,86,94,7],[104,89,94,41,"sampleValues"],[104,101,94,53],[104,102,94,54,"currentSample"],[104,115,94,53],[104,116,93,6],[104,117,92,4],[105,0,95,4],[105,10,95,8,"guessForT"],[105,19,95,17],[105,22,95,20,"intervalStart"],[105,35,95,33],[105,38,95,36,"dist"],[105,42,95,40],[105,45,95,43,"kSampleStepSize"],[105,60,95,4],[106,0,97,4],[106,10,97,8,"initialSlope"],[106,22,97,20],[106,25,97,23,"getSlope"],[106,33,97,31],[106,34,97,32,"guessForT"],[106,43,97,31],[106,45,97,43,"mX1"],[106,48,97,31],[106,50,97,48,"mX2"],[106,53,97,31],[106,54,97,4],[108,0,98,4],[108,10,98,8,"initialSlope"],[108,22,98,20],[108,26,98,24,"NEWTON_MIN_SLOPE"],[108,42,98,4],[108,44,98,42],[109,0,99,6],[109,15,99,13,"newtonRaphsonIterate"],[109,35,99,33],[109,36,99,34,"aX"],[109,38,99,33],[109,40,99,38,"guessForT"],[109,49,99,33],[109,51,99,49,"mX1"],[109,54,99,33],[109,56,99,54,"mX2"],[109,59,99,33],[109,60,99,6],[110,0,100,5],[110,7,98,4],[110,13,100,11],[110,17,100,15,"initialSlope"],[110,29,100,27],[110,34,100,32],[110,37,100,11],[110,39,100,37],[111,0,101,6],[111,15,101,13,"guessForT"],[111,24,101,6],[112,0,102,5],[112,7,100,11],[112,13,102,11],[113,0,103,6],[113,15,103,13,"binarySubdivide"],[113,30,103,28],[113,31,104,8,"aX"],[113,33,103,28],[113,35,105,8,"intervalStart"],[113,48,103,28],[113,50,106,8,"intervalStart"],[113,63,106,21],[113,66,106,24,"kSampleStepSize"],[113,81,103,28],[113,83,107,8,"mX1"],[113,86,103,28],[113,88,108,8,"mX2"],[113,91,103,28],[113,92,103,6],[114,0,110,5],[115,0,111,3],[117,0,113,2],[117,11,113,9],[117,20,113,18,"BezierEasing"],[117,32,113,9],[117,33,113,31,"x"],[117,34,113,9],[117,36,113,34],[118,0,114,4],[118,10,114,8,"mX1"],[118,13,114,11],[118,18,114,16,"mY1"],[118,21,114,8],[118,25,114,23,"mX2"],[118,28,114,26],[118,33,114,31,"mY2"],[118,36,114,4],[118,38,114,36],[119,0,115,6],[119,15,115,13,"x"],[119,16,115,6],[120,0,116,5],[122,0,118,4],[122,10,118,8,"x"],[122,11,118,9],[122,16,118,14],[122,17,118,4],[122,19,118,17],[123,0,119,6],[123,15,119,13],[123,16,119,6],[124,0,120,5],[126,0,121,4],[126,10,121,8,"x"],[126,11,121,9],[126,16,121,14],[126,17,121,4],[126,19,121,17],[127,0,122,6],[127,15,122,13],[127,16,122,6],[128,0,123,5],[130,0,124,4],[130,13,124,11,"calcBezier"],[130,23,124,21],[130,24,124,22,"getTForX"],[130,32,124,30],[130,33,124,31,"x"],[130,34,124,30],[130,35,124,21],[130,37,124,35,"mY1"],[130,40,124,21],[130,42,124,40,"mY2"],[130,45,124,21],[130,46,124,4],[131,0,125,3],[131,5,113,2],[132,0,126,1],[134,6,128,21,"AnimatedBezier"],[134,20],[137,0,132,2],[137,28,132,14,"value"],[137,33,132,2],[137,35,132,21,"mX1"],[137,38,132,2],[137,40,132,26,"mY1"],[137,43,132,2],[137,45,132,31,"mX2"],[137,48,132,2],[137,50,132,36,"mY2"],[137,53,132,2],[137,55,132,41],[138,0,132,41],[140,0,132,41],[141,0,133,4],[141,118,133,10],[142,0,133,12,"type"],[142,8,133,12,"type"],[142,12,133,16],[142,14,133,18],[142,22,133,10],[143,0,133,28,"mX1"],[143,8,133,28,"mX1"],[143,11,133,31],[143,13,133,28,"mX1"],[143,16,133,10],[144,0,133,33,"mY1"],[144,8,133,33,"mY1"],[144,11,133,36],[144,13,133,33,"mY1"],[144,16,133,10],[145,0,133,38,"mX2"],[145,8,133,38,"mX2"],[145,11,133,41],[145,13,133,38,"mX2"],[145,16,133,10],[146,0,133,43,"mY2"],[146,8,133,43,"mY2"],[146,11,133,46],[146,13,133,43,"mY2"],[146,16,133,10],[147,0,133,48,"input"],[147,8,133,48,"input"],[147,13,133,53],[147,15,133,55,"value"],[147,20,133,60],[147,21,133,61,"__nodeID"],[148,0,133,10],[148,7,133,4],[148,9,133,73],[148,10,134,6,"value"],[148,15,133,73],[148,16,133,4],[149,0,136,4],[149,12,136,9,"_value"],[149,18,136,4],[149,21,136,18,"value"],[149,26,136,4],[150,0,137,4],[150,12,137,9,"_bezier"],[150,19,137,4],[150,22,137,19,"bezier"],[150,28,137,25],[150,29,137,26,"mX1"],[150,32,137,25],[150,34,137,31,"mY1"],[150,37,137,25],[150,39,137,36,"mX2"],[150,42,137,25],[150,44,137,41,"mY2"],[150,47,137,25],[150,48,137,4],[151,0,132,41],[152,0,138,3],[156,37,140,17],[157,0,141,4],[157,15,141,11],[157,20,141,16,"_bezier"],[157,27,141,11],[157,28,141,24],[157,42,141,28],[157,47,141,33,"_value"],[157,53,141,24],[157,54,141,11],[157,55,141,4],[158,0,142,3],[161,4,128,44,"AnimatedNode"],[161,26]]},"type":"js/module"}]}