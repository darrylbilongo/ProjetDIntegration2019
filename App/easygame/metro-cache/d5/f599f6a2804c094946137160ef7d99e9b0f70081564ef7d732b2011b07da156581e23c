{"dependencies":[{"name":"../definition-syntax/parse","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var parse = _$$_REQUIRE(_dependencyMap[0], \"../definition-syntax/parse\");\n\n  var MATCH = {\n    type: 'Match'\n  };\n  var MISMATCH = {\n    type: 'Mismatch'\n  };\n  var DISALLOW_EMPTY = {\n    type: 'DisallowEmpty'\n  };\n  var LEFTPARENTHESIS = 40;\n  var RIGHTPARENTHESIS = 41;\n\n  function createCondition(match, thenBranch, elseBranch) {\n    if (thenBranch === MATCH && elseBranch === MISMATCH) {\n      return match;\n    }\n\n    if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {\n      return match;\n    }\n\n    if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {\n      thenBranch = match.then;\n      match = match.match;\n    }\n\n    return {\n      type: 'If',\n      match: match,\n      then: thenBranch,\n      else: elseBranch\n    };\n  }\n\n  function isFunctionType(name) {\n    return name.length > 2 && name.charCodeAt(name.length - 2) === LEFTPARENTHESIS && name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS;\n  }\n\n  function isEnumCapatible(term) {\n    return term.type === 'Keyword' || term.type === 'AtKeyword' || term.type === 'Function' || term.type === 'Type' && isFunctionType(term.name);\n  }\n\n  function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {\n    switch (combinator) {\n      case ' ':\n        var result = MATCH;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          result = createCondition(term, result, MISMATCH);\n        }\n\n        ;\n        return result;\n\n      case '|':\n        var result = MISMATCH;\n        var map = null;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n\n          if (isEnumCapatible(term)) {\n            if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {\n              map = Object.create(null);\n              result = createCondition({\n                type: 'Enum',\n                map: map\n              }, MATCH, result);\n            }\n\n            if (map !== null) {\n              var key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();\n\n              if (key in map === false) {\n                map[key] = term;\n                continue;\n              }\n            }\n          }\n\n          map = null;\n          result = createCondition(term, MATCH, result);\n        }\n\n        ;\n        return result;\n\n      case '&&':\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: true\n          };\n        }\n\n        var result = MISMATCH;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), false);\n          } else {\n            thenClause = MATCH;\n          }\n\n          result = createCondition(term, thenClause, result);\n        }\n\n        ;\n        return result;\n\n      case '||':\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: false\n          };\n        }\n\n        var result = atLeastOneTermMatched ? MATCH : MISMATCH;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), true);\n          } else {\n            thenClause = MATCH;\n          }\n\n          result = createCondition(term, thenClause, result);\n        }\n\n        ;\n        return result;\n    }\n  }\n\n  function buildMultiplierMatchGraph(node) {\n    var result = MATCH;\n\n    var matchTerm = _buildMatchGraph(node.term);\n\n    if (node.max === 0) {\n      matchTerm = createCondition(matchTerm, DISALLOW_EMPTY, MISMATCH);\n      result = createCondition(matchTerm, null, MISMATCH);\n      result.then = createCondition(MATCH, MATCH, result);\n\n      if (node.comma) {\n        result.then.else = createCondition({\n          type: 'Comma',\n          syntax: node\n        }, result, MISMATCH);\n      }\n    } else {\n      for (var i = node.min || 1; i <= node.max; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n\n        result = createCondition(matchTerm, createCondition(MATCH, MATCH, result), MISMATCH);\n      }\n    }\n\n    if (node.min === 0) {\n      result = createCondition(MATCH, MATCH, result);\n    } else {\n      for (var i = 0; i < node.min - 1; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n\n        result = createCondition(matchTerm, result, MISMATCH);\n      }\n    }\n\n    return result;\n  }\n\n  function _buildMatchGraph(node) {\n    if (typeof node === 'function') {\n      return {\n        type: 'Generic',\n        fn: node\n      };\n    }\n\n    switch (node.type) {\n      case 'Group':\n        var result = buildGroupMatchGraph(node.combinator, node.terms.map(_buildMatchGraph), false);\n\n        if (node.disallowEmpty) {\n          result = createCondition(result, DISALLOW_EMPTY, MISMATCH);\n        }\n\n        return result;\n\n      case 'Multiplier':\n        return buildMultiplierMatchGraph(node);\n\n      case 'Type':\n      case 'Property':\n        return {\n          type: node.type,\n          name: node.name,\n          syntax: node\n        };\n\n      case 'Keyword':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase(),\n          syntax: node\n        };\n\n      case 'AtKeyword':\n        return {\n          type: node.type,\n          name: '@' + node.name.toLowerCase(),\n          syntax: node\n        };\n\n      case 'Function':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase() + '(',\n          syntax: node\n        };\n\n      case 'String':\n        if (node.value.length === 3) {\n          return {\n            type: 'Token',\n            value: node.value.charAt(1),\n            syntax: node\n          };\n        }\n\n        return {\n          type: node.type,\n          value: node.value.substr(1, node.value.length - 2).replace(/\\\\'/g, '\\''),\n          syntax: node\n        };\n\n      case 'Token':\n        return {\n          type: node.type,\n          value: node.value,\n          syntax: node\n        };\n\n      case 'Comma':\n        return {\n          type: node.type,\n          syntax: node\n        };\n\n      default:\n        throw new Error('Unknown node type:', node.type);\n    }\n  }\n\n  module.exports = {\n    MATCH: MATCH,\n    MISMATCH: MISMATCH,\n    DISALLOW_EMPTY: DISALLOW_EMPTY,\n    buildMatchGraph: function buildMatchGraph(syntaxTree, ref) {\n      if (typeof syntaxTree === 'string') {\n        syntaxTree = parse(syntaxTree);\n      }\n\n      return {\n        type: 'MatchGraph',\n        match: _buildMatchGraph(syntaxTree),\n        syntax: ref || null,\n        source: syntaxTree\n      };\n    }\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"parse"],[2,11,1,9],[2,14,1,12,"require"],[2,25,1,19],[2,74,1,0],[4,0,3,0],[4,6,3,4,"MATCH"],[4,11,3,9],[4,14,3,12],[5,0,3,14,"type"],[5,4,3,14,"type"],[5,8,3,18],[5,10,3,20],[6,0,3,12],[6,3,3,0],[7,0,4,0],[7,6,4,4,"MISMATCH"],[7,14,4,12],[7,17,4,15],[8,0,4,17,"type"],[8,4,4,17,"type"],[8,8,4,21],[8,10,4,23],[9,0,4,15],[9,3,4,0],[10,0,5,0],[10,6,5,4,"DISALLOW_EMPTY"],[10,20,5,18],[10,23,5,21],[11,0,5,23,"type"],[11,4,5,23,"type"],[11,8,5,27],[11,10,5,29],[12,0,5,21],[12,3,5,0],[13,0,6,0],[13,6,6,4,"LEFTPARENTHESIS"],[13,21,6,19],[13,24,6,22],[13,26,6,0],[14,0,7,0],[14,6,7,4,"RIGHTPARENTHESIS"],[14,22,7,20],[14,25,7,23],[14,27,7,0],[16,0,9,0],[16,11,9,9,"createCondition"],[16,26,9,0],[16,27,9,25,"match"],[16,32,9,0],[16,34,9,32,"thenBranch"],[16,44,9,0],[16,46,9,44,"elseBranch"],[16,56,9,0],[16,58,9,56],[17,0,11,4],[17,8,11,8,"thenBranch"],[17,18,11,18],[17,23,11,23,"MATCH"],[17,28,11,8],[17,32,11,32,"elseBranch"],[17,42,11,42],[17,47,11,47,"MISMATCH"],[17,55,11,4],[17,57,11,57],[18,0,12,8],[18,13,12,15,"match"],[18,18,12,8],[19,0,13,5],[21,0,15,4],[21,8,15,8,"match"],[21,13,15,13],[21,18,15,18,"MATCH"],[21,23,15,8],[21,27,15,27,"thenBranch"],[21,37,15,37],[21,42,15,42,"MATCH"],[21,47,15,8],[21,51,15,51,"elseBranch"],[21,61,15,61],[21,66,15,66,"MATCH"],[21,71,15,4],[21,73,15,73],[22,0,16,8],[22,13,16,15,"match"],[22,18,16,8],[23,0,17,5],[25,0,19,4],[25,8,19,8,"match"],[25,13,19,13],[25,14,19,14,"type"],[25,18,19,8],[25,23,19,23],[25,27,19,8],[25,31,19,31,"match"],[25,36,19,36],[25,37,19,37,"else"],[25,41,19,31],[25,46,19,46,"MISMATCH"],[25,54,19,8],[25,58,19,58,"thenBranch"],[25,68,19,68],[25,73,19,73,"MATCH"],[25,78,19,4],[25,80,19,80],[26,0,20,8,"thenBranch"],[26,6,20,8,"thenBranch"],[26,16,20,18],[26,19,20,21,"match"],[26,24,20,26],[26,25,20,27,"then"],[26,29,20,8],[27,0,21,8,"match"],[27,6,21,8,"match"],[27,11,21,13],[27,14,21,16,"match"],[27,19,21,21],[27,20,21,22,"match"],[27,25,21,8],[28,0,22,5],[30,0,24,4],[30,11,24,11],[31,0,25,8,"type"],[31,6,25,8,"type"],[31,10,25,12],[31,12,25,14],[31,16,24,11],[32,0,26,8,"match"],[32,6,26,8,"match"],[32,11,26,13],[32,13,26,15,"match"],[32,18,24,11],[33,0,27,8,"then"],[33,6,27,8,"then"],[33,10,27,12],[33,12,27,14,"thenBranch"],[33,22,24,11],[34,0,28,8,"else"],[34,6,28,8,"else"],[34,10,28,12],[34,12,28,14,"elseBranch"],[35,0,24,11],[35,5,24,4],[36,0,30,1],[38,0,32,0],[38,11,32,9,"isFunctionType"],[38,25,32,0],[38,26,32,24,"name"],[38,30,32,0],[38,32,32,30],[39,0,33,4],[39,11,34,8,"name"],[39,15,34,12],[39,16,34,13,"length"],[39,22,34,8],[39,25,34,22],[39,26,34,8],[39,30,35,8,"name"],[39,34,35,12],[39,35,35,13,"charCodeAt"],[39,45,35,8],[39,46,35,24,"name"],[39,50,35,28],[39,51,35,29,"length"],[39,57,35,24],[39,60,35,38],[39,61,35,8],[39,67,35,45,"LEFTPARENTHESIS"],[39,82,34,8],[39,86,36,8,"name"],[39,90,36,12],[39,91,36,13,"charCodeAt"],[39,101,36,8],[39,102,36,24,"name"],[39,106,36,28],[39,107,36,29,"length"],[39,113,36,24],[39,116,36,38],[39,117,36,8],[39,123,36,45,"RIGHTPARENTHESIS"],[39,139,33,4],[40,0,38,1],[42,0,40,0],[42,11,40,9,"isEnumCapatible"],[42,26,40,0],[42,27,40,25,"term"],[42,31,40,0],[42,33,40,31],[43,0,41,4],[43,11,42,8,"term"],[43,15,42,12],[43,16,42,13,"type"],[43,20,42,8],[43,25,42,22],[43,34,42,8],[43,38,43,8,"term"],[43,42,43,12],[43,43,43,13,"type"],[43,47,43,8],[43,52,43,22],[43,63,42,8],[43,67,44,8,"term"],[43,71,44,12],[43,72,44,13,"type"],[43,76,44,8],[43,81,44,22],[43,91,42,8],[43,95,45,8,"term"],[43,99,45,12],[43,100,45,13,"type"],[43,104,45,8],[43,109,45,22],[43,115,45,8],[43,119,45,32,"isFunctionType"],[43,133,45,46],[43,134,45,47,"term"],[43,138,45,51],[43,139,45,52,"name"],[43,143,45,46],[43,144,41,4],[44,0,47,1],[46,0,49,0],[46,11,49,9,"buildGroupMatchGraph"],[46,31,49,0],[46,32,49,30,"combinator"],[46,42,49,0],[46,44,49,42,"terms"],[46,49,49,0],[46,51,49,49,"atLeastOneTermMatched"],[46,72,49,0],[46,74,49,72],[47,0,50,4],[47,12,50,12,"combinator"],[47,22,50,4],[48,0,51,8],[48,11,51,13],[48,14,51,8],[49,0,63,12],[49,12,63,16,"result"],[49,18,63,22],[49,21,63,25,"MATCH"],[49,26,63,12],[51,0,65,12],[51,13,65,17],[51,17,65,21,"i"],[51,18,65,22],[51,21,65,25,"terms"],[51,26,65,30],[51,27,65,31,"length"],[51,33,65,25],[51,36,65,40],[51,37,65,12],[51,39,65,43,"i"],[51,40,65,44],[51,44,65,48],[51,45,65,12],[51,47,65,51,"i"],[51,48,65,52],[51,50,65,12],[51,52,65,56],[52,0,66,16],[52,14,66,20,"term"],[52,18,66,24],[52,21,66,27,"terms"],[52,26,66,32],[52,27,66,33,"i"],[52,28,66,32],[52,29,66,16],[53,0,68,16,"result"],[53,10,68,16,"result"],[53,16,68,22],[53,19,68,25,"createCondition"],[53,34,68,40],[53,35,69,20,"term"],[53,39,68,40],[53,41,70,20,"result"],[53,47,68,40],[53,49,71,20,"MISMATCH"],[53,57,68,40],[53,58,68,16],[54,0,73,13],[56,0,73,13],[57,0,75,12],[57,15,75,19,"result"],[57,21,75,12],[59,0,77,8],[59,11,77,13],[59,14,77,8],[60,0,90,12],[60,12,90,16,"result"],[60,18,90,22],[60,21,90,25,"MISMATCH"],[60,29,90,12],[61,0,91,12],[61,12,91,16,"map"],[61,15,91,19],[61,18,91,22],[61,22,91,12],[63,0,93,12],[63,13,93,17],[63,17,93,21,"i"],[63,18,93,22],[63,21,93,25,"terms"],[63,26,93,30],[63,27,93,31,"length"],[63,33,93,25],[63,36,93,40],[63,37,93,12],[63,39,93,43,"i"],[63,40,93,44],[63,44,93,48],[63,45,93,12],[63,47,93,51,"i"],[63,48,93,52],[63,50,93,12],[63,52,93,56],[64,0,94,16],[64,14,94,20,"term"],[64,18,94,24],[64,21,94,27,"terms"],[64,26,94,32],[64,27,94,33,"i"],[64,28,94,32],[64,29,94,16],[66,0,97,16],[66,14,97,20,"isEnumCapatible"],[66,29,97,35],[66,30,97,36,"term"],[66,34,97,35],[66,35,97,16],[66,37,97,43],[67,0,98,20],[67,16,98,24,"map"],[67,19,98,27],[67,24,98,32],[67,28,98,24],[67,32,98,40,"i"],[67,33,98,41],[67,36,98,44],[67,37,98,24],[67,41,98,49,"isEnumCapatible"],[67,56,98,64],[67,57,98,65,"terms"],[67,62,98,70],[67,63,98,71,"i"],[67,64,98,72],[67,67,98,75],[67,68,98,70],[67,69,98,64],[67,70,98,20],[67,72,98,80],[68,0,99,24,"map"],[68,14,99,24,"map"],[68,17,99,27],[68,20,99,30,"Object"],[68,26,99,36],[68,27,99,37,"create"],[68,33,99,30],[68,34,99,44],[68,38,99,30],[68,39,99,24],[69,0,100,24,"result"],[69,14,100,24,"result"],[69,20,100,30],[69,23,100,33,"createCondition"],[69,38,100,48],[69,39,101,28],[70,0,102,32,"type"],[70,16,102,32,"type"],[70,20,102,36],[70,22,102,38],[70,28,101,28],[71,0,103,32,"map"],[71,16,103,32,"map"],[71,19,103,35],[71,21,103,37,"map"],[72,0,101,28],[72,15,100,48],[72,17,105,28,"MATCH"],[72,22,100,48],[72,24,106,28,"result"],[72,30,100,48],[72,31,100,24],[73,0,108,21],[75,0,110,20],[75,16,110,24,"map"],[75,19,110,27],[75,24,110,32],[75,28,110,20],[75,30,110,38],[76,0,111,24],[76,18,111,28,"key"],[76,21,111,31],[76,24,111,34],[76,25,111,35,"isFunctionType"],[76,39,111,49],[76,40,111,50,"term"],[76,44,111,54],[76,45,111,55,"name"],[76,49,111,49],[76,50,111,35],[76,53,111,63,"term"],[76,57,111,67],[76,58,111,68,"name"],[76,62,111,63],[76,63,111,73,"slice"],[76,68,111,63],[76,69,111,79],[76,70,111,63],[76,72,111,82],[76,73,111,83],[76,74,111,63],[76,75,111,35],[76,78,111,88,"term"],[76,82,111,92],[76,83,111,93,"name"],[76,87,111,34],[76,89,111,99,"toLowerCase"],[76,100,111,34],[76,102,111,24],[78,0,112,24],[78,18,112,28,"key"],[78,21,112,31],[78,25,112,35,"map"],[78,28,112,28],[78,33,112,43],[78,38,112,24],[78,40,112,50],[79,0,113,28,"map"],[79,16,113,28,"map"],[79,19,113,31],[79,20,113,32,"key"],[79,23,113,31],[79,24,113,28],[79,27,113,39,"term"],[79,31,113,28],[80,0,114,28],[81,0,115,25],[82,0,116,21],[83,0,117,17],[85,0,119,16,"map"],[85,10,119,16,"map"],[85,13,119,19],[85,16,119,22],[85,20,119,16],[86,0,122,16,"result"],[86,10,122,16,"result"],[86,16,122,22],[86,19,122,25,"createCondition"],[86,34,122,40],[86,35,123,20,"term"],[86,39,122,40],[86,41,124,20,"MATCH"],[86,46,122,40],[86,48,125,20,"result"],[86,54,122,40],[86,55,122,16],[87,0,127,13],[89,0,127,13],[90,0,129,12],[90,15,129,19,"result"],[90,21,129,12],[92,0,131,8],[92,11,131,13],[92,15,131,8],[93,0,137,12],[93,12,137,16,"terms"],[93,17,137,21],[93,18,137,22,"length"],[93,24,137,16],[93,27,137,31],[93,28,137,12],[93,30,137,34],[94,0,138,16],[94,17,138,23],[95,0,139,20,"type"],[95,12,139,20,"type"],[95,16,139,24],[95,18,139,26],[95,29,138,23],[96,0,140,20,"terms"],[96,12,140,20,"terms"],[96,17,140,25],[96,19,140,27,"terms"],[96,24,138,23],[97,0,141,20,"all"],[97,12,141,20,"all"],[97,15,141,23],[97,17,141,25],[98,0,138,23],[98,11,138,16],[99,0,143,13],[101,0,168,12],[101,12,168,16,"result"],[101,18,168,22],[101,21,168,25,"MISMATCH"],[101,29,168,12],[103,0,170,12],[103,13,170,17],[103,17,170,21,"i"],[103,18,170,22],[103,21,170,25,"terms"],[103,26,170,30],[103,27,170,31,"length"],[103,33,170,25],[103,36,170,40],[103,37,170,12],[103,39,170,43,"i"],[103,40,170,44],[103,44,170,48],[103,45,170,12],[103,47,170,51,"i"],[103,48,170,52],[103,50,170,12],[103,52,170,56],[104,0,171,16],[104,14,171,20,"term"],[104,18,171,24],[104,21,171,27,"terms"],[104,26,171,32],[104,27,171,33,"i"],[104,28,171,32],[104,29,171,16],[105,0,172,16],[105,14,172,20,"thenClause"],[105,24,172,16],[107,0,174,16],[107,14,174,20,"terms"],[107,19,174,25],[107,20,174,26,"length"],[107,26,174,20],[107,29,174,35],[107,30,174,16],[107,32,174,38],[108,0,175,20,"thenClause"],[108,12,175,20,"thenClause"],[108,22,175,30],[108,25,175,33,"buildGroupMatchGraph"],[108,45,175,53],[108,46,176,24,"combinator"],[108,56,175,53],[108,58,177,24,"terms"],[108,63,177,29],[108,64,177,30,"filter"],[108,70,177,24],[108,71,177,37],[108,81,177,46,"newGroupTerm"],[108,93,177,37],[108,95,177,60],[109,0,178,28],[109,21,178,35,"newGroupTerm"],[109,33,178,47],[109,38,178,52,"term"],[109,42,178,28],[110,0,179,25],[110,13,177,24],[110,14,175,53],[110,16,180,24],[110,21,175,53],[110,22,175,20],[111,0,182,17],[111,11,174,16],[111,17,182,23],[112,0,183,20,"thenClause"],[112,12,183,20,"thenClause"],[112,22,183,30],[112,25,183,33,"MATCH"],[112,30,183,20],[113,0,184,17],[115,0,186,16,"result"],[115,10,186,16,"result"],[115,16,186,22],[115,19,186,25,"createCondition"],[115,34,186,40],[115,35,187,20,"term"],[115,39,186,40],[115,41,188,20,"thenClause"],[115,51,186,40],[115,53,189,20,"result"],[115,59,186,40],[115,60,186,16],[116,0,191,13],[118,0,191,13],[119,0,193,12],[119,15,193,19,"result"],[119,21,193,12],[121,0,195,8],[121,11,195,13],[121,15,195,8],[122,0,201,12],[122,12,201,16,"terms"],[122,17,201,21],[122,18,201,22,"length"],[122,24,201,16],[122,27,201,31],[122,28,201,12],[122,30,201,34],[123,0,202,16],[123,17,202,23],[124,0,203,20,"type"],[124,12,203,20,"type"],[124,16,203,24],[124,18,203,26],[124,29,202,23],[125,0,204,20,"terms"],[125,12,204,20,"terms"],[125,17,204,25],[125,19,204,27,"terms"],[125,24,202,23],[126,0,205,20,"all"],[126,12,205,20,"all"],[126,15,205,23],[126,17,205,25],[127,0,202,23],[127,11,202,16],[128,0,207,13],[130,0,232,12],[130,12,232,16,"result"],[130,18,232,22],[130,21,232,25,"atLeastOneTermMatched"],[130,42,232,46],[130,45,232,49,"MATCH"],[130,50,232,46],[130,53,232,57,"MISMATCH"],[130,61,232,12],[132,0,234,12],[132,13,234,17],[132,17,234,21,"i"],[132,18,234,22],[132,21,234,25,"terms"],[132,26,234,30],[132,27,234,31,"length"],[132,33,234,25],[132,36,234,40],[132,37,234,12],[132,39,234,43,"i"],[132,40,234,44],[132,44,234,48],[132,45,234,12],[132,47,234,51,"i"],[132,48,234,52],[132,50,234,12],[132,52,234,56],[133,0,235,16],[133,14,235,20,"term"],[133,18,235,24],[133,21,235,27,"terms"],[133,26,235,32],[133,27,235,33,"i"],[133,28,235,32],[133,29,235,16],[134,0,236,16],[134,14,236,20,"thenClause"],[134,24,236,16],[136,0,238,16],[136,14,238,20,"terms"],[136,19,238,25],[136,20,238,26,"length"],[136,26,238,20],[136,29,238,35],[136,30,238,16],[136,32,238,38],[137,0,239,20,"thenClause"],[137,12,239,20,"thenClause"],[137,22,239,30],[137,25,239,33,"buildGroupMatchGraph"],[137,45,239,53],[137,46,240,24,"combinator"],[137,56,239,53],[137,58,241,24,"terms"],[137,63,241,29],[137,64,241,30,"filter"],[137,70,241,24],[137,71,241,37],[137,81,241,46,"newGroupTerm"],[137,93,241,37],[137,95,241,60],[138,0,242,28],[138,21,242,35,"newGroupTerm"],[138,33,242,47],[138,38,242,52,"term"],[138,42,242,28],[139,0,243,25],[139,13,241,24],[139,14,239,53],[139,16,244,24],[139,20,239,53],[139,21,239,20],[140,0,246,17],[140,11,238,16],[140,17,246,23],[141,0,247,20,"thenClause"],[141,12,247,20,"thenClause"],[141,22,247,30],[141,25,247,33,"MATCH"],[141,30,247,20],[142,0,248,17],[144,0,250,16,"result"],[144,10,250,16,"result"],[144,16,250,22],[144,19,250,25,"createCondition"],[144,34,250,40],[144,35,251,20,"term"],[144,39,250,40],[144,41,252,20,"thenClause"],[144,51,250,40],[144,53,253,20,"result"],[144,59,250,40],[144,60,250,16],[145,0,255,13],[147,0,255,13],[148,0,257,12],[148,15,257,19,"result"],[148,21,257,12],[149,0,50,4],[150,0,259,1],[152,0,261,0],[152,11,261,9,"buildMultiplierMatchGraph"],[152,36,261,0],[152,37,261,35,"node"],[152,41,261,0],[152,43,261,41],[153,0,262,4],[153,8,262,8,"result"],[153,14,262,14],[153,17,262,17,"MATCH"],[153,22,262,4],[155,0,263,4],[155,8,263,8,"matchTerm"],[155,17,263,17],[155,20,263,20,"buildMatchGraph"],[155,36,263,35],[155,37,263,36,"node"],[155,41,263,40],[155,42,263,41,"term"],[155,46,263,35],[155,47,263,4],[157,0,265,4],[157,8,265,8,"node"],[157,12,265,12],[157,13,265,13,"max"],[157,16,265,8],[157,21,265,21],[157,22,265,4],[157,24,265,24],[158,0,267,8,"matchTerm"],[158,6,267,8,"matchTerm"],[158,15,267,17],[158,18,267,20,"createCondition"],[158,33,267,35],[158,34,268,12,"matchTerm"],[158,43,267,35],[158,45,269,12,"DISALLOW_EMPTY"],[158,59,267,35],[158,61,270,12,"MISMATCH"],[158,69,267,35],[158,70,267,8],[159,0,275,8,"result"],[159,6,275,8,"result"],[159,12,275,14],[159,15,275,17,"createCondition"],[159,30,275,32],[159,31,276,12,"matchTerm"],[159,40,275,32],[159,42,277,12],[159,46,275,32],[159,48,278,12,"MISMATCH"],[159,56,275,32],[159,57,275,8],[160,0,281,8,"result"],[160,6,281,8,"result"],[160,12,281,14],[160,13,281,15,"then"],[160,17,281,8],[160,20,281,22,"createCondition"],[160,35,281,37],[160,36,282,12,"MATCH"],[160,41,281,37],[160,43,283,12,"MATCH"],[160,48,281,37],[160,50,284,12,"result"],[160,56,281,37],[160,57,281,8],[162,0,287,8],[162,10,287,12,"node"],[162,14,287,16],[162,15,287,17,"comma"],[162,20,287,8],[162,22,287,24],[163,0,288,12,"result"],[163,8,288,12,"result"],[163,14,288,18],[163,15,288,19,"then"],[163,19,288,12],[163,20,288,24,"else"],[163,24,288,12],[163,27,288,31,"createCondition"],[163,42,288,46],[163,43,289,16],[164,0,289,18,"type"],[164,10,289,18,"type"],[164,14,289,22],[164,16,289,24],[164,23,289,16],[165,0,289,33,"syntax"],[165,10,289,33,"syntax"],[165,16,289,39],[165,18,289,41,"node"],[166,0,289,16],[166,9,288,46],[166,11,290,16,"result"],[166,17,288,46],[166,19,291,16,"MISMATCH"],[166,27,288,46],[166,28,288,12],[167,0,293,9],[168,0,294,5],[168,5,265,4],[168,11,294,11],[169,0,296,8],[169,11,296,13],[169,15,296,17,"i"],[169,16,296,18],[169,19,296,21,"node"],[169,23,296,25],[169,24,296,26,"min"],[169,27,296,21],[169,31,296,33],[169,32,296,8],[169,34,296,36,"i"],[169,35,296,37],[169,39,296,41,"node"],[169,43,296,45],[169,44,296,46,"max"],[169,47,296,8],[169,49,296,51,"i"],[169,50,296,52],[169,52,296,8],[169,54,296,56],[170,0,297,12],[170,12,297,16,"node"],[170,16,297,20],[170,17,297,21,"comma"],[170,22,297,16],[170,26,297,30,"result"],[170,32,297,36],[170,37,297,41,"MATCH"],[170,42,297,12],[170,44,297,48],[171,0,298,16,"result"],[171,10,298,16,"result"],[171,16,298,22],[171,19,298,25,"createCondition"],[171,34,298,40],[171,35,299,20],[172,0,299,22,"type"],[172,12,299,22,"type"],[172,16,299,26],[172,18,299,28],[172,25,299,20],[173,0,299,37,"syntax"],[173,12,299,37,"syntax"],[173,18,299,43],[173,20,299,45,"node"],[174,0,299,20],[174,11,298,40],[174,13,300,20,"result"],[174,19,298,40],[174,21,301,20,"MISMATCH"],[174,29,298,40],[174,30,298,16],[175,0,303,13],[177,0,305,12,"result"],[177,8,305,12,"result"],[177,14,305,18],[177,17,305,21,"createCondition"],[177,32,305,36],[177,33,306,16,"matchTerm"],[177,42,305,36],[177,44,307,16,"createCondition"],[177,59,307,31],[177,60,308,20,"MATCH"],[177,65,307,31],[177,67,309,20,"MATCH"],[177,72,307,31],[177,74,310,20,"result"],[177,80,307,31],[177,81,305,36],[177,83,312,16,"MISMATCH"],[177,91,305,36],[177,92,305,12],[178,0,314,9],[179,0,315,5],[181,0,317,4],[181,8,317,8,"node"],[181,12,317,12],[181,13,317,13,"min"],[181,16,317,8],[181,21,317,21],[181,22,317,4],[181,24,317,24],[182,0,319,8,"result"],[182,6,319,8,"result"],[182,12,319,14],[182,15,319,17,"createCondition"],[182,30,319,32],[182,31,320,12,"MATCH"],[182,36,319,32],[182,38,321,12,"MATCH"],[182,43,319,32],[182,45,322,12,"result"],[182,51,319,32],[182,52,319,8],[183,0,324,5],[183,5,317,4],[183,11,324,11],[184,0,326,8],[184,11,326,13],[184,15,326,17,"i"],[184,16,326,18],[184,19,326,21],[184,20,326,8],[184,22,326,24,"i"],[184,23,326,25],[184,26,326,28,"node"],[184,30,326,32],[184,31,326,33,"min"],[184,34,326,28],[184,37,326,39],[184,38,326,8],[184,40,326,42,"i"],[184,41,326,43],[184,43,326,8],[184,45,326,47],[185,0,327,12],[185,12,327,16,"node"],[185,16,327,20],[185,17,327,21,"comma"],[185,22,327,16],[185,26,327,30,"result"],[185,32,327,36],[185,37,327,41,"MATCH"],[185,42,327,12],[185,44,327,48],[186,0,328,16,"result"],[186,10,328,16,"result"],[186,16,328,22],[186,19,328,25,"createCondition"],[186,34,328,40],[186,35,329,20],[187,0,329,22,"type"],[187,12,329,22,"type"],[187,16,329,26],[187,18,329,28],[187,25,329,20],[188,0,329,37,"syntax"],[188,12,329,37,"syntax"],[188,18,329,43],[188,20,329,45,"node"],[189,0,329,20],[189,11,328,40],[189,13,330,20,"result"],[189,19,328,40],[189,21,331,20,"MISMATCH"],[189,29,328,40],[189,30,328,16],[190,0,333,13],[192,0,335,12,"result"],[192,8,335,12,"result"],[192,14,335,18],[192,17,335,21,"createCondition"],[192,32,335,36],[192,33,336,16,"matchTerm"],[192,42,335,36],[192,44,337,16,"result"],[192,50,335,36],[192,52,338,16,"MISMATCH"],[192,60,335,36],[192,61,335,12],[193,0,340,9],[194,0,341,5],[196,0,343,4],[196,11,343,11,"result"],[196,17,343,4],[197,0,344,1],[199,0,346,0],[199,11,346,9,"buildMatchGraph"],[199,27,346,0],[199,28,346,25,"node"],[199,32,346,0],[199,34,346,31],[200,0,347,4],[200,8,347,8],[200,15,347,15,"node"],[200,19,347,8],[200,24,347,24],[200,34,347,4],[200,36,347,36],[201,0,348,8],[201,13,348,15],[202,0,349,12,"type"],[202,8,349,12,"type"],[202,12,349,16],[202,14,349,18],[202,23,348,15],[203,0,350,12,"fn"],[203,8,350,12,"fn"],[203,10,350,14],[203,12,350,16,"node"],[204,0,348,15],[204,7,348,8],[205,0,352,5],[207,0,354,4],[207,12,354,12,"node"],[207,16,354,16],[207,17,354,17,"type"],[207,21,354,4],[208,0,355,8],[208,11,355,13],[208,18,355,8],[209,0,356,12],[209,12,356,16,"result"],[209,18,356,22],[209,21,356,25,"buildGroupMatchGraph"],[209,41,356,45],[209,42,357,16,"node"],[209,46,357,20],[209,47,357,21,"combinator"],[209,57,356,45],[209,59,358,16,"node"],[209,63,358,20],[209,64,358,21,"terms"],[209,69,358,16],[209,70,358,27,"map"],[209,73,358,16],[209,74,358,31,"buildMatchGraph"],[209,90,358,16],[209,91,356,45],[209,93,359,16],[209,98,356,45],[209,99,356,12],[211,0,362,12],[211,12,362,16,"node"],[211,16,362,20],[211,17,362,21,"disallowEmpty"],[211,30,362,12],[211,32,362,36],[212,0,363,16,"result"],[212,10,363,16,"result"],[212,16,363,22],[212,19,363,25,"createCondition"],[212,34,363,40],[212,35,364,20,"result"],[212,41,363,40],[212,43,365,20,"DISALLOW_EMPTY"],[212,57,363,40],[212,59,366,20,"MISMATCH"],[212,67,363,40],[212,68,363,16],[213,0,368,13],[215,0,370,12],[215,15,370,19,"result"],[215,21,370,12],[217,0,372,8],[217,11,372,13],[217,23,372,8],[218,0,373,12],[218,15,373,19,"buildMultiplierMatchGraph"],[218,40,373,44],[218,41,373,45,"node"],[218,45,373,44],[218,46,373,12],[220,0,375,8],[220,11,375,13],[220,17,375,8],[221,0,376,8],[221,11,376,13],[221,21,376,8],[222,0,377,12],[222,15,377,19],[223,0,378,16,"type"],[223,10,378,16,"type"],[223,14,378,20],[223,16,378,22,"node"],[223,20,378,26],[223,21,378,27,"type"],[223,25,377,19],[224,0,379,16,"name"],[224,10,379,16,"name"],[224,14,379,20],[224,16,379,22,"node"],[224,20,379,26],[224,21,379,27,"name"],[224,25,377,19],[225,0,380,16,"syntax"],[225,10,380,16,"syntax"],[225,16,380,22],[225,18,380,24,"node"],[226,0,377,19],[226,9,377,12],[228,0,383,8],[228,11,383,13],[228,20,383,8],[229,0,384,12],[229,15,384,19],[230,0,385,16,"type"],[230,10,385,16,"type"],[230,14,385,20],[230,16,385,22,"node"],[230,20,385,26],[230,21,385,27,"type"],[230,25,384,19],[231,0,386,16,"name"],[231,10,386,16,"name"],[231,14,386,20],[231,16,386,22,"node"],[231,20,386,26],[231,21,386,27,"name"],[231,25,386,22],[231,26,386,32,"toLowerCase"],[231,37,386,22],[231,39,384,19],[232,0,387,16,"syntax"],[232,10,387,16,"syntax"],[232,16,387,22],[232,18,387,24,"node"],[233,0,384,19],[233,9,384,12],[235,0,390,8],[235,11,390,13],[235,22,390,8],[236,0,391,12],[236,15,391,19],[237,0,392,16,"type"],[237,10,392,16,"type"],[237,14,392,20],[237,16,392,22,"node"],[237,20,392,26],[237,21,392,27,"type"],[237,25,391,19],[238,0,393,16,"name"],[238,10,393,16,"name"],[238,14,393,20],[238,16,393,22],[238,22,393,28,"node"],[238,26,393,32],[238,27,393,33,"name"],[238,31,393,28],[238,32,393,38,"toLowerCase"],[238,43,393,28],[238,45,391,19],[239,0,394,16,"syntax"],[239,10,394,16,"syntax"],[239,16,394,22],[239,18,394,24,"node"],[240,0,391,19],[240,9,391,12],[242,0,397,8],[242,11,397,13],[242,21,397,8],[243,0,398,12],[243,15,398,19],[244,0,399,16,"type"],[244,10,399,16,"type"],[244,14,399,20],[244,16,399,22,"node"],[244,20,399,26],[244,21,399,27,"type"],[244,25,398,19],[245,0,400,16,"name"],[245,10,400,16,"name"],[245,14,400,20],[245,16,400,22,"node"],[245,20,400,26],[245,21,400,27,"name"],[245,25,400,22],[245,26,400,32,"toLowerCase"],[245,37,400,22],[245,42,400,48],[245,45,398,19],[246,0,401,16,"syntax"],[246,10,401,16,"syntax"],[246,16,401,22],[246,18,401,24,"node"],[247,0,398,19],[247,9,398,12],[249,0,404,8],[249,11,404,13],[249,19,404,8],[250,0,406,12],[250,12,406,16,"node"],[250,16,406,20],[250,17,406,21,"value"],[250,22,406,16],[250,23,406,27,"length"],[250,29,406,16],[250,34,406,38],[250,35,406,12],[250,37,406,41],[251,0,407,16],[251,17,407,23],[252,0,408,20,"type"],[252,12,408,20,"type"],[252,16,408,24],[252,18,408,26],[252,25,407,23],[253,0,409,20,"value"],[253,12,409,20,"value"],[253,17,409,25],[253,19,409,27,"node"],[253,23,409,31],[253,24,409,32,"value"],[253,29,409,27],[253,30,409,38,"charAt"],[253,36,409,27],[253,37,409,45],[253,38,409,27],[253,39,407,23],[254,0,410,20,"syntax"],[254,12,410,20,"syntax"],[254,18,410,26],[254,20,410,28,"node"],[255,0,407,23],[255,11,407,16],[256,0,412,13],[258,0,415,12],[258,15,415,19],[259,0,416,16,"type"],[259,10,416,16,"type"],[259,14,416,20],[259,16,416,22,"node"],[259,20,416,26],[259,21,416,27,"type"],[259,25,415,19],[260,0,417,16,"value"],[260,10,417,16,"value"],[260,15,417,21],[260,17,417,23,"node"],[260,21,417,27],[260,22,417,28,"value"],[260,27,417,23],[260,28,417,34,"substr"],[260,34,417,23],[260,35,417,41],[260,36,417,23],[260,38,417,44,"node"],[260,42,417,48],[260,43,417,49,"value"],[260,48,417,44],[260,49,417,55,"length"],[260,55,417,44],[260,58,417,64],[260,59,417,23],[260,61,417,67,"replace"],[260,68,417,23],[260,69,417,75],[260,75,417,23],[260,77,417,83],[260,81,417,23],[260,82,415,19],[261,0,418,16,"syntax"],[261,10,418,16,"syntax"],[261,16,418,22],[261,18,418,24,"node"],[262,0,415,19],[262,9,415,12],[264,0,421,8],[264,11,421,13],[264,18,421,8],[265,0,422,12],[265,15,422,19],[266,0,423,16,"type"],[266,10,423,16,"type"],[266,14,423,20],[266,16,423,22,"node"],[266,20,423,26],[266,21,423,27,"type"],[266,25,422,19],[267,0,424,16,"value"],[267,10,424,16,"value"],[267,15,424,21],[267,17,424,23,"node"],[267,21,424,27],[267,22,424,28,"value"],[267,27,422,19],[268,0,425,16,"syntax"],[268,10,425,16,"syntax"],[268,16,425,22],[268,18,425,24,"node"],[269,0,422,19],[269,9,422,12],[271,0,428,8],[271,11,428,13],[271,18,428,8],[272,0,429,12],[272,15,429,19],[273,0,430,16,"type"],[273,10,430,16,"type"],[273,14,430,20],[273,16,430,22,"node"],[273,20,430,26],[273,21,430,27,"type"],[273,25,429,19],[274,0,431,16,"syntax"],[274,10,431,16,"syntax"],[274,16,431,22],[274,18,431,24,"node"],[275,0,429,19],[275,9,429,12],[277,0,434,8],[278,0,435,12],[278,14,435,18],[278,18,435,22,"Error"],[278,23,435,18],[278,24,435,28],[278,44,435,18],[278,46,435,50,"node"],[278,50,435,54],[278,51,435,55,"type"],[278,55,435,18],[278,56,435,12],[279,0,354,4],[280,0,437,1],[282,0,439,0,"module"],[282,2,439,0,"module"],[282,8,439,6],[282,9,439,7,"exports"],[282,16,439,0],[282,19,439,17],[283,0,440,4,"MATCH"],[283,4,440,4,"MATCH"],[283,9,440,9],[283,11,440,11,"MATCH"],[283,16,439,17],[284,0,441,4,"MISMATCH"],[284,4,441,4,"MISMATCH"],[284,12,441,12],[284,14,441,14,"MISMATCH"],[284,22,439,17],[285,0,442,4,"DISALLOW_EMPTY"],[285,4,442,4,"DISALLOW_EMPTY"],[285,18,442,18],[285,20,442,20,"DISALLOW_EMPTY"],[285,34,439,17],[286,0,443,4,"buildMatchGraph"],[286,4,443,4,"buildMatchGraph"],[286,19,443,19],[286,21,443,21],[286,46,443,30,"syntaxTree"],[286,56,443,21],[286,58,443,42,"ref"],[286,61,443,21],[286,63,443,47],[287,0,444,8],[287,10,444,12],[287,17,444,19,"syntaxTree"],[287,27,444,12],[287,32,444,34],[287,40,444,8],[287,42,444,44],[288,0,445,12,"syntaxTree"],[288,8,445,12,"syntaxTree"],[288,18,445,22],[288,21,445,25,"parse"],[288,26,445,30],[288,27,445,31,"syntaxTree"],[288,37,445,30],[288,38,445,12],[289,0,446,9],[291,0,448,8],[291,13,448,15],[292,0,449,12,"type"],[292,8,449,12,"type"],[292,12,449,16],[292,14,449,18],[292,26,448,15],[293,0,450,12,"match"],[293,8,450,12,"match"],[293,13,450,17],[293,15,450,19,"buildMatchGraph"],[293,31,450,34],[293,32,450,35,"syntaxTree"],[293,42,450,34],[293,43,448,15],[294,0,451,12,"syntax"],[294,8,451,12,"syntax"],[294,14,451,18],[294,16,451,20,"ref"],[294,19,451,23],[294,23,451,27],[294,27,448,15],[295,0,452,12,"source"],[295,8,452,12,"source"],[295,14,452,18],[295,16,452,20,"syntaxTree"],[296,0,448,15],[296,7,448,8],[297,0,454,5],[298,0,439,17],[298,3,439,0]]},"type":"js/module"}]}