{"dependencies":[{"name":"./error","data":{"isAsync":false}},{"name":"../utils/names","data":{"isAsync":false}},{"name":"./generic","data":{"isAsync":false}},{"name":"../definition-syntax/parse","data":{"isAsync":false}},{"name":"../definition-syntax/generate","data":{"isAsync":false}},{"name":"../definition-syntax/walk","data":{"isAsync":false}},{"name":"./prepare-tokens","data":{"isAsync":false}},{"name":"./match-graph","data":{"isAsync":false}},{"name":"./match","data":{"isAsync":false}},{"name":"./trace","data":{"isAsync":false}},{"name":"./search","data":{"isAsync":false}},{"name":"./structure","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var SyntaxReferenceError = _$$_REQUIRE(_dependencyMap[0], \"./error\").SyntaxReferenceError;\n\n  var MatchError = _$$_REQUIRE(_dependencyMap[0], \"./error\").MatchError;\n\n  var names = _$$_REQUIRE(_dependencyMap[1], \"../utils/names\");\n\n  var generic = _$$_REQUIRE(_dependencyMap[2], \"./generic\");\n\n  var parse = _$$_REQUIRE(_dependencyMap[3], \"../definition-syntax/parse\");\n\n  var generate = _$$_REQUIRE(_dependencyMap[4], \"../definition-syntax/generate\");\n\n  var walk = _$$_REQUIRE(_dependencyMap[5], \"../definition-syntax/walk\");\n\n  var prepareTokens = _$$_REQUIRE(_dependencyMap[6], \"./prepare-tokens\");\n\n  var buildMatchGraph = _$$_REQUIRE(_dependencyMap[7], \"./match-graph\").buildMatchGraph;\n\n  var matchAsTree = _$$_REQUIRE(_dependencyMap[8], \"./match\").matchAsTree;\n\n  var trace = _$$_REQUIRE(_dependencyMap[9], \"./trace\");\n\n  var search = _$$_REQUIRE(_dependencyMap[10], \"./search\");\n\n  var getStructureFromConfig = _$$_REQUIRE(_dependencyMap[11], \"./structure\").getStructureFromConfig;\n\n  var cssWideKeywords = buildMatchGraph('inherit | initial | unset');\n  var cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\n  function dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var name in map) {\n      if (map[name].syntax) {\n        result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax, {\n          compact: compact\n        });\n      }\n    }\n\n    return result;\n  }\n\n  function valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n      if (tokens[i].value.toLowerCase() === 'var(') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function buildMatchResult(match, error, iterations) {\n    return {\n      matched: match,\n      iterations: iterations,\n      error: error,\n      getTrace: trace.getTrace,\n      isType: trace.isType,\n      isProperty: trace.isProperty,\n      isKeyword: trace.isKeyword\n    };\n  }\n\n  function matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = prepareTokens(value, lexer.syntax);\n    var result;\n\n    if (valueHasVar(tokens)) {\n      return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCommon) {\n      result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n\n    if (!useCommon || !result.match) {\n      result = matchAsTree(tokens, syntax.match, lexer);\n\n      if (!result.match) {\n        return buildMatchResult(null, new MatchError(result.reason, syntax.syntax, value, result), result.iterations);\n      }\n    }\n\n    return buildMatchResult(result.match, null, result.iterations);\n  }\n\n  var Lexer = function Lexer(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || getStructureFromConfig(config);\n\n    if (config) {\n      if (config.types) {\n        for (var name in config.types) {\n          this.addType_(name, config.types[name]);\n        }\n      }\n\n      if (config.generic) {\n        this.generic = true;\n\n        for (var name in generic) {\n          this.addType_(name, generic[name]);\n        }\n      }\n\n      if (config.properties) {\n        for (var name in config.properties) {\n          this.addProperty_(name, config.properties[name]);\n        }\n      }\n    }\n  };\n\n  Lexer.prototype = {\n    structure: {},\n    checkStructure: function checkStructure(ast) {\n      function collectWarning(node, message) {\n        warns.push({\n          node: node,\n          message: message\n        });\n      }\n\n      var structure = this.structure;\n      var warns = [];\n      this.syntax.walk(ast, function (node) {\n        if (structure.hasOwnProperty(node.type)) {\n          structure[node.type].check(node, collectWarning);\n        } else {\n          collectWarning(node, 'Unknown node type `' + node.type + '`');\n        }\n      });\n      return warns.length ? warns : false;\n    },\n    createDescriptor: function createDescriptor(syntax, type, name) {\n      var ref = {\n        type: type,\n        name: name\n      };\n      var descriptor = {\n        type: type,\n        name: name,\n        syntax: null,\n        match: null\n      };\n\n      if (typeof syntax === 'function') {\n        descriptor.match = buildMatchGraph(syntax, ref);\n      } else {\n        if (typeof syntax === 'string') {\n          Object.defineProperty(descriptor, 'syntax', {\n            get: function get() {\n              Object.defineProperty(descriptor, 'syntax', {\n                value: parse(syntax)\n              });\n              return descriptor.syntax;\n            }\n          });\n        } else {\n          descriptor.syntax = syntax;\n        }\n\n        Object.defineProperty(descriptor, 'match', {\n          get: function get() {\n            Object.defineProperty(descriptor, 'match', {\n              value: buildMatchGraph(descriptor.syntax, ref)\n            });\n            return descriptor.match;\n          }\n        });\n      }\n\n      return descriptor;\n    },\n    addProperty_: function addProperty_(name, syntax) {\n      this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function addType_(name, syntax) {\n      this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n      if (syntax === generic['-ms-legacy-expression']) {\n        this.valueCommonSyntax = cssWideKeywordsWithExpression;\n      }\n    },\n    matchDeclaration: function matchDeclaration(node) {\n      if (node.type !== 'Declaration') {\n        return buildMatchResult(null, new Error('Not a Declaration node'));\n      }\n\n      return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function matchProperty(propertyName, value) {\n      var property = names.property(propertyName);\n\n      if (property.custom) {\n        return buildMatchResult(null, new Error('Lexer matching doesn\\'t applicable for custom properties'));\n      }\n\n      var propertySyntax = property.vendor ? this.getProperty(property.name) || this.getProperty(property.basename) : this.getProperty(property.name);\n\n      if (!propertySyntax) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown property', propertyName));\n      }\n\n      return matchSyntax(this, propertySyntax, value, true);\n    },\n    matchType: function matchType(typeName, value) {\n      var typeSyntax = this.getType(typeName);\n\n      if (!typeSyntax) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n      }\n\n      return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function match(syntax, value) {\n      if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n        return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n      }\n\n      if (typeof syntax === 'string' || !syntax.match) {\n        syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n      }\n\n      return matchSyntax(this, syntax, value, false);\n    },\n    findValueFragments: function findValueFragments(propertyName, value, type, name) {\n      return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function findDeclarationValueFragments(declaration, type, name) {\n      return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function findAllFragments(ast, type, name) {\n      var result = [];\n      this.syntax.walk(ast, {\n        visit: 'Declaration',\n        enter: function (declaration) {\n          result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n        }.bind(this)\n      });\n      return result;\n    },\n    getProperty: function getProperty(name) {\n      return this.properties.hasOwnProperty(name) ? this.properties[name] : null;\n    },\n    getType: function getType(name) {\n      return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n    validate: function validate() {\n      function validate(syntax, name, broken, descriptor) {\n        if (broken.hasOwnProperty(name)) {\n          return broken[name];\n        }\n\n        broken[name] = false;\n\n        if (descriptor.syntax !== null) {\n          walk(descriptor.syntax, function (node) {\n            if (node.type !== 'Type' && node.type !== 'Property') {\n              return;\n            }\n\n            var map = node.type === 'Type' ? syntax.types : syntax.properties;\n            var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n            if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n              broken[name] = true;\n            }\n          }, this);\n        }\n      }\n\n      var brokenTypes = {};\n      var brokenProperties = {};\n\n      for (var key in this.types) {\n        validate(this, key, brokenTypes, this.types[key]);\n      }\n\n      for (var key in this.properties) {\n        validate(this, key, brokenProperties, this.properties[key]);\n      }\n\n      brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n        return brokenTypes[name];\n      });\n      brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n        return brokenProperties[name];\n      });\n\n      if (brokenTypes.length || brokenProperties.length) {\n        return {\n          types: brokenTypes,\n          properties: brokenProperties\n        };\n      }\n\n      return null;\n    },\n    dump: function dump(syntaxAsAst, pretty) {\n      return {\n        generic: this.generic,\n        types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n        properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst)\n      };\n    },\n    toString: function toString() {\n      return JSON.stringify(this.dump());\n    }\n  };\n  module.exports = Lexer;\n});","map":[[2,0,1,0],[2,6,1,4,"SyntaxReferenceError"],[2,26,1,24],[2,29,1,27,"require"],[2,40,1,34],[2,70,1,27],[2,71,1,46,"SyntaxReferenceError"],[2,91,1,0],[4,0,2,0],[4,6,2,4,"MatchError"],[4,16,2,14],[4,19,2,17,"require"],[4,30,2,24],[4,60,2,17],[4,61,2,36,"MatchError"],[4,71,2,0],[6,0,3,0],[6,6,3,4,"names"],[6,11,3,9],[6,14,3,12,"require"],[6,25,3,19],[6,62,3,0],[8,0,4,0],[8,6,4,4,"generic"],[8,13,4,11],[8,16,4,14,"require"],[8,27,4,21],[8,59,4,0],[10,0,5,0],[10,6,5,4,"parse"],[10,11,5,9],[10,14,5,12,"require"],[10,25,5,19],[10,74,5,0],[12,0,6,0],[12,6,6,4,"generate"],[12,14,6,12],[12,17,6,15,"require"],[12,28,6,22],[12,80,6,0],[14,0,7,0],[14,6,7,4,"walk"],[14,10,7,8],[14,13,7,11,"require"],[14,24,7,18],[14,72,7,0],[16,0,8,0],[16,6,8,4,"prepareTokens"],[16,19,8,17],[16,22,8,20,"require"],[16,33,8,27],[16,72,8,0],[18,0,9,0],[18,6,9,4,"buildMatchGraph"],[18,21,9,19],[18,24,9,22,"require"],[18,35,9,29],[18,71,9,22],[18,72,9,47,"buildMatchGraph"],[18,87,9,0],[20,0,10,0],[20,6,10,4,"matchAsTree"],[20,17,10,15],[20,20,10,18,"require"],[20,31,10,25],[20,61,10,18],[20,62,10,37,"matchAsTree"],[20,73,10,0],[22,0,11,0],[22,6,11,4,"trace"],[22,11,11,9],[22,14,11,12,"require"],[22,25,11,19],[22,55,11,0],[24,0,12,0],[24,6,12,4,"search"],[24,12,12,10],[24,15,12,13,"require"],[24,26,12,20],[24,58,12,0],[26,0,13,0],[26,6,13,4,"getStructureFromConfig"],[26,28,13,26],[26,31,13,29,"require"],[26,42,13,36],[26,77,13,29],[26,78,13,52,"getStructureFromConfig"],[26,100,13,0],[28,0,14,0],[28,6,14,4,"cssWideKeywords"],[28,21,14,19],[28,24,14,22,"buildMatchGraph"],[28,39,14,37],[28,40,14,38],[28,67,14,37],[28,68,14,0],[29,0,15,0],[29,6,15,4,"cssWideKeywordsWithExpression"],[29,35,15,33],[29,38,15,36,"buildMatchGraph"],[29,53,15,51],[29,54,15,52],[29,107,15,51],[29,108,15,0],[31,0,17,0],[31,11,17,9,"dumpMapSyntax"],[31,24,17,0],[31,25,17,23,"map"],[31,28,17,0],[31,30,17,28,"compact"],[31,37,17,0],[31,39,17,37,"syntaxAsAst"],[31,50,17,0],[31,52,17,50],[32,0,18,4],[32,8,18,8,"result"],[32,14,18,14],[32,17,18,17],[32,19,18,4],[34,0,20,4],[34,9,20,9],[34,13,20,13,"name"],[34,17,20,4],[34,21,20,21,"map"],[34,24,20,4],[34,26,20,26],[35,0,21,8],[35,10,21,12,"map"],[35,13,21,15],[35,14,21,16,"name"],[35,18,21,15],[35,19,21,12],[35,20,21,22,"syntax"],[35,26,21,8],[35,28,21,30],[36,0,22,12,"result"],[36,8,22,12,"result"],[36,14,22,18],[36,15,22,19,"name"],[36,19,22,18],[36,20,22,12],[36,23,22,27,"syntaxAsAst"],[36,34,22,38],[36,37,23,18,"map"],[36,40,23,21],[36,41,23,22,"name"],[36,45,23,21],[36,46,23,18],[36,47,23,28,"syntax"],[36,53,22,38],[36,56,24,18,"generate"],[36,64,24,26],[36,65,24,27,"map"],[36,68,24,30],[36,69,24,31,"name"],[36,73,24,30],[36,74,24,27],[36,75,24,37,"syntax"],[36,81,24,26],[36,83,24,45],[37,0,24,47,"compact"],[37,10,24,47,"compact"],[37,17,24,54],[37,19,24,56,"compact"],[38,0,24,45],[38,9,24,26],[38,10,22,12],[39,0,25,9],[40,0,26,5],[42,0,28,4],[42,11,28,11,"result"],[42,17,28,4],[43,0,29,1],[45,0,31,0],[45,11,31,9,"valueHasVar"],[45,22,31,0],[45,23,31,21,"tokens"],[45,29,31,0],[45,31,31,29],[46,0,32,4],[46,9,32,9],[46,13,32,13,"i"],[46,14,32,14],[46,17,32,17],[46,18,32,4],[46,20,32,20,"i"],[46,21,32,21],[46,24,32,24,"tokens"],[46,30,32,30],[46,31,32,31,"length"],[46,37,32,4],[46,39,32,39,"i"],[46,40,32,40],[46,42,32,4],[46,44,32,44],[47,0,33,8],[47,10,33,12,"tokens"],[47,16,33,18],[47,17,33,19,"i"],[47,18,33,18],[47,19,33,12],[47,20,33,22,"value"],[47,25,33,12],[47,26,33,28,"toLowerCase"],[47,37,33,12],[47,44,33,46],[47,50,33,8],[47,52,33,54],[48,0,34,12],[48,15,34,19],[48,19,34,12],[49,0,35,9],[50,0,36,5],[52,0,38,4],[52,11,38,11],[52,16,38,4],[53,0,39,1],[55,0,41,0],[55,11,41,9,"buildMatchResult"],[55,27,41,0],[55,28,41,26,"match"],[55,33,41,0],[55,35,41,33,"error"],[55,40,41,0],[55,42,41,40,"iterations"],[55,52,41,0],[55,54,41,52],[56,0,42,4],[56,11,42,11],[57,0,43,8,"matched"],[57,6,43,8,"matched"],[57,13,43,15],[57,15,43,17,"match"],[57,20,42,11],[58,0,44,8,"iterations"],[58,6,44,8,"iterations"],[58,16,44,18],[58,18,44,20,"iterations"],[58,28,42,11],[59,0,45,8,"error"],[59,6,45,8,"error"],[59,11,45,13],[59,13,45,15,"error"],[59,18,42,11],[60,0,46,8,"getTrace"],[60,6,46,8,"getTrace"],[60,14,46,16],[60,16,46,18,"trace"],[60,21,46,23],[60,22,46,24,"getTrace"],[60,30,42,11],[61,0,47,8,"isType"],[61,6,47,8,"isType"],[61,12,47,14],[61,14,47,16,"trace"],[61,19,47,21],[61,20,47,22,"isType"],[61,26,42,11],[62,0,48,8,"isProperty"],[62,6,48,8,"isProperty"],[62,16,48,18],[62,18,48,20,"trace"],[62,23,48,25],[62,24,48,26,"isProperty"],[62,34,42,11],[63,0,49,8,"isKeyword"],[63,6,49,8,"isKeyword"],[63,15,49,17],[63,17,49,19,"trace"],[63,22,49,24],[63,23,49,25,"isKeyword"],[64,0,42,11],[64,5,42,4],[65,0,51,1],[67,0,53,0],[67,11,53,9,"matchSyntax"],[67,22,53,0],[67,23,53,21,"lexer"],[67,28,53,0],[67,30,53,28,"syntax"],[67,36,53,0],[67,38,53,36,"value"],[67,43,53,0],[67,45,53,43,"useCommon"],[67,54,53,0],[67,56,53,54],[68,0,54,4],[68,8,54,8,"tokens"],[68,14,54,14],[68,17,54,17,"prepareTokens"],[68,30,54,30],[68,31,54,31,"value"],[68,36,54,30],[68,38,54,38,"lexer"],[68,43,54,43],[68,44,54,44,"syntax"],[68,50,54,30],[68,51,54,4],[69,0,55,4],[69,8,55,8,"result"],[69,14,55,4],[71,0,57,4],[71,8,57,8,"valueHasVar"],[71,19,57,19],[71,20,57,20,"tokens"],[71,26,57,19],[71,27,57,4],[71,29,57,29],[72,0,58,8],[72,13,58,15,"buildMatchResult"],[72,29,58,31],[72,30,58,32],[72,34,58,31],[72,36,58,38],[72,40,58,42,"Error"],[72,45,58,38],[72,46,58,48],[72,95,58,38],[72,96,58,31],[72,97,58,8],[73,0,59,5],[75,0,61,4],[75,8,61,8,"useCommon"],[75,17,61,4],[75,19,61,19],[76,0,62,8,"result"],[76,6,62,8,"result"],[76,12,62,14],[76,15,62,17,"matchAsTree"],[76,26,62,28],[76,27,62,29,"tokens"],[76,33,62,28],[76,35,62,37,"lexer"],[76,40,62,42],[76,41,62,43,"valueCommonSyntax"],[76,58,62,28],[76,60,62,62,"lexer"],[76,65,62,28],[76,66,62,8],[77,0,63,5],[79,0,65,4],[79,8,65,8],[79,9,65,9,"useCommon"],[79,18,65,8],[79,22,65,22],[79,23,65,23,"result"],[79,29,65,29],[79,30,65,30,"match"],[79,35,65,4],[79,37,65,37],[80,0,66,8,"result"],[80,6,66,8,"result"],[80,12,66,14],[80,15,66,17,"matchAsTree"],[80,26,66,28],[80,27,66,29,"tokens"],[80,33,66,28],[80,35,66,37,"syntax"],[80,41,66,43],[80,42,66,44,"match"],[80,47,66,28],[80,49,66,51,"lexer"],[80,54,66,28],[80,55,66,8],[82,0,67,8],[82,10,67,12],[82,11,67,13,"result"],[82,17,67,19],[82,18,67,20,"match"],[82,23,67,8],[82,25,67,27],[83,0,68,12],[83,15,68,19,"buildMatchResult"],[83,31,68,35],[83,32,69,16],[83,36,68,35],[83,38,70,16],[83,42,70,20,"MatchError"],[83,52,70,16],[83,53,70,31,"result"],[83,59,70,37],[83,60,70,38,"reason"],[83,66,70,16],[83,68,70,46,"syntax"],[83,74,70,52],[83,75,70,53,"syntax"],[83,81,70,16],[83,83,70,61,"value"],[83,88,70,16],[83,90,70,68,"result"],[83,96,70,16],[83,97,68,35],[83,99,71,16,"result"],[83,105,71,22],[83,106,71,23,"iterations"],[83,116,68,35],[83,117,68,12],[84,0,73,9],[85,0,74,5],[87,0,76,4],[87,11,76,11,"buildMatchResult"],[87,27,76,27],[87,28,76,28,"result"],[87,34,76,34],[87,35,76,35,"match"],[87,40,76,27],[87,42,76,42],[87,46,76,27],[87,48,76,48,"result"],[87,54,76,54],[87,55,76,55,"iterations"],[87,65,76,27],[87,66,76,4],[88,0,77,1],[90,0,79,0],[90,6,79,4,"Lexer"],[90,11,79,9],[90,14,79,12],[90,23,79,4,"Lexer"],[90,28,79,12],[90,29,79,21,"config"],[90,35,79,12],[90,37,79,29,"syntax"],[90,43,79,12],[90,45,79,37,"structure"],[90,54,79,12],[90,56,79,48],[91,0,80,4],[91,9,80,9,"valueCommonSyntax"],[91,26,80,4],[91,29,80,29,"cssWideKeywords"],[91,44,80,4],[92,0,81,4],[92,9,81,9,"syntax"],[92,15,81,4],[92,18,81,18,"syntax"],[92,24,81,4],[93,0,82,4],[93,9,82,9,"generic"],[93,16,82,4],[93,19,82,19],[93,24,82,4],[94,0,83,4],[94,9,83,9,"properties"],[94,19,83,4],[94,22,83,22],[94,24,83,4],[95,0,84,4],[95,9,84,9,"types"],[95,14,84,4],[95,17,84,17],[95,19,84,4],[96,0,85,4],[96,9,85,9,"structure"],[96,18,85,4],[96,21,85,21,"structure"],[96,30,85,30],[96,34,85,34,"getStructureFromConfig"],[96,56,85,56],[96,57,85,57,"config"],[96,63,85,56],[96,64,85,4],[98,0,87,4],[98,8,87,8,"config"],[98,14,87,4],[98,16,87,16],[99,0,88,8],[99,10,88,12,"config"],[99,16,88,18],[99,17,88,19,"types"],[99,22,88,8],[99,24,88,26],[100,0,89,12],[100,13,89,17],[100,17,89,21,"name"],[100,21,89,12],[100,25,89,29,"config"],[100,31,89,35],[100,32,89,36,"types"],[100,37,89,12],[100,39,89,43],[101,0,90,16],[101,15,90,21,"addType_"],[101,23,90,16],[101,24,90,30,"name"],[101,28,90,16],[101,30,90,36,"config"],[101,36,90,42],[101,37,90,43,"types"],[101,42,90,36],[101,43,90,49,"name"],[101,47,90,36],[101,48,90,16],[102,0,91,13],[103,0,92,9],[105,0,94,8],[105,10,94,12,"config"],[105,16,94,18],[105,17,94,19,"generic"],[105,24,94,8],[105,26,94,28],[106,0,95,12],[106,13,95,17,"generic"],[106,20,95,12],[106,23,95,27],[106,27,95,12],[108,0,96,12],[108,13,96,17],[108,17,96,21,"name"],[108,21,96,12],[108,25,96,29,"generic"],[108,32,96,12],[108,34,96,38],[109,0,97,16],[109,15,97,21,"addType_"],[109,23,97,16],[109,24,97,30,"name"],[109,28,97,16],[109,30,97,36,"generic"],[109,37,97,43],[109,38,97,44,"name"],[109,42,97,43],[109,43,97,16],[110,0,98,13],[111,0,99,9],[113,0,101,8],[113,10,101,12,"config"],[113,16,101,18],[113,17,101,19,"properties"],[113,27,101,8],[113,29,101,31],[114,0,102,12],[114,13,102,17],[114,17,102,21,"name"],[114,21,102,12],[114,25,102,29,"config"],[114,31,102,35],[114,32,102,36,"properties"],[114,42,102,12],[114,44,102,48],[115,0,103,16],[115,15,103,21,"addProperty_"],[115,27,103,16],[115,28,103,34,"name"],[115,32,103,16],[115,34,103,40,"config"],[115,40,103,46],[115,41,103,47,"properties"],[115,51,103,40],[115,52,103,58,"name"],[115,56,103,40],[115,57,103,16],[116,0,104,13],[117,0,105,9],[118,0,106,5],[119,0,107,1],[119,3,79,0],[121,0,109,0,"Lexer"],[121,2,109,0,"Lexer"],[121,7,109,5],[121,8,109,6,"prototype"],[121,17,109,0],[121,20,109,18],[122,0,110,4,"structure"],[122,4,110,4,"structure"],[122,13,110,13],[122,15,110,15],[122,17,109,18],[123,0,111,4,"checkStructure"],[123,4,111,4,"checkStructure"],[123,18,111,18],[123,20,111,20],[123,44,111,29,"ast"],[123,47,111,20],[123,49,111,34],[124,0,112,8],[124,15,112,17,"collectWarning"],[124,29,112,8],[124,30,112,32,"node"],[124,34,112,8],[124,36,112,38,"message"],[124,43,112,8],[124,45,112,47],[125,0,113,12,"warns"],[125,8,113,12,"warns"],[125,13,113,17],[125,14,113,18,"push"],[125,18,113,12],[125,19,113,23],[126,0,114,16,"node"],[126,10,114,16,"node"],[126,14,114,20],[126,16,114,22,"node"],[126,20,113,23],[127,0,115,16,"message"],[127,10,115,16,"message"],[127,17,115,23],[127,19,115,25,"message"],[128,0,113,23],[128,9,113,12],[129,0,117,9],[131,0,119,8],[131,10,119,12,"structure"],[131,19,119,21],[131,22,119,24],[131,27,119,29,"structure"],[131,36,119,8],[132,0,120,8],[132,10,120,12,"warns"],[132,15,120,17],[132,18,120,20],[132,20,120,8],[133,0,122,8],[133,11,122,13,"syntax"],[133,17,122,8],[133,18,122,20,"walk"],[133,22,122,8],[133,23,122,25,"ast"],[133,26,122,8],[133,28,122,30],[133,38,122,39,"node"],[133,42,122,30],[133,44,122,45],[134,0,123,12],[134,12,123,16,"structure"],[134,21,123,25],[134,22,123,26,"hasOwnProperty"],[134,36,123,16],[134,37,123,41,"node"],[134,41,123,45],[134,42,123,46,"type"],[134,46,123,16],[134,47,123,12],[134,49,123,53],[135,0,124,16,"structure"],[135,10,124,16,"structure"],[135,19,124,25],[135,20,124,26,"node"],[135,24,124,30],[135,25,124,31,"type"],[135,29,124,25],[135,30,124,16],[135,31,124,37,"check"],[135,36,124,16],[135,37,124,43,"node"],[135,41,124,16],[135,43,124,49,"collectWarning"],[135,57,124,16],[136,0,125,13],[136,9,123,12],[136,15,125,19],[137,0,126,16,"collectWarning"],[137,10,126,16,"collectWarning"],[137,24,126,30],[137,25,126,31,"node"],[137,29,126,30],[137,31,126,37],[137,55,126,61,"node"],[137,59,126,65],[137,60,126,66,"type"],[137,64,126,37],[137,67,126,73],[137,70,126,30],[137,71,126,16],[138,0,127,13],[139,0,128,9],[139,7,122,8],[140,0,130,8],[140,13,130,15,"warns"],[140,18,130,20],[140,19,130,21,"length"],[140,25,130,15],[140,28,130,30,"warns"],[140,33,130,15],[140,36,130,38],[140,41,130,8],[141,0,131,5],[141,5,109,18],[142,0,133,4,"createDescriptor"],[142,4,133,4,"createDescriptor"],[142,20,133,20],[142,22,133,22],[142,48,133,31,"syntax"],[142,54,133,22],[142,56,133,39,"type"],[142,60,133,22],[142,62,133,45,"name"],[142,66,133,22],[142,68,133,51],[143,0,134,8],[143,10,134,12,"ref"],[143,13,134,15],[143,16,134,18],[144,0,135,12,"type"],[144,8,135,12,"type"],[144,12,135,16],[144,14,135,18,"type"],[144,18,134,18],[145,0,136,12,"name"],[145,8,136,12,"name"],[145,12,136,16],[145,14,136,18,"name"],[146,0,134,18],[146,7,134,8],[147,0,138,8],[147,10,138,12,"descriptor"],[147,20,138,22],[147,23,138,25],[148,0,139,12,"type"],[148,8,139,12,"type"],[148,12,139,16],[148,14,139,18,"type"],[148,18,138,25],[149,0,140,12,"name"],[149,8,140,12,"name"],[149,12,140,16],[149,14,140,18,"name"],[149,18,138,25],[150,0,141,12,"syntax"],[150,8,141,12,"syntax"],[150,14,141,18],[150,16,141,20],[150,20,138,25],[151,0,142,12,"match"],[151,8,142,12,"match"],[151,13,142,17],[151,15,142,19],[152,0,138,25],[152,7,138,8],[154,0,145,8],[154,10,145,12],[154,17,145,19,"syntax"],[154,23,145,12],[154,28,145,30],[154,38,145,8],[154,40,145,42],[155,0,146,12,"descriptor"],[155,8,146,12,"descriptor"],[155,18,146,22],[155,19,146,23,"match"],[155,24,146,12],[155,27,146,31,"buildMatchGraph"],[155,42,146,46],[155,43,146,47,"syntax"],[155,49,146,46],[155,51,146,55,"ref"],[155,54,146,46],[155,55,146,12],[156,0,147,9],[156,7,145,8],[156,13,147,15],[157,0,148,12],[157,12,148,16],[157,19,148,23,"syntax"],[157,25,148,16],[157,30,148,34],[157,38,148,12],[157,40,148,44],[158,0,150,16,"Object"],[158,10,150,16,"Object"],[158,16,150,22],[158,17,150,23,"defineProperty"],[158,31,150,16],[158,32,150,38,"descriptor"],[158,42,150,16],[158,44,150,50],[158,52,150,16],[158,54,150,60],[159,0,151,20,"get"],[159,12,151,20,"get"],[159,15,151,23],[159,17,151,25],[159,32,151,36],[160,0,152,24,"Object"],[160,14,152,24,"Object"],[160,20,152,30],[160,21,152,31,"defineProperty"],[160,35,152,24],[160,36,152,46,"descriptor"],[160,46,152,24],[160,48,152,58],[160,56,152,24],[160,58,152,68],[161,0,153,28,"value"],[161,16,153,28,"value"],[161,21,153,33],[161,23,153,35,"parse"],[161,28,153,40],[161,29,153,41,"syntax"],[161,35,153,40],[162,0,152,68],[162,15,152,24],[163,0,156,24],[163,21,156,31,"descriptor"],[163,31,156,41],[163,32,156,42,"syntax"],[163,38,156,24],[164,0,157,21],[165,0,150,60],[165,11,150,16],[166,0,159,13],[166,9,148,12],[166,15,159,19],[167,0,160,16,"descriptor"],[167,10,160,16,"descriptor"],[167,20,160,26],[167,21,160,27,"syntax"],[167,27,160,16],[167,30,160,36,"syntax"],[167,36,160,16],[168,0,161,13],[170,0,164,12,"Object"],[170,8,164,12,"Object"],[170,14,164,18],[170,15,164,19,"defineProperty"],[170,29,164,12],[170,30,164,34,"descriptor"],[170,40,164,12],[170,42,164,46],[170,49,164,12],[170,51,164,55],[171,0,165,16,"get"],[171,10,165,16,"get"],[171,13,165,19],[171,15,165,21],[171,30,165,32],[172,0,166,20,"Object"],[172,12,166,20,"Object"],[172,18,166,26],[172,19,166,27,"defineProperty"],[172,33,166,20],[172,34,166,42,"descriptor"],[172,44,166,20],[172,46,166,54],[172,53,166,20],[172,55,166,63],[173,0,167,24,"value"],[173,14,167,24,"value"],[173,19,167,29],[173,21,167,31,"buildMatchGraph"],[173,36,167,46],[173,37,167,47,"descriptor"],[173,47,167,57],[173,48,167,58,"syntax"],[173,54,167,46],[173,56,167,66,"ref"],[173,59,167,46],[174,0,166,63],[174,13,166,20],[175,0,170,20],[175,19,170,27,"descriptor"],[175,29,170,37],[175,30,170,38,"match"],[175,35,170,20],[176,0,171,17],[177,0,164,55],[177,9,164,12],[178,0,173,9],[180,0,175,8],[180,13,175,15,"descriptor"],[180,23,175,8],[181,0,176,5],[181,5,109,18],[182,0,177,4,"addProperty_"],[182,4,177,4,"addProperty_"],[182,16,177,16],[182,18,177,18],[182,40,177,27,"name"],[182,44,177,18],[182,46,177,33,"syntax"],[182,52,177,18],[182,54,177,41],[183,0,178,8],[183,11,178,13,"properties"],[183,21,178,8],[183,22,178,24,"name"],[183,26,178,8],[183,30,178,32],[183,35,178,37,"createDescriptor"],[183,51,178,32],[183,52,178,54,"syntax"],[183,58,178,32],[183,60,178,62],[183,70,178,32],[183,72,178,74,"name"],[183,76,178,32],[183,77,178,8],[184,0,179,5],[184,5,109,18],[185,0,180,4,"addType_"],[185,4,180,4,"addType_"],[185,12,180,12],[185,14,180,14],[185,32,180,23,"name"],[185,36,180,14],[185,38,180,29,"syntax"],[185,44,180,14],[185,46,180,37],[186,0,181,8],[186,11,181,13,"types"],[186,16,181,8],[186,17,181,19,"name"],[186,21,181,8],[186,25,181,27],[186,30,181,32,"createDescriptor"],[186,46,181,27],[186,47,181,49,"syntax"],[186,53,181,27],[186,55,181,57],[186,61,181,27],[186,63,181,65,"name"],[186,67,181,27],[186,68,181,8],[188,0,183,8],[188,10,183,12,"syntax"],[188,16,183,18],[188,21,183,23,"generic"],[188,28,183,30],[188,29,183,31],[188,52,183,30],[188,53,183,8],[188,55,183,57],[189,0,184,12],[189,13,184,17,"valueCommonSyntax"],[189,30,184,12],[189,33,184,37,"cssWideKeywordsWithExpression"],[189,62,184,12],[190,0,185,9],[191,0,186,5],[191,5,109,18],[192,0,188,4,"matchDeclaration"],[192,4,188,4,"matchDeclaration"],[192,20,188,20],[192,22,188,22],[192,48,188,31,"node"],[192,52,188,22],[192,54,188,37],[193,0,189,8],[193,10,189,12,"node"],[193,14,189,16],[193,15,189,17,"type"],[193,19,189,12],[193,24,189,26],[193,37,189,8],[193,39,189,41],[194,0,190,12],[194,15,190,19,"buildMatchResult"],[194,31,190,35],[194,32,190,36],[194,36,190,35],[194,38,190,42],[194,42,190,46,"Error"],[194,47,190,42],[194,48,190,52],[194,72,190,42],[194,73,190,35],[194,74,190,12],[195,0,191,9],[197,0,193,8],[197,13,193,15],[197,18,193,20,"matchProperty"],[197,31,193,15],[197,32,193,34,"node"],[197,36,193,38],[197,37,193,39,"property"],[197,45,193,15],[197,47,193,49,"node"],[197,51,193,53],[197,52,193,54,"value"],[197,57,193,15],[197,58,193,8],[198,0,194,5],[198,5,109,18],[199,0,195,4,"matchProperty"],[199,4,195,4,"matchProperty"],[199,17,195,17],[199,19,195,19],[199,42,195,28,"propertyName"],[199,54,195,19],[199,56,195,42,"value"],[199,61,195,19],[199,63,195,49],[200,0,196,8],[200,10,196,12,"property"],[200,18,196,20],[200,21,196,23,"names"],[200,26,196,28],[200,27,196,29,"property"],[200,35,196,23],[200,36,196,38,"propertyName"],[200,48,196,23],[200,49,196,8],[202,0,199,8],[202,10,199,12,"property"],[202,18,199,20],[202,19,199,21,"custom"],[202,25,199,8],[202,27,199,29],[203,0,200,12],[203,15,200,19,"buildMatchResult"],[203,31,200,35],[203,32,200,36],[203,36,200,35],[203,38,200,42],[203,42,200,46,"Error"],[203,47,200,42],[203,48,200,52],[203,106,200,42],[203,107,200,35],[203,108,200,12],[204,0,201,9],[206,0,203,8],[206,10,203,12,"propertySyntax"],[206,24,203,26],[206,27,203,29,"property"],[206,35,203,37],[206,36,203,38,"vendor"],[206,42,203,29],[206,45,204,14],[206,50,204,19,"getProperty"],[206,61,204,14],[206,62,204,31,"property"],[206,70,204,39],[206,71,204,40,"name"],[206,75,204,14],[206,80,204,49],[206,85,204,54,"getProperty"],[206,96,204,49],[206,97,204,66,"property"],[206,105,204,74],[206,106,204,75,"basename"],[206,114,204,49],[206,115,203,29],[206,118,205,14],[206,123,205,19,"getProperty"],[206,134,205,14],[206,135,205,31,"property"],[206,143,205,39],[206,144,205,40,"name"],[206,148,205,14],[206,149,203,8],[208,0,207,8],[208,10,207,12],[208,11,207,13,"propertySyntax"],[208,25,207,8],[208,27,207,29],[209,0,208,12],[209,15,208,19,"buildMatchResult"],[209,31,208,35],[209,32,208,36],[209,36,208,35],[209,38,208,42],[209,42,208,46,"SyntaxReferenceError"],[209,62,208,42],[209,63,208,67],[209,81,208,42],[209,83,208,87,"propertyName"],[209,95,208,42],[209,96,208,35],[209,97,208,12],[210,0,209,9],[212,0,211,8],[212,13,211,15,"matchSyntax"],[212,24,211,26],[212,25,211,27],[212,29,211,26],[212,31,211,33,"propertySyntax"],[212,45,211,26],[212,47,211,49,"value"],[212,52,211,26],[212,54,211,56],[212,58,211,26],[212,59,211,8],[213,0,212,5],[213,5,109,18],[214,0,213,4,"matchType"],[214,4,213,4,"matchType"],[214,13,213,13],[214,15,213,15],[214,34,213,24,"typeName"],[214,42,213,15],[214,44,213,34,"value"],[214,49,213,15],[214,51,213,41],[215,0,214,8],[215,10,214,12,"typeSyntax"],[215,20,214,22],[215,23,214,25],[215,28,214,30,"getType"],[215,35,214,25],[215,36,214,38,"typeName"],[215,44,214,25],[215,45,214,8],[217,0,216,8],[217,10,216,12],[217,11,216,13,"typeSyntax"],[217,21,216,8],[217,23,216,25],[218,0,217,12],[218,15,217,19,"buildMatchResult"],[218,31,217,35],[218,32,217,36],[218,36,217,35],[218,38,217,42],[218,42,217,46,"SyntaxReferenceError"],[218,62,217,42],[218,63,217,67],[218,77,217,42],[218,79,217,83,"typeName"],[218,87,217,42],[218,88,217,35],[218,89,217,12],[219,0,218,9],[221,0,220,8],[221,13,220,15,"matchSyntax"],[221,24,220,26],[221,25,220,27],[221,29,220,26],[221,31,220,33,"typeSyntax"],[221,41,220,26],[221,43,220,45,"value"],[221,48,220,26],[221,50,220,52],[221,55,220,26],[221,56,220,8],[222,0,221,5],[222,5,109,18],[223,0,222,4,"match"],[223,4,222,4,"match"],[223,9,222,9],[223,11,222,11],[223,26,222,20,"syntax"],[223,32,222,11],[223,34,222,28,"value"],[223,39,222,11],[223,41,222,35],[224,0,223,8],[224,10,223,12],[224,17,223,19,"syntax"],[224,23,223,12],[224,28,223,30],[224,36,223,12],[224,41,223,43],[224,42,223,44,"syntax"],[224,48,223,43],[224,52,223,54],[224,53,223,55,"syntax"],[224,59,223,61],[224,60,223,62,"type"],[224,64,223,12],[224,65,223,8],[224,67,223,69],[225,0,224,12],[225,15,224,19,"buildMatchResult"],[225,31,224,35],[225,32,224,36],[225,36,224,35],[225,38,224,42],[225,42,224,46,"SyntaxReferenceError"],[225,62,224,42],[225,63,224,67],[225,75,224,42],[225,76,224,35],[225,77,224,12],[226,0,225,9],[228,0,227,8],[228,10,227,12],[228,17,227,19,"syntax"],[228,23,227,12],[228,28,227,30],[228,36,227,12],[228,40,227,42],[228,41,227,43,"syntax"],[228,47,227,49],[228,48,227,50,"match"],[228,53,227,8],[228,55,227,57],[229,0,228,12,"syntax"],[229,8,228,12,"syntax"],[229,14,228,18],[229,17,228,21],[229,22,228,26,"createDescriptor"],[229,38,228,21],[229,39,228,43,"syntax"],[229,45,228,21],[229,47,228,51],[229,53,228,21],[229,55,228,59],[229,66,228,21],[229,67,228,12],[230,0,229,9],[232,0,231,8],[232,13,231,15,"matchSyntax"],[232,24,231,26],[232,25,231,27],[232,29,231,26],[232,31,231,33,"syntax"],[232,37,231,26],[232,39,231,41,"value"],[232,44,231,26],[232,46,231,48],[232,51,231,26],[232,52,231,8],[233,0,232,5],[233,5,109,18],[234,0,234,4,"findValueFragments"],[234,4,234,4,"findValueFragments"],[234,22,234,22],[234,24,234,24],[234,52,234,33,"propertyName"],[234,64,234,24],[234,66,234,47,"value"],[234,71,234,24],[234,73,234,54,"type"],[234,77,234,24],[234,79,234,60,"name"],[234,83,234,24],[234,85,234,66],[235,0,235,8],[235,13,235,15,"search"],[235,19,235,21],[235,20,235,22,"matchFragments"],[235,34,235,15],[235,35,235,37],[235,39,235,15],[235,41,235,43,"value"],[235,46,235,15],[235,48,235,50],[235,53,235,55,"matchProperty"],[235,66,235,50],[235,67,235,69,"propertyName"],[235,79,235,50],[235,81,235,83,"value"],[235,86,235,50],[235,87,235,15],[235,89,235,91,"type"],[235,93,235,15],[235,95,235,97,"name"],[235,99,235,15],[235,100,235,8],[236,0,236,5],[236,5,109,18],[237,0,237,4,"findDeclarationValueFragments"],[237,4,237,4,"findDeclarationValueFragments"],[237,33,237,33],[237,35,237,35],[237,74,237,44,"declaration"],[237,85,237,35],[237,87,237,57,"type"],[237,91,237,35],[237,93,237,63,"name"],[237,97,237,35],[237,99,237,69],[238,0,238,8],[238,13,238,15,"search"],[238,19,238,21],[238,20,238,22,"matchFragments"],[238,34,238,15],[238,35,238,37],[238,39,238,15],[238,41,238,43,"declaration"],[238,52,238,54],[238,53,238,55,"value"],[238,58,238,15],[238,60,238,62],[238,65,238,67,"matchDeclaration"],[238,81,238,62],[238,82,238,84,"declaration"],[238,93,238,62],[238,94,238,15],[238,96,238,98,"type"],[238,100,238,15],[238,102,238,104,"name"],[238,106,238,15],[238,107,238,8],[239,0,239,5],[239,5,109,18],[240,0,240,4,"findAllFragments"],[240,4,240,4,"findAllFragments"],[240,20,240,20],[240,22,240,22],[240,48,240,31,"ast"],[240,51,240,22],[240,53,240,36,"type"],[240,57,240,22],[240,59,240,42,"name"],[240,63,240,22],[240,65,240,48],[241,0,241,8],[241,10,241,12,"result"],[241,16,241,18],[241,19,241,21],[241,21,241,8],[242,0,243,8],[242,11,243,13,"syntax"],[242,17,243,8],[242,18,243,20,"walk"],[242,22,243,8],[242,23,243,25,"ast"],[242,26,243,8],[242,28,243,30],[243,0,244,12,"visit"],[243,8,244,12,"visit"],[243,13,244,17],[243,15,244,19],[243,28,243,30],[244,0,245,12,"enter"],[244,8,245,12,"enter"],[244,13,245,17],[244,15,245,19],[244,25,245,28,"declaration"],[244,36,245,19],[244,38,245,41],[245,0,246,16,"result"],[245,10,246,16,"result"],[245,16,246,22],[245,17,246,23,"push"],[245,21,246,16],[245,22,246,28,"apply"],[245,27,246,16],[245,28,246,34,"result"],[245,34,246,16],[245,36,246,42],[245,41,246,47,"findDeclarationValueFragments"],[245,70,246,42],[245,71,246,77,"declaration"],[245,82,246,42],[245,84,246,90,"type"],[245,88,246,42],[245,90,246,96,"name"],[245,94,246,42],[245,95,246,16],[246,0,247,13],[246,9,245,19],[246,10,247,14,"bind"],[246,14,245,19],[246,15,247,19],[246,19,245,19],[247,0,243,30],[247,7,243,8],[248,0,250,8],[248,13,250,15,"result"],[248,19,250,8],[249,0,251,5],[249,5,109,18],[250,0,253,4,"getProperty"],[250,4,253,4,"getProperty"],[250,15,253,15],[250,17,253,17],[250,38,253,26,"name"],[250,42,253,17],[250,44,253,32],[251,0,254,8],[251,13,254,15],[251,18,254,20,"properties"],[251,28,254,15],[251,29,254,31,"hasOwnProperty"],[251,43,254,15],[251,44,254,46,"name"],[251,48,254,15],[251,52,254,54],[251,57,254,59,"properties"],[251,67,254,54],[251,68,254,70,"name"],[251,72,254,54],[251,73,254,15],[251,76,254,78],[251,80,254,8],[252,0,255,5],[252,5,109,18],[253,0,256,4,"getType"],[253,4,256,4,"getType"],[253,11,256,11],[253,13,256,13],[253,30,256,22,"name"],[253,34,256,13],[253,36,256,28],[254,0,257,8],[254,13,257,15],[254,18,257,20,"types"],[254,23,257,15],[254,24,257,26,"hasOwnProperty"],[254,38,257,15],[254,39,257,41,"name"],[254,43,257,15],[254,47,257,49],[254,52,257,54,"types"],[254,57,257,49],[254,58,257,60,"name"],[254,62,257,49],[254,63,257,15],[254,66,257,68],[254,70,257,8],[255,0,258,5],[255,5,109,18],[256,0,260,4,"validate"],[256,4,260,4,"validate"],[256,12,260,12],[256,14,260,14],[256,34,260,25],[257,0,261,8],[257,15,261,17,"validate"],[257,23,261,8],[257,24,261,26,"syntax"],[257,30,261,8],[257,32,261,34,"name"],[257,36,261,8],[257,38,261,40,"broken"],[257,44,261,8],[257,46,261,48,"descriptor"],[257,56,261,8],[257,58,261,60],[258,0,262,12],[258,12,262,16,"broken"],[258,18,262,22],[258,19,262,23,"hasOwnProperty"],[258,33,262,16],[258,34,262,38,"name"],[258,38,262,16],[258,39,262,12],[258,41,262,45],[259,0,263,16],[259,17,263,23,"broken"],[259,23,263,29],[259,24,263,30,"name"],[259,28,263,29],[259,29,263,16],[260,0,264,13],[262,0,266,12,"broken"],[262,8,266,12,"broken"],[262,14,266,18],[262,15,266,19,"name"],[262,19,266,18],[262,20,266,12],[262,23,266,27],[262,28,266,12],[264,0,267,12],[264,12,267,16,"descriptor"],[264,22,267,26],[264,23,267,27,"syntax"],[264,29,267,16],[264,34,267,38],[264,38,267,12],[264,40,267,44],[265,0,268,16,"walk"],[265,10,268,16,"walk"],[265,14,268,20],[265,15,268,21,"descriptor"],[265,25,268,31],[265,26,268,32,"syntax"],[265,32,268,20],[265,34,268,40],[265,44,268,49,"node"],[265,48,268,40],[265,50,268,55],[266,0,269,20],[266,16,269,24,"node"],[266,20,269,28],[266,21,269,29,"type"],[266,25,269,24],[266,30,269,38],[266,36,269,24],[266,40,269,48,"node"],[266,44,269,52],[266,45,269,53,"type"],[266,49,269,48],[266,54,269,62],[266,64,269,20],[266,66,269,74],[267,0,270,24],[268,0,271,21],[270,0,273,20],[270,16,273,24,"map"],[270,19,273,27],[270,22,273,30,"node"],[270,26,273,34],[270,27,273,35,"type"],[270,31,273,30],[270,36,273,44],[270,42,273,30],[270,45,273,53,"syntax"],[270,51,273,59],[270,52,273,60,"types"],[270,57,273,30],[270,60,273,68,"syntax"],[270,66,273,74],[270,67,273,75,"properties"],[270,77,273,20],[271,0,274,20],[271,16,274,24,"brokenMap"],[271,25,274,33],[271,28,274,36,"node"],[271,32,274,40],[271,33,274,41,"type"],[271,37,274,36],[271,42,274,50],[271,48,274,36],[271,51,274,59,"brokenTypes"],[271,62,274,36],[271,65,274,73,"brokenProperties"],[271,81,274,20],[273,0,276,20],[273,16,276,24],[273,17,276,25,"map"],[273,20,276,28],[273,21,276,29,"hasOwnProperty"],[273,35,276,25],[273,36,276,44,"node"],[273,40,276,48],[273,41,276,49,"name"],[273,45,276,25],[273,46,276,24],[273,50,276,58,"validate"],[273,58,276,66],[273,59,276,67,"syntax"],[273,65,276,66],[273,67,276,75,"node"],[273,71,276,79],[273,72,276,80,"name"],[273,76,276,66],[273,78,276,86,"brokenMap"],[273,87,276,66],[273,89,276,97,"map"],[273,92,276,100],[273,93,276,101,"node"],[273,97,276,105],[273,98,276,106,"name"],[273,102,276,100],[273,103,276,66],[273,104,276,20],[273,106,276,114],[274,0,277,24,"broken"],[274,14,277,24,"broken"],[274,20,277,30],[274,21,277,31,"name"],[274,25,277,30],[274,26,277,24],[274,29,277,39],[274,33,277,24],[275,0,278,21],[276,0,279,17],[276,11,268,20],[276,13,279,19],[276,17,268,20],[276,18,268,16],[277,0,280,13],[278,0,281,9],[280,0,283,8],[280,10,283,12,"brokenTypes"],[280,21,283,23],[280,24,283,26],[280,26,283,8],[281,0,284,8],[281,10,284,12,"brokenProperties"],[281,26,284,28],[281,29,284,31],[281,31,284,8],[283,0,286,8],[283,11,286,13],[283,15,286,17,"key"],[283,18,286,8],[283,22,286,24],[283,27,286,29,"types"],[283,32,286,8],[283,34,286,36],[284,0,287,12,"validate"],[284,8,287,12,"validate"],[284,16,287,20],[284,17,287,21],[284,21,287,20],[284,23,287,27,"key"],[284,26,287,20],[284,28,287,32,"brokenTypes"],[284,39,287,20],[284,41,287,45],[284,46,287,50,"types"],[284,51,287,45],[284,52,287,56,"key"],[284,55,287,45],[284,56,287,20],[284,57,287,12],[285,0,288,9],[287,0,290,8],[287,11,290,13],[287,15,290,17,"key"],[287,18,290,8],[287,22,290,24],[287,27,290,29,"properties"],[287,37,290,8],[287,39,290,41],[288,0,291,12,"validate"],[288,8,291,12,"validate"],[288,16,291,20],[288,17,291,21],[288,21,291,20],[288,23,291,27,"key"],[288,26,291,20],[288,28,291,32,"brokenProperties"],[288,44,291,20],[288,46,291,50],[288,51,291,55,"properties"],[288,61,291,50],[288,62,291,66,"key"],[288,65,291,50],[288,66,291,20],[288,67,291,12],[289,0,292,9],[291,0,294,8,"brokenTypes"],[291,6,294,8,"brokenTypes"],[291,17,294,19],[291,20,294,22,"Object"],[291,26,294,28],[291,27,294,29,"keys"],[291,31,294,22],[291,32,294,34,"brokenTypes"],[291,43,294,22],[291,45,294,47,"filter"],[291,51,294,22],[291,52,294,54],[291,62,294,63,"name"],[291,66,294,54],[291,68,294,69],[292,0,295,12],[292,15,295,19,"brokenTypes"],[292,26,295,30],[292,27,295,31,"name"],[292,31,295,30],[292,32,295,12],[293,0,296,9],[293,7,294,22],[293,8,294,8],[294,0,297,8,"brokenProperties"],[294,6,297,8,"brokenProperties"],[294,22,297,24],[294,25,297,27,"Object"],[294,31,297,33],[294,32,297,34,"keys"],[294,36,297,27],[294,37,297,39,"brokenProperties"],[294,53,297,27],[294,55,297,57,"filter"],[294,61,297,27],[294,62,297,64],[294,72,297,73,"name"],[294,76,297,64],[294,78,297,79],[295,0,298,12],[295,15,298,19,"brokenProperties"],[295,31,298,35],[295,32,298,36,"name"],[295,36,298,35],[295,37,298,12],[296,0,299,9],[296,7,297,27],[296,8,297,8],[298,0,301,8],[298,10,301,12,"brokenTypes"],[298,21,301,23],[298,22,301,24,"length"],[298,28,301,12],[298,32,301,34,"brokenProperties"],[298,48,301,50],[298,49,301,51,"length"],[298,55,301,8],[298,57,301,59],[299,0,302,12],[299,15,302,19],[300,0,303,16,"types"],[300,10,303,16,"types"],[300,15,303,21],[300,17,303,23,"brokenTypes"],[300,28,302,19],[301,0,304,16,"properties"],[301,10,304,16,"properties"],[301,20,304,26],[301,22,304,28,"brokenProperties"],[302,0,302,19],[302,9,302,12],[303,0,306,9],[305,0,308,8],[305,13,308,15],[305,17,308,8],[306,0,309,5],[306,5,109,18],[307,0,310,4,"dump"],[307,4,310,4,"dump"],[307,8,310,8],[307,10,310,10],[307,24,310,19,"syntaxAsAst"],[307,35,310,10],[307,37,310,32,"pretty"],[307,43,310,10],[307,45,310,40],[308,0,311,8],[308,13,311,15],[309,0,312,12,"generic"],[309,8,312,12,"generic"],[309,15,312,19],[309,17,312,21],[309,22,312,26,"generic"],[309,29,311,15],[310,0,313,12,"types"],[310,8,313,12,"types"],[310,13,313,17],[310,15,313,19,"dumpMapSyntax"],[310,28,313,32],[310,29,313,33],[310,34,313,38,"types"],[310,39,313,32],[310,41,313,45],[310,42,313,46,"pretty"],[310,48,313,32],[310,50,313,54,"syntaxAsAst"],[310,61,313,32],[310,62,311,15],[311,0,314,12,"properties"],[311,8,314,12,"properties"],[311,18,314,22],[311,20,314,24,"dumpMapSyntax"],[311,33,314,37],[311,34,314,38],[311,39,314,43,"properties"],[311,49,314,37],[311,51,314,55],[311,52,314,56,"pretty"],[311,58,314,37],[311,60,314,64,"syntaxAsAst"],[311,71,314,37],[312,0,311,15],[312,7,311,8],[313,0,316,5],[313,5,109,18],[314,0,317,4,"toString"],[314,4,317,4,"toString"],[314,12,317,12],[314,14,317,14],[314,34,317,25],[315,0,318,8],[315,13,318,15,"JSON"],[315,17,318,19],[315,18,318,20,"stringify"],[315,27,318,15],[315,28,318,30],[315,33,318,35,"dump"],[315,37,318,30],[315,39,318,15],[315,40,318,8],[316,0,319,5],[317,0,109,18],[317,3,109,0],[318,0,322,0,"module"],[318,2,322,0,"module"],[318,8,322,6],[318,9,322,7,"exports"],[318,16,322,0],[318,19,322,17,"Lexer"],[318,24,322,0]]},"type":"js/module"}]}