b7113e354d124ad4d1c24965e00efcc3
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Welcome = _interopRequireDefault(require("../Accueil/Welcome"));

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _reactNativeGestureHandler = require("react-native-gesture-handler");

var _reactNativeSvg = _interopRequireWildcard(require("react-native-svg"));

var _styles = _interopRequireDefault(require("./styles"));

var _NavigationService = _interopRequireDefault(require("../Navigation/NavigationService"));

var _verifierDonnees = _interopRequireDefault(require("./verifierDonnees"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    width = _Dimensions$get.width,
    height = _Dimensions$get.height;

var Value = _reactNativeReanimated.default.Value,
    concat = _reactNativeReanimated.default.concat,
    event = _reactNativeReanimated.default.event,
    clockRunning = _reactNativeReanimated.default.clockRunning,
    timing = _reactNativeReanimated.default.timing,
    debug = _reactNativeReanimated.default.debug,
    stopClock = _reactNativeReanimated.default.stopClock,
    startClock = _reactNativeReanimated.default.startClock,
    Clock = _reactNativeReanimated.default.Clock,
    block = _reactNativeReanimated.default.block,
    cond = _reactNativeReanimated.default.cond,
    eq = _reactNativeReanimated.default.eq,
    Extrapolate = _reactNativeReanimated.default.Extrapolate,
    interpolate = _reactNativeReanimated.default.interpolate,
    set = _reactNativeReanimated.default.set;

var Login = function (_Component) {
  (0, _inherits2.default)(Login, _Component);

  function Login() {
    var _this;

    (0, _classCallCheck2.default)(this, Login);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Login).call(this));

    _this.login = function _callee() {
      var response;
      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return _regenerator.default.awrap(fetch('http://192.168.1.122:5000/users/login', {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  email: _this.state.userEmail,
                  motDePasse: _this.state.userPassword
                })
              }));

            case 3:
              response = _context.sent;
              _context.next = 6;
              return _regenerator.default.awrap(response.json());

            case 6:
              _this.state.responseAPI = _context.sent;
              _this.state.isLoading = false;
              _context.next = 13;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);
              console.log(_context.t0);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, [[0, 10]]);
    };

    _this.myValidate = function () {
      var _this$state = _this.state,
          userEmail = _this$state.userEmail,
          userPassword = _this$state.userPassword;

      if ((0, _verifierDonnees.default)(userEmail, userPassword)) {
        _this.login();

        if (_this.state.responseAPI.message == 'Utilisateur existant: Connexion reussie!!!') {
          _this.state.userPassword = '';
          _this.state.userEmail = '';
          global.utilisateur = _this.state.responseAPI.utilisateur;

          _NavigationService.default.navigate('Profile');
        } else if (_this.state.responseAPI.message != '') _reactNative.Alert.alert(_this.state.responseAPI.message);
      } else _reactNative.Alert.alert("Veuillez remplir votre mail et votre mot de passe");
    };

    _this.stopAction = function (e) {
      e.stopPropagation();
    };

    global.utilisateur = {};
    _this.state = {
      userEmail: "",
      userPassword: "",
      responseAPI: "",
      isLoading: true
    };
    _this.viewOpacity = new Value(1);
    _this.buttonOpacity = new Value(1);
    _this.onStateChange = event([{
      nativeEvent: function nativeEvent(_ref) {
        var state = _ref.state;
        return block([cond(eq(state, _reactNativeGestureHandler.State.END), set(_this.buttonOpacity, runTiming(new Clock(), 1, 0)))]);
      }
    }]);
    _this.onStateChangeView = event([{
      nativeEvent: function nativeEvent(_ref2) {
        var state = _ref2.state;
        return block([cond(eq(state, _reactNativeGestureHandler.State.END), set(_this.viewOpacity, runTiming(new Clock(), 1, 0)))]);
      }
    }]);
    _this.onCloseState = event([{
      nativeEvent: function nativeEvent(_ref3) {
        var state = _ref3.state;
        return block([cond(eq(state, _reactNativeGestureHandler.State.END), set(_this.buttonOpacity, runTiming(new Clock(), 0, 1)))]);
      }
    }]);
    _this.buttonY = interpolate(_this.buttonOpacity, {
      inputRange: [0, 1],
      outputRange: [100, 0],
      extrapolate: Extrapolate.CLAMP
    });
    _this.bgY = interpolate(_this.buttonOpacity, {
      inputRange: [0, 1],
      outputRange: [-height / 2 - 50, 0],
      extrapolate: Extrapolate.CLAMP
    });
    _this.textInputZindex = interpolate(_this.buttonOpacity, {
      inputRange: [0, 1],
      outputRange: [1, -1],
      extrapolate: Extrapolate.CLAMP
    });
    _this.textInputY = interpolate(_this.buttonOpacity, {
      inputRange: [0, 1],
      outputRange: [0, 300],
      extrapolate: Extrapolate.CLAMP
    });
    _this.textInputOpacity = interpolate(_this.buttonOpacity, {
      inputRange: [0, 1],
      outputRange: [1, 0],
      extrapolate: Extrapolate.CLAMP
    });
    _this.viewX = interpolate(_this.viewOpacity, {
      inputRange: [0, 1],
      outputRange: [width, 0],
      extrapolate: Extrapolate.CLAMP
    });
    _this.rotateCross = interpolate(_this.buttonOpacity, {
      inputRange: [0, 1],
      outputRange: [180, 360],
      extrapolate: Extrapolate.CLAMP
    });
    return _this;
  }

  (0, _createClass2.default)(Login, [{
    key: "inputFocused",
    value: function inputFocused(refName) {
      var _this2 = this;

      setTimeout(function () {
        var scrollResponder = _this2.refs.scrollView.getScrollResponder();

        scrollResponder.scrollResponderScrollNativeHandleToKeyboard(_react.default.findNodeHandle(_this2.refs[refName]), 110, true);
      }, 50);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      if (this.state.isLoading) {}

      return _react.default.createElement(_reactNative.View, {
        style: myContainer.container
      }, _react.default.createElement(_reactNativeReanimated.default.View, {
        style: _objectSpread({}, myContainer.container, {
          opacity: this.viewOpacity,
          transform: [{
            translateX: this.viewX
          }]
        })
      }, _react.default.createElement(_reactNativeReanimated.default.View, {
        style: _objectSpread({}, _reactNative.StyleSheet.absoluteFill, {
          transform: [{
            translateY: this.bgY
          }]
        })
      }, _react.default.createElement(_reactNativeSvg.default, {
        height: height + 50,
        width: width
      }, _react.default.createElement(_reactNativeSvg.ClipPath, {
        id: "clip"
      }, _react.default.createElement(_reactNativeSvg.Circle, {
        r: height + 50,
        cx: width / 2
      })), _react.default.createElement(_reactNativeSvg.Image, {
        href: require("../../images/feuille.jpg"),
        width: width,
        height: height + 50,
        preserveAspectRatio: "xMidYMid slice",
        clipPath: "url(#clip)"
      }))), _react.default.createElement(_reactNative.View, {
        style: {
          height: height / 2,
          justifyContent: 'center',
          marginVertical: 30
        }
      }, _react.default.createElement(_Welcome.default, null), _react.default.createElement(_reactNativeGestureHandler.TapGestureHandler, {
        onHandlerStateChange: this.onStateChange
      }, _react.default.createElement(_reactNativeReanimated.default.View, {
        style: _objectSpread({}, _styles.default.button, {
          backgroundColor: 'white',
          opacity: this.buttonOpacity,
          transform: [{
            translateY: this.buttonY
          }]
        })
      }, _react.default.createElement(_reactNative.Text, {
        style: {
          fontSize: 20,
          fontWeight: 'bold'
        }
      }, "Se connecter"))), _react.default.createElement(_reactNativeGestureHandler.TapGestureHandler, {
        onHandlerStateChange: function onHandlerStateChange() {
          _NavigationService.default.navigate('Register');
        }
      }, _react.default.createElement(_reactNativeReanimated.default.View, {
        style: _objectSpread({}, _styles.default.button, {
          backgroundColor: '#003d00',
          opacity: this.buttonOpacity,
          transform: [{
            translateY: this.buttonY
          }]
        })
      }, _react.default.createElement(_reactNative.Text, {
        style: {
          fontSize: 20,
          fontWeight: 'bold',
          color: 'white'
        }
      }, "Cr\xE9er un compte"))), _react.default.createElement(_reactNativeReanimated.default.View, {
        style: _objectSpread({
          height: height / 2
        }, _reactNative.StyleSheet.absoluteFill, {
          top: null,
          justifyContent: 'center',
          zIndex: this.textInputZindex,
          opacity: this.textInputOpacity,
          transform: [{
            translateY: this.textInputY
          }]
        })
      }, _react.default.createElement(_reactNativeGestureHandler.TapGestureHandler, {
        onHandlerStateChange: this.onCloseState
      }, _react.default.createElement(_reactNativeReanimated.default.View, {
        style: _styles.default.closeButton
      }, _react.default.createElement(_reactNativeReanimated.default.Text, {
        style: {
          fontSize: 15,
          color: 'black',
          fontWeight: 'bold',
          transform: [{
            rotate: concat(this.rotateCross, 'deg')
          }]
        }
      }, "X"))), _react.default.createElement(_reactNative.TextInput, {
        placeholder: "email",
        style: _styles.default.textInput,
        placeholderTextColor: "black",
        keyboardType: 'email-address',
        onChangeText: function onChangeText(userEmail) {
          return _this3.setState({
            userEmail: userEmail
          });
        },
        autoCapitalize: "none",
        returnKeyType: "next"
      }), _react.default.createElement(_reactNative.TextInput, {
        placeholder: "mot de passe",
        style: _styles.default.textInput,
        secureTextEntry: true,
        placeholderTextColor: "black",
        autoCapitalize: "none",
        onChangeText: function onChangeText(userPassword) {
          return _this3.setState({
            userPassword: userPassword
          });
        },
        keyboardType: 'default'
      }), _react.default.createElement(_reactNativeGestureHandler.TouchableOpacity, {
        style: _objectSpread({}, _styles.default.button, {
          backgroundColor: '#003d00'
        }),
        onPress: this.myValidate
      }, _react.default.createElement(_reactNative.Text, {
        style: {
          fontSize: 20,
          fontWeight: 'bold',
          color: 'white'
        }
      }, "Connexion"))))));
    }
  }]);
  return Login;
}(_react.Component);

exports.default = Login;

function runTiming(clock, value, dest) {
  var state = {
    finished: new Value(0),
    position: new Value(0),
    time: new Value(0),
    frameTime: new Value(0)
  };
  var config = {
    duration: 1000,
    toValue: new Value(0),
    easing: _reactNativeReanimated.Easing.inOut(_reactNativeReanimated.Easing.ease)
  };
  return block([cond(clockRunning(clock), 0, [set(state.finished, 0), set(state.time, 0), set(state.position, value), set(state.frameTime, 0), set(config.toValue, dest), startClock(clock)]), timing(clock, state, config), cond(state.finished, debug('stop clock', stopClock(clock))), state.position]);
}

var myContainer = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'flex-end',
    height: height,
    width: width
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,